
######### NAMING CONVENTIONS ##########

## groupId 
> It uniquely identifies your project across all projects. 
- A group ID should follow Java's package name rules. 
- This means it starts with a reversed domain name you control. 
For example : org.apache.maven

## artifactId 
- It is the name of the jar without version. 

## version 
>  It is numbers and dots (1.0, 1.1, 1.0.1, ...). 
- Don't use dates as they are usually associated with SNAPSHOT (nightly) builds.
- SNAPSHOT is used to denote the project is in progress

> Maven generate the archive file based on below 
formula:  artifactId-version.extension
EXAMPLE - spring-boot-demo-1.0-SNAPSHOT.jar


## mvn archetype:generate

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## Maven Build lifecycle?

validate 
compile
test
package
integration-test
verify
install
deploy

> if we use "install" command then all commands above it will execute like validate,compile,test...
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is transitive dependencies in maven?

> a third party jar might be dependent on some other library. This dependency of dependency is called Transitive dependencies

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## If we want to exclude any transitive dependency then how we can do it?

> We can use <exclusions> and <exclusion> tags under the main dependency and 
- in the <exclusion> tag we can mention the groupId and artifactId of the jar we want to remove.
EXAMPLE:

<dependencies>
  <dependency>
    <groupId>org.hibernate</groupId>
    <artifactId>hibernate-core</artifactId>
    <version>5.1.0.Final</version> 
	
	<exclusions>
	  <exclusion>
	    <groupId>org.jboss.logging</groupId>
		<artifactId>jboss-logging</artifactId>
	  </exclusion>
	</exclusions>
	
  <dependency>	
</dependencies>  
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is scope in the dependency?

> To limit the scope of the dependency to the given scope

## Type of scope
1. compile
> it is the DEFAULT SCOPE 

2. import

3. provided
- it is similar to compile but 
- it mean the dependency is provided by the container/JDK  at runtime

4. runtime
- the dependency is only available at runtime ie. at runtime test classpath but not at compile classpath

5. system

6. test
- it mean the dependency is limited to test source file not to compile source file 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~