## What is Git and its advantages?

> DVCS (distributed version control system)
> Branching and Merging – Easy context switching, feature based workflow and disposable
experimentation
> Simple and Fast – All the operation performed locally
> Data Consistency - Git ensures the cryptographic integrity of every bit of your project
> Stage Area(Index) - This is an intermediate area where commits can be formatted and reviewed before completing the commit
> Free and Open Source
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is difference between SVN vs GIT?

> SVN: Centralizedversion control system
- Need an internet connection to commit the files to central repository
- Central server goes down, developers cannot continue with their check-ins

GIT: Distributed version control system
- Supports non-linear development
- Local repo is clone of central repository
- No need of internet connection to commit as all operations done locally 
- Branching, Merging easy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## Difference between Git and GitHub?

> Git is a revision/version control system, 
- a tool to manage your source code history.

> GitHub is a hosting service for Git repositories.

- they are not the same thing: Git is the tool, GitHub is the service for projects that use Git.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## Mention the various Git repository hosting functions.

> Github, Gitlab, Bitbucket, SourceForge, GitEnterprise
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## Difference between Git Flow vs Github Flow?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is git workflow?

1. Create a "repository" for a project with a git hosting tool (like github)
2. Clone the repository to your local machine – git clone
3. Add a file to your local repo(workspace) and "commit" (save) the changes – git add, git commit
4. "Push" your changes to your master branch – git push
5. Make a change to your file with a git hosting tool and commit
6. "Pull" the changes to your local machine – git pull
7. Create a "branch" (version), make a change, commit the change - git branch, git add, git
commit
8. Open a "pull request" (propose changes to the master branch)
9. "Merge" your branch to the master branch – git merge
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## Describe the branching strategies you have used.

1. Feature branching 
– A feature branch model keeps all of the changes for a particular feature inside of a branch. 
- When the feature is fully tested and validated by automated tests, the branch is then merged into master.

2. Task branching 
– In this model, each task is implemented on its own branch with the task key included in the branch name. 
- It is easy to see which code implements which task, just look for the task key in the branch name.

3. Release branching 
– Once the develop branch has acquired enough features for a release, you can clone that branch to form a Release branch. 
- Creating this branch starts the next release cycle, so no new features can be added after this point, only bug fixes, documentation generation, and other release-oriented tasks should go in this branch. 
- Once it is ready to ship, the release gets merged into master and tagged with a version number. 
- In addition, it should be merged back into the develop branch, which may have progressed since the release was initiated.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## Explain the advantages of forking workflow

> There is a fundamental difference between the forking workflow and other popular git workflows. Rather than using a single server-side to act as the “central” codebase, it gives every developer their own server-side repository. The Forking Workflow is commonly seen in public open-source projects.

> A crucial advantage of the Forking Workflow is that contributions can be integrated without even needing everybody to push to a single central repository that leads to clean project history. Developers can push to their own server-side repositories, but only the project maintainer can push to the official repository.

> If developers are ready to publish a local commit, then they push the commit to their own public repository and not the official one. After this, they go for a pull request with the main repository that lets the project maintainer know an update is ready to be integrated.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is ‘bare repository’ in Git?

> It contains information about the version control and no working files (no tree) and it doesn’t contain the special .git sub-directory. 
- Instead, it contains all the contents of the .git sub-directory directly in the main directory itself, whereas the working directory consists of :
- A .git subdirectory with all the Git related revision history of your repository.
- A working tree, or checked out copies of your project files.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is clone Command?

$ git clone <remote repository URL> <Local directory Name>
- Clone a repository into a new directory

EXAMPLE: git clone https://github.com/sivajavatechie/JenkinsTest.git JenkinsClone

> To clone specific branch from the remote repository use git clone -b
git clone -b master https://github.com/sivajavatechie/JenkinsTest.git Master
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is difference between clone vs. pull?

> git clone is used to get a local copy of an existing remote repository to work on. 
- It's usually only used once for a given repository, unless you want to have multiple working copies of it around

> git pull (or git fetch + git merge) is how you update that local copy with new commits from the remote repository. 
- If you are collaborating with others, it is a command that you will run frequently.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is the difference between git pull and git fetch?

> "git pull" command pulls new changes or commits from a particular branch from your central repository and updates your target branch in your local repository.
- Git pull = git fetch + git merge 

> "git fetch" pulls all new commits from the desired branch and stores it in a new branch in your local repository. 
- If you want to reflect these changes in your target branch, "git fetch" must be followed with a "git merge". 
- Your target branch will only be updated after merging the target branch and fetched branch.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## what is purpose of checkout?

git checkout - Switch branches or restore working tree files
E. g1: git checkout mybranch – git switch to mybranch
E. g2: git checkout . – It restoes the tree files from remote repository to local repo
E. g3: git checkout commit_Id -- <filename> - This restores the commit_Id version file from remote to
Local repo
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## what is stash command and why we use it?

git-stash - Stash the changes in a dirty working directory away

$$ git legacy-stash push
- The command saves your local modifications away and reverts the working directory to match the HEAD commit.

$$ git legacy-stash show 
– list the modifications stashed away

$$ git legacy-stash apply – To restore the modifications stashed away

$$ git legacy-stash drop 
- used to remove the stashed item. It will remove the last added stash item by default, and it can also remove a specific item if you include it as an argument.
EXAMPLE: git stash drop stash@{0}

$$ git legacy-stash list 
- It will display the list of stashed items

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is the difference between the ‘git diff ’and ‘git status’?

> ‘git diff ’ depicts the changes between commits, commit and working tree, etc
- ‘git status’ shows you the diff bet working directory and the index
- ‘git diff’ is similar to ‘git status’
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What does a commit object contain?

> Commit object contains the following components, you should mention all the three points presented below:

1. A set of files, representing the state of a project at a given point of time
2. Reference to parent commit objects
3. An SHA-1 name, a 40 character string that uniquely identifies the commit object 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## what is merge command?

git-merge - Join two or more development histories together
Let us consider branch BugFix is created from master branch
 Code fix done in BugFix branch
 Now you need merge the BugFix branch to master branch
 You need to use below command from master branch
git merge BugFix – This command merges the code change done in BugFix branch into master branch
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## How will you know in Git if a branch has already been merged into master?

> To know if a branch has been merged into master or not you can use the below commands:

$$ git branch --merged 
– It lists the branches that have been merged into the current branch.

$$ git branch --no-merged 
– It lists the branches that have not been merged.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is difference between branch vs. Tag?

> Branches are symbolic names for line of development. 
- New commits are created on top of branch. 
- The branch pointer naturally advances, pointing to newer and newer commits.

> tags are symbolic names for a given revision. 
- They always point to the same object (usually: to the same revision); 
- they do not change.

> A tag represents a version of a particular branch at a moment in time. 
- A branch represents a separate thread of development that may run concurrently with other development efforts on the same code base.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is ‘staging area’ or ‘index’ in Git?

> Staging area is the intermediate layer/area that holds the files which will be part of the next commit. 
 Working_dir -git add-> Staging_Area -git commit-> Local_Repo -git push-> remote_repo


> Git keeps track of the files which were added to the staging area. 

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is difference between local and Remote repositories?

> Git local repository is the one on which we will make local changes, typically this local repository is on our computer.

> Git remote repository is the one of the server acts as central repository from where all the developer works(commit/push/pull/clone) for the collaboration
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## How to remove files added to staging area?

$ git reset [option] [commit_id] 
- it is used to alter the staged snapshot and/or the working directory

--soft 
> Does not touch the index file or the working tree at all (but resets the head to <commit>, just like all modes do). 
- This leaves all your changed files "Changes to be committed", as git status would put it.

--mixed 
> Resets the index but not the working tree (i.e., the changed files are preserved but not marked for commit) and reports what has not been updated. 
This is the default action.

--hard 
> Resets the index and working tree. Any changes to tracked files in the working tree since <commit> are discarded.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## How to remove the files committed to the local repository?

$ git rm <filename> 
- This command removes the file from the repo but also deletes it from the local file system

$ git rm –cached <file name> 
- This command removes the file only from the Git repository and not remove it from the filesystem
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## How to check the local modified files in Git?

$ git status 
- Displays paths that have differences between the index file and the current

HEAD commit, paths that have differences between the working tree and the index file, and paths in the
working tree that are not tracked by Git
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## How to check the history of the files?

gitk and git log commands

$ gitk 
- Displays changes in a repository or a selected set of commits. 
- This includes visualizing the commit graph, showing information related to each commit, and the files in the trees of each revision.

$ git log 
- It provides a list of all the commits made on our branch with the most recent commit first
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is difference between Revert/Reset/Checkout?

$ git revert 
- A revert is an operation that takes a specified commit and creates a new commit which inverses the specified commit. 
- it can only be run at a commit level scope and has no file level functionality.

$ git reset 
– it is a simple way to undo changes that haven’t been shared with anyone else.

$ git checkout 
- it is used to update the state of the repository to a specific point in the projects history

COMMAND SCOPE COMMON USE CASES
git reset Commit-level Discard commits in a private branch or throw away uncommited changes
git reset File-level Unstage a file
git checkout Commit-level Switch between branches or inspect old snapshots
git checkout File-level Discard changes in the working directory
git revert Commit-level Undo commits in a public branch
git revert File-level (N/A)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is difference between merging vs. Rebasing?

> git merge and rebase commands are designed to integrate changes from one branch into another branch

> git merge is easy because it’s a non-destructive operation. 
- The existing branches are not changed in anyway

> git rebase - The major benefit of rebasing is that you get a much cleaner project history. 
- 1st, it eliminates the unnecessary merge commits required by git merge and second one is perfectly linear project history
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## How do you find a list of files that has changed in a particular commit?

$$ git diff-tree -r {hash}
$$ git diff-tree –no-commit-id –name-only -r {hash}

-r : makes the command list individual files, rather than collapsing them into root directory names only.

–no-commit-id will suppress the commit hashes from appearing in the output

–name-only will only print the file names, instead of their paths.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is git hook?

> Git has a way to fire off custom scripts when certain important actions occur. 
here are two groups of these hooks:

1. CLIENT-SIDE 
- Client-side hooks are triggered by operations such as committing and merging

2. server-side 
- server-side hooks run on network operations such as receiving pushed commits. 
- You can use these hooks for all sorts of reasons.

- All these scripts are stored under the git install sub directory @. git/hooks.
- We can write scripts using python/Ruby/shell
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##  What is the function of ‘git config’?

> "git config" command can be used to change your Git configuration, including your username.

$$ git config –global user.name “Your Name”
- This command will add a username.

$$ git config –global user.email “Your E-mail Address”
- This command will add an email id. 