> constant interface pattern describes the use of an interface solely to define constants, and having classes implement that interface in order to achieve convenient syntactic access to those constants

EXAMPLE 1: 
public interface Constants {
	public static final int	CONSTANT = 1;
}

public class Class1 implements Constants {
	public static final int CONSTANT = 2;	// *

	public static void main(String args[]) throws Exception {
		System.out.println(CONSTANT);
	}
}

> Before the line marked with an asterisk is added, running Class1 prints 1. 
- After adding the line, Class1 prints 2. Both versions compile without warnings or errors.
--------------------------------
Alternatives[edit]
Many of the pitfalls of the anti-pattern can be avoided by converting the constants interface to a proper class with no instances:

public final class Constants {
	private Constants() {
		// restrict instantiation
	}
	public static final double PI = 3.14159;
	public static final double PLANCK_CONSTANT = 6.62606896e-34;
}

import static Constants.PLANCK_CONSTANT;
import static Constants.PI;

public class Calculations {

	public double getReducedPlanckConstant() {
		return PLANCK_CONSTANT / (2 * PI);
	}
}