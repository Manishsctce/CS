=======================================
######## ABSTRACT FACTORY DP ##########
> it provides a way to encapsulate a GROUP OF INDIVIDUAL FACTORIES CLASSES that have a common theme without specifying their concrete classes

> it ADDS ANOTHER LAYER OF ABSTRACTION OVER FACTORY PATTERN 

> it is also called “FACTORY OF FACTORIES” pattern
- AF_DP creates Factory and Factory DP creates Products

> It may use Factory DP for creating objects and IT CAN ALSO USE BUILDER DP OR PROTOTYPE DP TO BUILD OBJECT

#### ADVANTAGE ####
> Any change e.g. a new product from Factory requires almost no change in existing clients.


> In this multiple Factory get segregated in an AbstractFactory class with having methods that returns the require Factory class.
- Example - AbstractFactory contain getShape():Shape and getColor():Color

> Here each Factory class extends this AbstractFactory class
- Example - ShapeFactory and ColorFactory extends AbstractFactory 

> Now FactoryProducer having getFactory() that returns the require Factory class as AbstractFactory 
- Example - getFactory(String choice) : ShapeFactory/ColorFactory
=======================================
## USES ##
> It is used when system has to create multiple families of products or we want to provide a library of products without exposing the implementation details.
=======================================
############ JAVA EXAMPLES ############

javax.xml.parsers.DocumentBuilderFactory#newInstance()

DocumentBuilderFactory abstractFactory = DocumentBuilderFactory.newInstance();
DocumentBuilder factory = abstractFactory.newDocumentBuilder();
Document doc = factory.parse(stocks)
------------------------------------
javax.xml.transform.TransformerFactory#newInstance()

javax.xml.xpath.XPathFactory#newInstance()
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is the difference between factory and abstract factory design pattern?

> factory pattern creates an object through inheritance and produces only one Product. 
- abstract factory pattern creates the object through composition and produce families of products.
=======================================
############ EXAMPLE : 1 ##############

FactoryProducer 
	|
	~	
AbstractFactory[ac] |<------- ShapeFactory[c] ----> SHAPE[i]|<----Rectangle[c]
					|										|<----Square[c]
					|										|<----Circle[c
					|
					|<------- ColorFactory[c]-----> Color[i]|<----Red[c]
															|<----Green[c]
															|<----Blue[c]
					
=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
public interface Shape {
   void draw();
}

public class Rectangle implements Shape {
   public void draw() {     System.out.println("Inside Rectangle::draw() method.");}
}

public class Square implements Shape {
   public void draw() {      System.out.println("Inside Square::draw() method."); }
}

public class Circle implements Shape {
   public void draw() {      System.out.println("Inside Circle::draw() method."); }
}
---------------------------------------
public interface Color {
   void fill();
}

public class Red implements Color {
   public void fill() {      System.out.println("Inside Red::fill() method.");   }
}

public class Green implements Color {
   public void fill() {     System.out.println("Inside Green::fill() method.");}
}

public class Blue implements Color {
   public void fill() {      System.out.println("Inside Blue::fill() method.");}
}
---------------------------------------
public abstract class AbstractFactory {
   abstract Color getColor(String color);
   abstract Shape getShape(String shape) ;
}
---------------------------------------
public class ShapeFactory extends AbstractFactory {
   
   public Shape getShape(String shapeType){
      if(shapeType == null){
         return null;
      }		      
      if(shapeType.equalsIgnoreCase("CIRCLE")){
         return new Circle();
         
      }else if(shapeType.equalsIgnoreCase("RECTANGLE")){
         return new Rectangle();
         
      }else if(shapeType.equalsIgnoreCase("SQUARE")){
         return new Square();
      }
      
      return null;
   }
   
   Color getColor(String color) {
      return null;
   }
}
---------------------------------------
public class ColorFactory extends AbstractFactory {
	
   public Shape getShape(String shapeType){
      return null;
   }
   
   Color getColor(String color) {
      if(color == null){
         return null;
      }		      
      if(color.equalsIgnoreCase("RED")){
         return new Red();
         
      }else if(color.equalsIgnoreCase("GREEN")){
         return new Green();
         
      }else if(color.equalsIgnoreCase("BLUE")){
         return new Blue();
      }
      
      return null;
   }
}
---------------------------------------
public class FactoryProducer {
   public static AbstractFactory getFactory(String choice){
   
      if(choice.equalsIgnoreCase("SHAPE")){
         return new ShapeFactory();
         
      }else if(choice.equalsIgnoreCase("COLOR")){
         return new ColorFactory();
      }
      
      return null;
   }
}
---------------------------------------
public class AbstractFactoryPatternDemo {
   public static void main(String[] args) {

      //get shape factory
      AbstractFactory shapeFactory = FactoryProducer.getFactory("SHAPE");

      //get an object of Shape Circle
      Shape shape1 = shapeFactory.getShape("CIRCLE");

      //call draw method of Shape Circle
      shape1.draw();

      //get an object of Shape Rectangle
      Shape shape2 = shapeFactory.getShape("RECTANGLE");

      //call draw method of Shape Rectangle
      shape2.draw();
      
      //get an object of Shape Square 
      Shape shape3 = shapeFactory.getShape("SQUARE");

      //call draw method of Shape Square
      shape3.draw();

      //get color factory
      AbstractFactory colorFactory = FactoryProducer.getFactory("COLOR");

      //get an object of Color Red
      Color color1 = colorFactory.getColor("RED");

      //call fill method of Red
      color1.fill();

      //get an object of Color Green
      Color color2 = colorFactory.getColor("Green");

      //call fill method of Green
      color2.fill();

      //get an object of Color Blue
      Color color3 = colorFactory.getColor("BLUE");

      //call fill method of Color Blue
      color3.fill();
   }
}
#######################################