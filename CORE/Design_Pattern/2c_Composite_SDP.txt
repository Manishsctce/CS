###########  COMPOSITE DP #############
GoF Definition:
> Compose objects into tree structure to represent part-whole hierarchies.
> Composite lets client treat individual objects and compositions of objects uniformly

=======================================
########## IMPORTANT POINTS ###########

> It should be APPLIED ONLY WHEN THE GROUP OF OBJECTS SHOULD BEHAVE AS THE SINGLE OBJECT

> Composite DP treats each node in two ways - Composite or leaf.
1. COMPOSITE means it can have other objects below it.
2. LEAF means it has no objects below it.
=======================================
########## JAVA EXAMPLES ##############

java.util.Map#putAll(Map)
java.util.List#addAll(Collection)
java.util.Set#addAll(Collection)
java.nio.ByteBuffer#put(ByteBuffer) (also on CharBuffer, ShortBuffer, IntBuffer, LongBuffer, FloatBuffer and DoubleBuffer)
java.awt.Container#add(Component)
----------------------------------------
###### USAGE #######
> you want client to be able to ignore difference between compositions of objects and individual objects. Clients will treat all objects in the composite structure uniformly.
=======================================
############### ELEMENTS ##############

## BASE COMPONENT [interface] 
> It is the INTERFACE FOR ALL OBJECTS IN THE COMPOSITION, 
- client program uses base component to work with the objects in the composition. 
- It CAN BE AN INTERFACE OR AN ABSTRACT CLASS WITH SOME COMMON METHODS TO ALL THE OBJECTS.

## LEAF
- implements the default behavior of the base component. 
- It doesn't contain a reference to the other objects.

## COMPOSITE
> It consists of leaf elements and implements the operations in base component
- composite also implements component and behaves similar to leaf except that it can contain group of leaf elements

## CLIENT
> manipulates objects in the composition through the component interface.
=======================================
############ WORKFLOW #################
> Client use the component interface to interact with objects in the composition structure.
- if recipient is a leaf then request is handled directly.
- If recipient is a composite,then it usually forwards request to its child components,possibly performing additional operations before and after forwarding.

=======================================
############ EXAMPLE : 1 ##############

Shape[i] <-- Triangle[c], Circle[c]
Shape[i] <-- Drawing[c]:List<Shape>, basic operations on shape.

// BASE COMPONENT
public interface Shape {	
  public void draw(String fillColor);
}
---------------------------------------
// LEAF
public class Triangle implements Shape {
  @Override
  public void draw(String fillColor) {
  	System.out.println("Drawing Triangle with color "+fillColor);
  }
}
---------------------------------------
// LEAF
public class Circle implements Shape {
  @Override
  public void draw(String fillColor) {
  	System.out.println("Drawing Circle with color "+fillColor);
  }
}
---------------------------------------
// COMPOSITE OBJECT
public class Drawing implements Shape{
  //collection of Shapes
  private List<Shape> shapes = new ArrayList<Shape>();
  
  @Override
  public void draw(String fillColor) {
    for(Shape sh : shapes){
      sh.draw(fillColor);
    }
  }
  
  //adding shape to drawing
  public void add(Shape s){
    this.shapes.add(s);
  }
  
  //removing shape from drawing
  public void remove(Shape s){
    shapes.remove(s);
  }
  
  //removing all the shapes
  public void clear(){
    System.out.println("Clearing all the shapes from drawing");
    this.shapes.clear();
  }
}
---------------------------------------
public class TestCompositePattern {

	public static void main(String[] args) {
		Shape tri = new Triangle();
		Shape tri1 = new Triangle();
		Shape cir = new Circle();
		
		Drawing drawing = new Drawing();
		drawing.add(tri1);
		drawing.add(tri1);
		drawing.add(cir);
		
		drawing.draw("Red");
		
		drawing.clear();
		
		drawing.add(tri);
		drawing.add(cir);
		drawing.draw("Green");
	}
}
=======================================
############ EXAMPLE : 2 ##############