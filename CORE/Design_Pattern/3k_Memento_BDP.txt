########  DESIGN PATTERN #########
> it is known as a behavioural pattern
> it's used to manage algorithms, relationships and responsibilities between objects.
> it is used to restore state of an object to a previous state

Memento pattern uses three actor classes. 

1. Memento contains state of an object to be restored. 
2. Originator creates and stores states in Memento objects
3. Caretaker object is responsible to restore object state from Memento.

GoF Definition:
Captures and externalizes an object's internal state so that it can be restored later, all without violating encapsulation.
----------------------------------------
#### Design Pattern Important Points ##

----------------------------------------
###### USAGE #######

=======================================
############ JAVA EXAMPLES ############

java.util.Date (the setter methods do that, Date is internally represented by a long value)
All implementations of java.io.Serializable
All implementations of javax.faces.component.StateHolder
=======================================
############ EXAMPLE : 1 ##############

public class Memento {
   private String state;

   public Memento(String state){
      this.state = state;
   }

   public String getState(){
      return state;
   }	
}
---------------------------------------
public class Originator {
   private String state;

   public void setState(String state){
      this.state = state;
   }

   public String getState(){
      return state;
   }

   public Memento saveStateToMemento(){
      return new Memento(state);
   }

   public void getStateFromMemento(Memento memento){
      state = memento.getState();
   }
}
---------------------------------------
public class CareTaker {
   private List<Memento> mementoList = new ArrayList<Memento>();

   public void add(Memento state){
      mementoList.add(state);
   }

   public Memento get(int index){
      return mementoList.get(index);
   }
}
---------------------------------------
public class MementoPatternDemo {
   public static void main(String[] args) {
   
      Originator originator = new Originator();
      CareTaker careTaker = new CareTaker();
      
      originator.setState("State #1");
      originator.setState("State #2");
      careTaker.add(originator.saveStateToMemento());
      
      originator.setState("State #3");
      careTaker.add(originator.saveStateToMemento());
      
      originator.setState("State #4");
      System.out.println("Current State: " + originator.getState());		
      
      originator.getStateFromMemento(careTaker.get(0));
      System.out.println("First saved State: " + originator.getState());
      originator.getStateFromMemento(careTaker.get(1));
      System.out.println("Second saved State: " + originator.getState());
   }
}
=======================================