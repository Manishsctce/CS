## What is SINGLE LINKED LIST or Linked List?> It is a list type of data structure. It consist of number of nodes in which each node has a next pointer to the following element.> Link of last node in the list is NULL which indicate end of the list.Basic operation on a list1. Traversing the list2. Inserting an item in the list3. Deleting an item from the list1. Traversing the list - > traverse in single direction2. Insertion into single linked list has three cases:-   a> At Beginning (Before the head)   b> At the end of list   c> Inserting at the middle of list (random location)   3. Deletion from  single linked list has three cases:-   a> At Beginning (Before the head)   b> At the end of list   c> deletion from middle of list (random location)------------------------------## What is DOUBLE LINKED LIST ?Basic operation on a double linked list :-1. Insertion and 2. Deletion1 Insertion have below cases:-   a> At Beginning (Before the head)   b> At the end of list   c> Inserting at the middle of list (random location)   2. Deletion have below cases:-   	> Delete the first node	> Delete the last node	> Delete the intermediate node> Each Node is linked doubly in it like left node have link to right node and right node linked to left node ------------------------------## What is CIRCULAR LINKED LIST ?> What is difference between Singly Linked List and Doubly Linked List data structure?How to find middle element of a singly linked list in one pass?How to check if linked list contains loop in Java? How to find the starting node of the loop =======================================## How to Find a middle element in a link list without traversing the entire list? and also the length of list is not given?> use two pointers "fast" and "slow". - At every step the fast pointer will increment by two and - slower will increment by one. - When the list will end the slow pointer will be at the middle.~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~## How to find if there is any loop in the linked list?Floyd’s Cycle-Finding Algorithm> This is the fastest method. Traverse linked list using two pointers.  - Move one pointer by one and other pointer by two.  - If these pointers meet at some node then there is a loop.  - If pointers do not meet then linked list doesn’t have loop.~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~## Merge Two Sorted Linked Lists> defining a fake head. - Then compare the first elements from each list. Add the smaller one to the merged list. - Finally, when one of them is empty, simply append it to the merged list, since it is already sorted.https://www.programcreek.com/2012/12/leetcode-merge-two-sorted-lists-java/~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~## Remove duplicates from an unsorted linked list> Use two loops. - Outer loop is used to pick the elements one by one and - inner loop compares the picked element with rest of the elements.void remove_duplicates() {  Node ptr1 = null, ptr2 = null, dup = null;  ptr1 = head;    /* Pick elements one by one */  while (ptr1 != null && ptr1.next != null){    ptr2 = ptr1;    while (ptr2.next != null) {          /* If duplicate then delete it */       if (ptr1.data == ptr2.next.data) {              /* sequence of steps is important here */           dup = ptr2.next;           ptr2.next = ptr2.next.next;           System.gc();       } else /* This is tricky */ {           ptr2 = ptr2.next;       }    }   ptr1 = ptr1.next;  }}