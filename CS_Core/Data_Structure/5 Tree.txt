## What is Binary Search Tree (BST)?
> It is a tree that having two child only.
> Main use of BST is for searching
> search operation complexity is O(log n) 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is a Tree?
> It is a data structure similar to linked list but instead of each node pointing to another node in linear fashion
> Here each node points to a number of nodes i.e in non linear fashion.
> A tree structure is a way of representing the hierarchical nature of a structure in a graphical form

It has following property :-
> ROOT of a tree having no parents and there can be at most 1 root in a tree
> EDGE refer to the link from parent to child (i.e connection between one node to another.)
> LEAF Node having no children
> Children of same parents are siblings
> ANCESTOR - if there is link from root to child then any parent/grandparent of the child are called Ancestor
(A node p is an ancestor of node q if there exists a path from root to q and p appears on the path.
> SIZE OF NODE is the number of descendants it has include itself
> LEVEL - level of a node is defined by 1 + the number of connections between the node and the root. Root is at level 1 always.
> DEPTH - is the length from root to node. It is equivalent to Level.
> HEIGHT - it is the number of edges on the longest downward path between that node and a leaf.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What do you mean by HEIGHT OF NODE?
> it is the number of edges on the longest downward path between that node and a leaf.
- it is length of path from node to deepest node

> For a tree with just one node i.e the root node, the height is defined to be 1, 
 - if there are 2 levels of nodes the height is 1 and so on. 

> A null tree (no nodes except the null node) is defined to have a height of –1. 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## what is the max number of nodes a tree can have if the height of the tree is h?
> 2^h-1 When h=1
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## Difference between Depth & Height?
> depth of a node is the number of edges from the root to the node.
> height of a node is the number of edges from the node to the deepest leaf.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

## What is SKEW Tree?
> if every node of tree is hving 1 child except leaf node then it is SKEW tree
> Left SKEW - hving only left child
> Right Skew - only right child

########### Binary TREE #############
A(root); 
A->B A->C
B->D, B->E  C->F, C->G ; A->B->D, A->B->E
D->H, D->I, E->J E->K ; A->B->D->H, A->B->D->I

Ex - Height of B is 2 (A->B->D->I)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What are the type of Binary Tree?
1 STRICT BT - each node has exactly 2 child or no child

2 FULL BT
 - each node has exactly 2 child and ALL LEAF NODES ARE AT SAME LEVEL
 - Property - The number of leaf node in a full BT is 2^h

3 COMPLETE BT - It is a tree that is completely filled, with the possible exception of the bottom level.
 PROPERTIES OF COMPLETE BT:-
> A complete BT of height h has bet 2h to 2h+1 –1 nodes.
> The height of such a tree is log2N where N is the number of nodes in the tree.
> Because the tree is so regular, it can be stored in an array. No pointers are necessary.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What do you mean by TRAVERSAL OF TREE and how many type traversal?
> it is a process that visits all the nodes in the tree. 
- Since a tree is a nonlinear DS, there is no unique traversal. 
- group traversal in two kinds as
  1 DEPTH-FIRST traversal
  2 BREADTH-FIRST traversal
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
There are three different types of DEPTH-FIRST traversals :
1. PreOrder traversal - visit the parent first and then left and right children;
2. InOrder traversal - visit the left child, then the parent and the right child;
3. PostOrder traversal - visit left child, then the right child and then the parent;

There is only one kind of breadth-first traversal--
LEVEL ORDER traversal. 
> This traversal visits nodes by levels from top to bottom and from left to right.

##Level order Traversal
> visit the root 
> while traversing level 1, keep all the elements at level l+1 in queue
> go to the next level and visit all the nodes at the level
> repeat this steps

##Find the size  of the binary tree?
> use level order traversal and increase count by 1 for every element
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~---
##Find the reverse level order traversal
> use Queue for level order traversal 
> after finding childs of each node and then insert the node in stack
> print the content of stack give reverse order
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~---
##Find the height of the binary tree? #11
> use level order traversal 
> while traversing each level insert null as marker and use if loop for this inserted null node increase level by 1
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~---
##Find the height of a node in binary tree?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~---
##Find the deepest node of BT #12
> use level order travesal
> after inserting all node i.e while loop return temp
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~---
##Delete an element from a binary tree #13
> starting at root, find the node which we want to delete
> Find the deepest node
> Replace the deepest nodes with node to be deleted
> the return deepest node
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~---
##Find the number of nodes in leaf #14
> use level order traversal
> before inserting childs of a node checks its both child is null  then increase counter.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~---
##Find the number of full nodes in binary tree #15
> use level order traversal
> before insert childs of a node check it's both child is not null then increase counter.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~---
##Find the number of half nodes in binary tree #16
> use level order traversal
> before insert childs of a node in que check for 1 child either left or right then increase counter.
=====================================
#### LEFT & RIGHT ROTATION IN TREE ##
> In Left Rotation of a node, Node become parent and its left child become right child of its parent 
Ex - Left Rotation of "B" node, B become parent and its left child "e" become right child of "X" 

> In Right Rotation of a node, 
	X                               B			
  a   B     ---Left Rotation-->   X   f
c  d e  f  <--Right Rotation--- a  e
                              c  d
=====================================
########### RED-BLACK TREE ##########
RED-BLACK TREE PROPERTIES :
1. Color of every node in the tree is either red or black.
2. Root node must be Black in color.
3. Red node can not have a red color neighbor node (but black can have)
4. ALL PATHS FROM ROOT node to the null should consist the SAME NUMBER OF BLACK NODES 

In Red-Black tree, we use two tools to do balancing.
1) Recoloring
2) Rotation

> try recoloring first, if recoloring doesn’t work, then we go for rotation.

https://www.cs.usfca.edu/~galles/visualization/RedBlack.html

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

##How do you find depth of binary tree?
##Write code to print InOrder traversal of a tree?
##Print out all leaf node of a binary tree?
##Write a method in Java to check if a tree is a binary search tree or not?
##How to check if a tree is balanced or not in Java?
##How do u get mirror of Binary tree?
Describe AVL tree or height balanced binary search tree.
Describe Tree Rotation in AVL tree
What’s the difference between DFS and BFS?
What are the differences between a hash table and a binary search tree? Suppose that you are trying to figure out which of those data structures to use when designing the address book for a cell phone that has limited memory. Which data structure would you use?