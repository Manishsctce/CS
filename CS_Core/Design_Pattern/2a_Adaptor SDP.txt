##### ADAPTOR(translator) PATTERN #####

> WORKS AS A BRIDGE BETWEEN TWO INCOMPATIBLE INTERFACE
> involves a single class which is responsible to join functionalities of independent or incompatible interfaces.

Ex - card reader is adaptor for laptop (adaptee) to read memory card(target)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## How to implement adapter design pattern?

> Adapter design pattern can be implemented in 2 ways: 
1. using the inheritance method 
2. using the composition method

=======================================
########## JAVA EXAMPLES ##############

java.util.Arrays#asList()
java.util.Collections#list()
java.util.Collections#enumeration()
java.io.InputStreamReader(InputStream) (returns a Reader)
java.io.OutputStreamWriter(OutputStream) (returns a Writer)
javax.xml.bind.annotation.adapters.XmlAdapter#marshal() and #unmarshal()
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The visitor pattern is used when:
> When you have a class(Target) that invokes methods defined in an interface and
- you have a another class(Adapter) that doesn't implement the interface but 
- implements the operations that should be invoked from the first class through the interface. 
- You can change none of the existing code. 
- The adapter will implement the interface and will be the bridge between the 2 classes.

When you write a class (Target) for a generic use relying on some general interfaces and you have some implemented classes, not implementing the interface, that needs to be invoked by the Target class.

=======================================
############ EXAMPLE : 1 ##############

> We have a MediaPlayer[i] and a concrete class AudioPlayer
- We are having another interface AdvancedMediaPlayer and its concrete classes 
- We want to make AudioPlayer to play other formats as well


public interface AdvancedMediaPlayer {	
   public void playVlc(String fileName);
   public void playMp4(String fileName);
}
---------------------------------------
public class VlcPlayer implements AdvancedMediaPlayer{
   public void playVlc(String fileName) {
      System.out.println("Playing vlc file. Name: "+ fileName);		
   }

   public void playMp4(String fileName) { }
}
---------------------------------------
public class Mp4Player implements AdvancedMediaPlayer{
   public void playVlc(String fileName) {      //do nothing
   }
   public void playMp4(String fileName) {
      System.out.println("Playing mp4 file. Name: "+ fileName);		
   }
}
---------------------------------------
public interface MediaPlayer {
   public void play(String audioType, String fileName);
}
---------------------------------------
>> Create adapter class implementing the MediaPlayer interface.

public class MediaAdapter implements MediaPlayer {
   AdvancedMediaPlayer advancedMusicPlayer;
   
   public MediaAdapter(String audioType){
      if(audioType.equalsIgnoreCase("vlc") ){
         advancedMusicPlayer = new VlcPlayer();			
         
      }else if (audioType.equalsIgnoreCase("mp4")){
         advancedMusicPlayer = new Mp4Player();
      }	
   }
   
   public void play(String audioType, String fileName) {
      if(audioType.equalsIgnoreCase("vlc")){
         advancedMusicPlayer.playVlc(fileName);
      }
      else if(audioType.equalsIgnoreCase("mp4")){
         advancedMusicPlayer.playMp4(fileName);
      }
   }
}
---------------------------------------
>> Create concrete class implementing the MediaPlayer interface.

public class AudioPlayer implements MediaPlayer {
  MediaAdapter mediaAdapter; 

  public void play(String audioType, String fileName) {		

    //inbuilt support to play mp3 music files
    if(audioType.equalsIgnoreCase("mp3")){
       System.out.println("Playing mp3 file. Name: " + fileName);			
    }       
    //mediaAdapter is providing support to play other file formats
    else if(audioType.equalsIgnoreCase("vlc") || audioType.equalsIgnoreCase("mp4")){
       mediaAdapter = new MediaAdapter(audioType);
       mediaAdapter.play(audioType, fileName);
    }
    else{
       System.out.println("Invalid media. " + audioType + " format not supported");
    }
  }   
}
---------------------------------------
>>Use the AudioPlayer to play different types of audio formats.

public class AdapterPatternDemo {
   public static void main(String[] args) {
      AudioPlayer audioPlayer = new AudioPlayer();

      audioPlayer.play("mp3", "beyond the horizon.mp3");
      audioPlayer.play("mp4", "alone.mp4");
      audioPlayer.play("vlc", "far far away.vlc");
      audioPlayer.play("avi", "mind me.avi");
   }
}

>>Verify the output.
=======================================
############ EXAMPLE : 2 ##############

public class Volt {
	private int volts;
	public Volt(int v){
		this.volts=v;
	}

	public int getVolts() {
		return volts;
	}
	public void setVolts(int volts) {
		this.volts = volts;
	}	
}
---------------------------------------
public class Socket {
  public Volt getVolt(){
  	return new Volt(120);
  }
}
---------------------------------------
public interface SocketAdapter {
	public Volt get120Volt();
		
	public Volt get12Volt();
	
	public Volt get3Volt();
}
---------------------------------------
//Using inheritance for adapter pattern
public class SocketClassAdapterImpl extends Socket implements SocketAdapter{

	@Override
	public Volt get120Volt() {
		return getVolt();
	}

	@Override
	public Volt get12Volt() {
		Volt v= getVolt();
		return convertVolt(v,10);
	}

	@Override
	public Volt get3Volt() {
		Volt v= getVolt();
		return convertVolt(v,40);
	}
	
	private Volt convertVolt(Volt v, int i) {
		return new Volt(v.getVolts()/i);
	}

}
---------------------------------------
public class SocketObjectAdapterImpl implements SocketAdapter{
	//Using Composition for adapter pattern
	private Socket sock = new Socket();
	
	@Override
	public Volt get120Volt() {
		return sock.getVolt();
	}

	@Override
	public Volt get12Volt() {
		Volt v= sock.getVolt();
		return convertVolt(v,10);
	}

	@Override
	public Volt get3Volt() {
		Volt v= sock.getVolt();
		return convertVolt(v,40);
	}
	
	private Volt convertVolt(Volt v, int i) {
		return new Volt(v.getVolts()/i);
	}
}
---------------------------------------
public class AdapterPatternTest {

	public static void main(String[] args) {		
		testClassAdapter();
		testObjectAdapter();
	}

	private static void testObjectAdapter() {
		SocketAdapter sockAdapter = new SocketObjectAdapterImpl();
		Volt v3 = getVolt(sockAdapter,3);
		Volt v12 = getVolt(sockAdapter,12);
		Volt v120 = getVolt(sockAdapter,120);
		System.out.println("v3 volts using Object Adapter="+v3.getVolts());
		System.out.println("v12 volts using Object Adapter="+v12.getVolts());
		System.out.println("v120 volts using Object Adapter="+v120.getVolts());
	}

	private static void testClassAdapter() {
		SocketAdapter sockAdapter = new SocketClassAdapterImpl();
		Volt v3 = getVolt(sockAdapter,3);
		Volt v12 = getVolt(sockAdapter,12);
		Volt v120 = getVolt(sockAdapter,120);
		System.out.println("v3 volts using Class Adapter="+v3.getVolts());
		System.out.println("v12 volts using Class Adapter="+v12.getVolts());
		System.out.println("v120 volts using Class Adapter="+v120.getVolts());
	}
	
	private static Volt getVolt(SocketAdapter sockAdapter, int i) {
		switch (i){
		case 3: return sockAdapter.get3Volt();
		case 12: return sockAdapter.get12Volt();
		case 120: return sockAdapter.get120Volt();
		default: return sockAdapter.get120Volt();
		}
	}
}
---------------------------------------
	