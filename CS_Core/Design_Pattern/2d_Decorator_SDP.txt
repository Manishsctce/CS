#### DECORATOR PATTERN #####
## What is decorator dp?
> It is Structural Pattern
> it says that just "ATTACH A FLEXIBLE ADDITIONAL RESPONSIBILITIES TO AN OBJECT DYNAMICALLY".

> it is used to enhance the functionality of a particular object at run-time or dynamically.
- without altering its structure
- At the same time other instance of same class will not be affected by this so individual object gets the new behavior.

> it CREATES DECORATOR CLASS which wraps original class and provides additional functionality .

> it USES COMPOSITION INSTEAD OF INHERITANCE to extend the functionality of an object at runtime.
- Decorator contains a HAS a Relationship

> it also known as Wrapper.

-----------------------------------------
## What is the Advantage of Decorator Pattern?

> It provides greater flexibility than static inheritance.
- because inheritance add responsibilities at compile time and it will add at run-time.

> It enhances the extensibility of the object, because changes are made by coding new classes.
> It simplifies the coding by allowing you to develop a series of functionality from targeted classes instead of coding all of the behavior into the object.

## DISADVANTAGE ##
> code maintenance can be a problem as it provides a lot of similar kind of small objects (each decorator)
=======================================
############ JAVA EXAMPLES ############

BASE CLASS
java.io.Reader; 
java.io.InputStream;

DECORATORS:
java.io.BufferedReader(java.io.Reader);
java.io.FileReader(java.io.Reader);

java.io.DataInputStream(java.io.InputStream) 
java.io.BufferedInputStream(java.io.InputStream)   

> Constructor of BufferedReader takes parameter as Reader class and add more few more features like readLine() method, which is specific to BufferedReader class only.

All subclasses of java.io.InputStream, OutputStream, Reader and Writer have a constructor taking an instance of same type.
java.util.Collections, the checkedXXX(), synchronizedXXX() and unmodifiableXXX() methods.
javax.servlet.http.HttpServletRequestWrapper and HttpServletResponseWrapper
javax.swing.JScrollPane
=======================================
#### What are the Usage of Decorator Pattern ####

> When you want to transparently and dynamically add responsibilities to objects without affecting other objects.
> When you want to add responsibilities to an object that you may want to change in future.
> Extending functionality by sub-classing is no longer practical.
=======================================
############ EXAMPLE : 1 ##############

// Component on Decorator design pattern
public abstract class Currency {
	String description = "Unknown currency";

	public String getCurrencyDescription() {
		return description;
	}
	public abstract double cost(double value);

}
---------------------------------------
// Concrete Component
public class Rupee extends Currency {
	double value;
	public Rupee() {
		description = "indian rupees";
	}
	public double cost(double v){
		value=v;
		return value;
	}
}
---------------------------------------
//Another Concrete Component
public class Dollar extends Currency{
	double value;

	public Dollar () {
		description = "Dollar‚Äù;
	}
	public double cost(double v){
		value=v;
		return value;
	}
}
---------------------------------------
// Decorator
public abstract class Decorator extends Currency{
 public abstract String getDescription();
}
---------------------------------------
// Concrete Decorator
public class USDDecorator extends Decorator{
	Currency currency;
	
	public USDDecorator(Currency currency){
		this.currency = currency;
	}
	public String getDescription(){
		return currency.getDescription()+" ,its US Dollar";
	}
}
---------------------------------------
public class SGDDecorator extends Decorator{
	Currency currency;
	
	public SGDDecorator(Currency currency){
		this.currency = currency;
	}
	public String getDescription(){
		return currency.getDescription()+" ,its singapore Dollar";
	}
}
---------------------------------------
Now its time to check currency.
public class CurrencyCheck {
 public static void main(String[] args) {
 
	// without adding decorators
	Currency curr = new Dollar();
	System.out.println(curr.getDescription() +" dollar. "+curr.cost(2.0));

	//adding decorators
	Currency curr2 = new USDDecorator(new Dollar());
	System.out.println(curr2.getDescription() +" dollar. "+curr2.cost(4.0));

	Currency curr3 = new SGDDecorator(new Dollar());
	System.out.println(curr3.getDescription() +" dollar. "+curr3.cost(4.0));
}
