##### FACADE PATTERN #####
> It is a structural design pattern
> It is used to provide a unified and simplified interface to a group of interfaces in a subsystem, 
- therefore it hides the complexities of the subsystem from the client

> Subsystem may be dependent with one another. 
- In such case, facade can act as a coordinator and decouple the dependencies between the subsystems.
> Translates the client requests to the subsystems that can fulfill those requests.

> unified interface enables an object to access the subsystem using the interface to communicate with the subsystem. 

> It introduce a facade class which act as an interface for user to call method of the required class.

ADVANTAGE 
> It promotes loose coupling between subsystems and its clients.
- It shields the clients from the complexities of the sub-system components.

DISADVANTAGE
> By introducing the Facade into your code, you will be hardwiring subsystems into the Facade. This is fine if the subsystem never changes
=======================================
########### JAVA EXAMPLES #############

javax.faces.context.FacesContext, 
- it internally uses among others the abstract/interface types  LifeCycle, ViewHandler, NavigationHandler and many more without that the enduser has to worry about it (which are however overrideable by injection).

javax.faces.context.ExternalContext, 
- which internally uses ServletContext, HttpSession, HttpServletRequest, HttpServletResponse, etc.
=======================================
## When do we make usage of Facade Pattern?
It is used:
> When you want to provide simple interface to a complex sub-system.
> When several dependencies exist between clients and the implementation classes of an abstraction.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## Facade Vs Mediator Design Pattern
In the implementation of mediator pattern, subsystem or peers components are aware of the mediator and that interact with it. 
In the case of facade pattern, subsystems are not aware of the existence of facade. Only facade talks to the subsystems.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##What is difference between Facade and Factory design pattern?

> In Facade, required method is called by calling Facade class method.
> Facade class create object of all the require class and call it methods
> It hides the implementation 

> In Factory, require object of class is returned and it get used further.
> Here we are not specifying concrete class name. 
=======================================
Ex
public class TravelFacade{   
	private HotelBooker hotelBooker;   
	private FlightBooker flightBooker;   
	public void getFlightsAndHotels(Date from, Data to)  {         
		ArrayList<Flight> flights = flightBooker.getFlightsFor(from, to);         
		ArrayList<Hotel> hotels = hotelBooker.getHotelsFor(from, to);        
		//process and return   
	}
}


http://javapapers.com/design-patterns/facade-design-pattern/