=======================================
############ FLYWEIGHT DP #############

## What is Flyweight design pattern?
> It is a Structural design pattern
> it is used when we need to create a lot of Objects of a class. 
- it can be applied to reduce the load on memory by sharing objects.


> It USE A HASHMAP THAT STORES REFERENCE TO THE OBJECT which have already been created, every object is associated with a key. 
- Now when a client wants to create an object, he simply has to pass a key associated with it, if object is there then return the same otherwise create a new 1.

 
## FACTOR TO CONSIDER :
> Number of Objects to be created by appl should be huge.

> Object creation is heavy on memory and it can be time consuming too.

> Object properties can be divided into intrinsic and extrinsic properties, 
- extrinsic properties of an Object should be defined by the client program.

INTRINSIC PROPERTIES make the Object unique whereas 

EXTRINSIC PROPERTIES are set by client code and used to perform different operations. 
Example, an Object Circle can have extrinsic properties such as color and width.

GoF Definition:
> Use sharing to support large numbers of fine-grained objects efficiently
---------------------------------------
#### Design Pattern Important Points ##

---------------------------------------
###### USAGE #######

=======================================
########### JAVA EXAMPLES #############

> All the wrapper classes valueOf() method uses cached objects 
>  Java String class String Pool implementation.

java.lang.Integer#valueOf(int) (also on Boolean, Byte, Character, Short, Long and BigDecimal)
=======================================
############ EXAMPLE : 1 ##############

public interface Shape {
   void draw();
}

public class Circle implements Shape {
   private String color;
   private int x;
   private int y;
   private int radius;

   public Circle(String color){
      this.color = color;		
   }

   public void setX(int x) {
      this.x = x;
   }

   public void setY(int y) {
      this.y = y;
   }

   public void setRadius(int radius) {
      this.radius = radius;
   }

   @Override
   public void draw() {
      System.out.println("Circle: Draw() [Color : " + color + ", x : " + x + ", y :" + y + ", radius :" + radius);
   }
}
---------------------------------------
import java.util.HashMap;
public class ShapeFactory {
   private static final HashMap<String, Shape> circleMap = new HashMap();

   public static Shape getCircle(String color) {
      Circle circle = (Circle)circleMap.get(color);

      if(circle == null) {
         circle = new Circle(color);
         circleMap.put(color, circle);
         System.out.println("Creating circle of color : " + color);
      }
      return circle;
   }
}
---------------------------------------
public class FlyweightPatternDemo {
   private static final String colors[] = { "Red", "Green", "Blue", "White", "Black" };
   public static void main(String[] args) {

      for(int i=0; i < 20; ++i) {
         Circle circle = (Circle)ShapeFactory.getCircle(getRandomColor());
         circle.setX(getRandomX());
         circle.setY(getRandomY());
         circle.setRadius(100);
         circle.draw();
      }
   }
   private static String getRandomColor() {
      return colors[(int)(Math.random()*colors.length)];
   }
   private static int getRandomX() {
      return (int)(Math.random()*100 );
   }
   private static int getRandomY() {
      return (int)(Math.random()*100);
   }
}
=======================================