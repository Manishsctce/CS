######## Template method DESIGN PATTERN #########
> it is a behavioral design pattern. 
> it is used to create a method stub and deferring some of the steps of implementation to the subclasses.
> it can provide default implementation that might be common for all or some of the subclasses.

## 4 different types of methods used in the parent class: 
CONCRETE METHODS :
> Standard complete methods that are useful to the subclasses. These methods are usually utiity methods.

ABSTRACT METHODS :
> Methods containing no implementation that must be implemented in subclasses.

HOOK METHODS	 :
> Methods containing a default implementation that may be overidden in some classes. Hook methods are intended to be overridden, concrete methods are not.

TEMPLATE METHODS :
> A method that calls any of the methods listed above in order to describe the algorithm without needing to implement the details.
GoF Definition:

----------------------------------------
#### Design Pattern Important Points ##

----------------------------------------
###### USAGE #######

----------------------------------------
##### JAVA EXAMPLES #######

----------------------------------------
##EXAMPLES: ##

package com.journaldev.design.template;

public abstract class HouseTemplate {

	//template method, final so subclasses can't override
	public final void buildHouse(){
		buildFoundation();
		buildPillars();
		buildWalls();
		buildWindows();
		System.out.println("House is built.");
	}

	//default implementation
	private void buildWindows() {
		System.out.println("Building Glass Windows");
	}

	//methods to be implemented by subclasses
	public abstract void buildWalls();
	public abstract void buildPillars();

	private void buildFoundation() {
		System.out.println("Building foundation with cement,iron rods and sand");
	}
}


package com.journaldev.design.template;

public class WoodenHouse extends HouseTemplate {
	public void buildWalls() {
		System.out.println("Building Wooden Walls");
	}

	public void buildPillars() {
		System.out.println("Building Pillars with Wood coating");
	}
}

package com.journaldev.design.template;
public class GlassHouse extends HouseTemplate {
	public void buildWalls() {
		System.out.println("Building Glass Walls");
	}

	public void buildPillars() {
		System.out.println("Building Pillars with glass coating");
	}
}

package com.journaldev.design.template;
public class HousingClient {
	public static void main(String[] args) {
		
		HouseTemplate houseType = new WoodenHouse();
		
		//using template method
		houseType.buildHouse();
		System.out.println("************");
		
		houseType = new GlassHouse();	
		houseType.buildHouse();
	}
}