######## Mediator DESIGN PATTERN #########
GoF Definition:

INTENT
> Mediator enables decoupling of objects by introducing a layer in between so that the interaction between objects happen via the layer.
> Allows loose coupling by encapsulating the way disparate sets of objects interact and communicate with each other. 
> Allows for the actions of each object set to vary independently of one another.
----------------------------------------
#### Mediator Design Pattern Important Points ##

> Java Message Service (JMS) uses Mediator pattern along with Observer pattern to allow applications to subscribe and publish data to other applications.
We should not use mediator pattern just to achieve lose-coupling because if the number of mediators will grow, then it will become hard to maintain them.

> This mediator object is like a router in networks, which is routes / controls or coordinates communication between systems.
----------------------------------------
###### USAGE #######

=======================================
########## JAVA EXAMPLES ##############
java.util.Timer (all scheduleXXX() methods)
java.util.concurrent.Executor#execute()
java.util.concurrent.ExecutorService (the invokeXXX() and submit() methods)
java.util.concurrent.ScheduledExecutorService (all scheduleXXX() methods)
java.lang.reflect.Method#invoke()

=======================================
############# EXAMPLES: ############

###ChatMediator.java
package com.journaldev.design.mediator;
public interface ChatMediator {
	public void sendMessage(String msg, User user);
	void addUser(User user);
}

### User.java
package com.journaldev.design.mediator;
public abstract class User {
  protected ChatMediator mediator;
  protected String name;
  public User(ChatMediator med, String name){
  	this.mediator=med;
  	this.name=name;
  }
  public abstract void send(String msg);
  public abstract void receive(String msg);
}
> ChatMediator is required for the communication between different users.

### ChatMediatorImpl.java
package com.journaldev.design.mediator;
import java.util.ArrayList;
import java.util.List;
public class ChatMediatorImpl implements ChatMediator {
  private List<User> users;
  public ChatMediatorImpl(){
  	this.users=new ArrayList<>();
  }
  @Override
  public void addUser(User user){
  	this.users.add(user);
  }
  
  @Override
  public void sendMessage(String msg, User user) {
  	for(User u : this.users){
  		//message should not be received by the user sending it
  		if(u != user){
  			u.receive(msg);
  		}
  	}
  }

}

### UserImpl.java
package com.journaldev.design.mediator;
public class UserImpl extends User {

  public UserImpl(ChatMediator med, String name) {
  	super(med, name);
  }
  
  @Override
  public void send(String msg){
  	System.out.println(this.name+": Sending Message="+msg);
  	mediator.sendMessage(msg, this);
  }
  @Override
  public void receive(String msg) {
  	System.out.println(this.name+": Received Message:"+msg);
  }
  
}
> Notice that send() method is using mediator to send the message to the users and it has no idea how it will be handled by the mediator.

### ChatClient.java
package com.journaldev.design.mediator;
public class ChatClient {
  public static void main(String[] args) {
  	ChatMediator mediator = new ChatMediatorImpl();
  	User user1 = new UserImpl(mediator, "Pankaj");
  	User user2 = new UserImpl(mediator, "Lisa");
  	User user3 = new UserImpl(mediator, "Saurabh");
  	User user4 = new UserImpl(mediator, "David");
  	mediator.addUser(user1);
  	mediator.addUser(user2);
  	mediator.addUser(user3);
  	mediator.addUser(user4);
  	
  	user1.send("Hi All");
  }
}

> Output of the mediator pattern example program is:

Pankaj: Sending Message=Hi All
Lisa: Received Message:Hi All
Saurabh: Received Message:Hi All
David: Received Message:Hi All