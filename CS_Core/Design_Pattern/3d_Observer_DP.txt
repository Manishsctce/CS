########## OBSERVER DESIGN PATTERN ####
########  DESIGN PATTERN #########
GoF Definition:

=====================================
#### Design Pattern Important Points ##
> it is USED TO NOTIFY INTERESTED OBSERVERS ON ANY CHANGE TO SUBJECT.
> Object which is being observed is refereed as Subject and classes which observe subject are called Observer


> SUBJECT contains a list of observers to notify of any change in it’s state, 
> it should provide methods using which observers can register and unregister themselves. 
> Subject also contain a method to notify all the observers of any change and either it can send the update while notifying the observer OR 
- it can provide another method to get the update.

public interface Subject {

	//methods to register and unregister observers
	public void register(Observer obj);
	public void unregister(Observer obj);
	
	//method to notify observers of change
	public void notifyObservers();
	
	//method to get updates from subject
	public Object getUpdate(Observer obj);	
}
------------------------------
OBSERVER should have a method to set the object to watch and 
- another method that will be used by Subject to notify them of any updates.

EXAMPLE:
public interface Observer {
	//method to update the observer, used by subject
	public void update();
	
	//attach with subject to observe
	public void setSubject(Subject sub);
}
=====================================
###### USAGE #######

----------------------------------------
##### JAVA EXAMPLES #######
> Java provides inbuilt platform for implementing Observer pattern through java.util.Observable class and java.util.Observer interface. 

> JMS uses Observer dp along with Mediator pattern to allow applications to subscribe and publish data to other applications.

----------------------------------------
##EXAMPLES: ##


> Observer pattern is based upon notification, there are TWO KINDS OF OBJECT SUBJECT AND OBSERVER. 
> Whenever there is change on subject's state observer will receive notification.



#### Public Interface Observer:

> Any class who implements this interface must be notified when subject or observable object change its status.
update (Observable Ob, Object arg): This method is called when subject is changed.


#### Class Observable ####
> It’s a subject to whom observer wants to observe.


## Method ##
addObserver(Observer o):add Observers in the set of observers for this subject or observalbel object.

deleteObserver(Observer o): delete Observers in the set of observers .

hasChanged():check if object has changed.

clearChanged():this method will indicate that subject has no changes or all the observers has been notified when changes is made.

notifyObservers(): notify all the observers if object has changed .

 