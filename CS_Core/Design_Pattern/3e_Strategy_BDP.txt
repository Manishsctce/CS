######## STRATEGY DESIGN PATTERN #########
GoF Definition:
> it enables selecting an algorithm at runtime. 
- It also known as the policy pattern

> strategy pattern USES COMPOSITION INSTEAD OF INHERITANCE

=======================================
########## JAVA EXAMPLES ##############
Collections.sort()
Comparator
=======================================
##EXAMPLES: 1##
IBrakeBehavior[i] <-- BrakeWithABS[c] , Brake[c]
Car[c] {brakeBehavior:IBrakeBehavior} 							

public interface IBrakeBehavior {
  public void brake();
}

public class BrakeWithABS implements IBrakeBehavior {
    public void brake() {
        System.out.println("Brake with ABS applied");
    }
}

public class Brake implements IBrakeBehavior {
    public void brake() {
        System.out.println("Simple Brake applied");
    }
}

/* Client that can use the algorithms above interchangeably */
public abstract class Car {
    protected IBrakeBehavior brakeBehavior;

    public void applyBrake() {
        brakeBehavior.brake();
    }

    public void setBrakeBehavior(final IBrakeBehavior brakeType) {
        this.brakeBehavior = brakeType;
    }
}

/* Client 1 uses one algorithm (Brake) in the constructor */
public class Sedan extends Car {
    public Sedan() {
        this.brakeBehavior = new Brake();
    }
}

/* Client 2 uses another algorithm (BrakeWithABS) in the constructor */
public class SUV extends Car {
    public SUV() {
        this.brakeBehavior = new BrakeWithABS();
    }
}

/* Using the Car example */
public class CarExample {
    public static void main(final String[] arguments) {
        Car sedanCar = new Sedan();
        sedanCar.applyBrake();  // This will invoke class "Brake"

        Car suvCar = new SUV();
        suvCar.applyBrake();    // This will invoke class "BrakeWithABS"

        // set brake behavior dynamically
        suvCar.setBrakeBehavior( new Brake() );
        suvCar.applyBrake();    // This will invoke class "Brake"
    }
}
=====================================
##EXAMPLES: 2##

BillingStrategy[i] : getActPrice(double rawPrice):double

NormalStrategy[c] <- BillingStrategy[i] :  getActPrice(rawPrice)
HappyHourStrategy[c] <- BillingStrategy[i] :  getActPrice(rawPrice*0.5)

Customer : drinks:List<Double>, strategy:BillingStrategy, add(double price,int quantity)

import java.util.ArrayList;
import java.util.List;

public class StrategyPatternWiki {
  public static void main(final String[] arguments) {
    Customer firstCustomer = new Customer(new NormalStrategy());

    // Normal billing
    firstCustomer.add(1.0, 1);

    // Start Happy Hour
    firstCustomer.setStrategy(new HappyHourStrategy());
    firstCustomer.add(1.0, 2);

    // New Customer
    Customer secondCustomer = new Customer(new HappyHourStrategy());
    secondCustomer.add(0.8, 1);
    // The Customer pays
    firstCustomer.printBill();

    // End Happy Hour
    secondCustomer.setStrategy(new NormalStrategy());
    secondCustomer.add(1.3, 2);
    secondCustomer.add(2.5, 1);
    secondCustomer.printBill();
  }
}

class Customer {

    private List<Double> drinks;
    private BillingStrategy strategy;

    public Customer(final BillingStrategy strategy) {
        this.drinks = new ArrayList<Double>();
        this.strategy = strategy;
    }

    public void add(final double price, final int quantity) {
        drinks.add(strategy.getActPrice(price*quantity));
    }

    // Payment of bill
    public void printBill() {
        double sum = 0;
        for (Double i : drinks) {
            sum += i;
        }
        System.out.println("Total due: " + sum);
        drinks.clear();
    }

    // Set Strategy
    public void setStrategy(final BillingStrategy strategy) {
        this.strategy = strategy;
    }
}

interface BillingStrategy {
    double getActPrice(final double rawPrice);
}

// Normal billing strategy (unchanged price)
class NormalStrategy implements BillingStrategy {
    @Override
    public double getActPrice(final double rawPrice) {
        return rawPrice;
    }
}

// Strategy for Happy hour (50% discount)
class HappyHourStrategy implements BillingStrategy {
    @Override
    public double getActPrice(final double rawPrice) {
        return rawPrice*0.5;
    }
}