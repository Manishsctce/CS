> A regular expression defines a search pattern for strings. 
- The abbreviation for regular expression is regex

######  SPECIAL MEANING CHARACTER #######
|, +, *, ?, \, ^, $, (, ), [, ], {, },
> all these are special meaning character and require backslash for normal using.

REGEX		:	DESCRIPTION
.			: Matches any character
^regex		: Finds regex that must match at the beginning of the line.
regex$		: Finds regex that must match at the end of the line.
[abc]		: Set definition, can match the letter a or b or c.
[abc][vz]	: Set definition, can match a or b or c followed by either v or z.
[^abc]		: When a caret appears as the first character inside square brackets, it negates the pattern. This pattern matches any character except a or b or c.
[a-d1-7]	: Ranges: matches a letter between a and d and figures from 1 to 7, but not d1.
X|Z			: Finds X or Z.
XZ			: Finds X directly followed by Z.
$			: Checks if a line end follows.
+ 			: represent 1 or more  
* 			: represent 0 or more repetition 
? 			: 0 or 1 repetition

> a dash (-) between two characters can be used to indicate a range of characters
> {} represent range as Ex- 123 can be search as \d{1-5}
=======================================
####### REGEX CHARACTER CLASSES #######
>  brackets themselves are not part of what is being matched
-  character class [Jj] will match either a J or a j

[abc]		 :	a, b, or c (simple class)
[^abc]		 :	Any character except a, b, or c (negation)
[a-zA-Z]	 :	a through z or A through Z, inclusive (range)
[a-d[m-p]]	 :	a through d, or m through p: [a-dm-p] (union)
[a-z&&[def]] :	d, e, or f (intersection)
[a-z&&[^bc]] :	a through z, except for b and c: [ad-z] (subtraction)
[a-z&&[^m-p]]:	a through z, and not m through p: [a-lq-z](subtraction)
=======================================
Greedy	Reluctant	Possessive	Matches
X?		X??			X?+			Matches X once, or not at all (0 or 1 time).
X*		X*?			X*+			Matches X zero or more times.
X+		X+?			X++			Matches X one or more times.
X{n}	X{n}?		X{n}+		Matches X exactly n times.
X{n,}	X{n,}?		X{n,}+		Matches X at least n times.
X{n, m)	X{n, m)?	X{n, m)+	Matches X at least n time, but at most m times.
=======================================
########## REGEX QUANTIFIERS ##########

X?		: X occurs once or not at all
X+		: X occurs once or more times
X*		: X occurs zero or more times
X{n}	: X occurs n times only
X{n,}	: X occurs n or more times
X{y,z}	: X occurs at least y times but less than z times

X{n, m)	X{n, m)?	X{n, m)+	: 	Matches X at least n time, but at most m times
=======================================
########## Meta characters ############

\d		: Any digit, short for [0-9]
\D		: A non-digit, short for [^0-9]
\s		: A whitespace character, short for [ \t\n\x0b\r\f]
\S		: A non-whitespace character, short for
\w		: A word character, short for [a-zA-Z_0-9]
\W		: A non-word character [^\w]
\S+		: Several non-whitespace characters
		  
\b		: Matches a word boundary where a word character is [a-zA-Z0-9_]  
\B 		: Not a word Boundary
\A		: Matches the beginning of the input text.
\G		: Matches the end of the previous match
\Z		: Matches the end of the input text except the final terminator if any.
\z		: Matches the end of the input text.
---------------------------------
\e 		: Escape
\f 		: Form feed
\n 		: newline
\r 		: Carriage returns
\t 		: tab
=======================================
#### ADVANCED SEARCHING WITH FLAGS ####

g	Global search.
i	Case-insensitive search.
m	Multi-line search.
y	Perform a "sticky" search that matches starting at the current position in the target string. See sticky
======================================
####### BACKSLASHES IN JAVA ##########

> backslash \ is an escape character in Java Strings. 
- It means backslash has a predefined meaning in Java. 
- You have to use double backslash \\ to define a single backslash. 
- If you want to define \w, then you must be using \\w in your regex. 
- If you want to use backslash as a literal, you have to type \\\\ as \ is also an escape character in regular expressions.

=========================================
############### EXAMPLES ################

EXAMPLE: /boo+(hoo+)+/i
> i at the end of the expr makes regexp case insensitive ;

EXAMPLE: /a+/ 
> matches the 'a' in "candy" and all the a's in "caaaaaaandy"

EXAMPLE: /bo*/ 
> matches 'boooo' in "A ghost booooed"

EXAMPLE: \bHa 
> match 'Ha Ha' in 'Ha HaHa'

EXAMPLE: /.n/ 
> matches 'an' and 'on' in "nay, an apple is on the tree", but not 'nay'

EXAMPLES:
var dateTime = /\d\d-\d\d-\d\d\d\d \d\d:\d\d/;
console.log(dateTime.test("30-01-2003 15:20")); //TRUE
console.log(dateTime.test("30-jan-2003 15:20"));//FALSE

EXAMPLE - 
Regex : ^\d+(\.\d+)?		
> ^ defines that the patter must start at beginning of a new line. 
- \d+ matches one or several digits. 
- The ? makes the statement in brackets optional. 
- \. matches ".", parentheses are used for grouping. Matches for example "5", "1.5" and "2.21".
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
(x)
> Matches 'x' and remembers the match
> The parentheses are called capturing parentheses.

EXAMPLE: The '(foo)' and '(bar)' in the pattern /(foo) (bar) \1 \2/ match and remember the first two words in the string "foo bar foo bar". 
- The \1 and \2 in the pattern match the string's last two words. 
- Note that \1, \2, \n are used in the matching part of the regex. 
> In the replacement part of a regex the syntax $1, $2, $n must be used, e.g.: 'bar foo'.replace( /(...) (...)/, '$2 $1' ).

EXAMPLE:
console.log('bar foo'.replace( /(...) (...)/, '$2 $1' ));//foo bar
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
x(?=y)
> Matches 'x' only if 'x' is followed by 'y'. This is called a lookahead.

EXAMPLE: /Jack(?=Sprat)/ 
> matches 'Jack' only if it is followed by 'Sprat'. 

EXAMPLE: /Jack(?=Sprat|Frost)/ 
> matches 'Jack' only if it is followed by 'Sprat' or 'Frost'. However, neither 'Sprat' nor 'Frost' is part of the match results.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{n}	
> Matches exactly n occurrences of the preceding expression. 
> N must be a positive integer.

For example, /a{2}/ doesn't match the 'a' in "candy," but it does match all of the a's in "caandy," and the first two a's in "caaandy."
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
=====================================
########## JAVA REGEX API ###########

> Java Regex API provides 1 interface and 3 classes in java.util.regex package.
- MatchResult interface
- Matcher class
- Pattern class
- PatternSyntaxException class
=====================================
###### STRING Method Description #####

replace() 			:	method does NOT support regular expressions.
s.matches("regex")	: 	Evaluates if "regex" matches s. Returns only true if the WHOLE string can be matched.
s.split("regex")	:	Creates an array with substrings of s divided at occurrence of "regex". "regex" is not included in the result.
s.replaceFirst("regex", "replacement") :	Replaces first occurance of "regex" with "replacement.
s.replaceAll("regex", "replacement")   :	Replaces all occurances of "regex" with "replacement.

=====================================
##### 
String appName = "..\\.%%application.mlajdf2342123490q/ad.//adfan1%%.\\_adfa%%application.aa_dfadf%%adsfa9kladf.log";
Pattern p = Pattern.compile("%%(.*?)%%");
System.out.println("Regex Match: "+appName.matches(".*%%(.*)%%.*"));
Matcher matc = p.matcher(appName);
if(Pattern.matches(".*%%(.*?)%%.*", appName)){
	while(matc.find())
		System.out.println("Value: "+matc.group(1));
}
=====================================
##### JavaScript RegExp #####
> A regular expression is a type of object. 
- It can either be constructed with the RegExp constructor or written as a literal value by enclosing the pattern in forward slash (/) characters.

##SYNTAX
var re1 = new RegExp("abc");
var re2 = /abc/;
=====================================
Methods that use regular expressions
exec(String inputString)	
> A RegExp method that executes a search for a match in a string. It returns an array of information.

test	
> A RegExp method that tests for a match in a string. It returns true or false.

match	
> A String method that executes a search for a match in a string. It returns an array of information or null on a mismatch.

search	
> A String method that tests for a match in a string. It returns the index of the match, or -1 if the search fails.

replace	
> A String method that executes a search for a match in a string, and replaces the matched substring with a replacement substring.

split	
> A String method that uses a regular expression or a fixed string to break a string into an array of substrings.

