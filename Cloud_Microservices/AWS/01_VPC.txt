=======================================
#### Networking & Content Delivery ####

1. Virtual Private Cloud (VPC)
2. Virtual Private Network (VPN)
3. Direct Connect 
4. Elastic Load Balancer 
5. Route 53
6. API Gateway
7. CloudFront  
=======================================
###### Virtual Private Cloud(VPC) #####

> VPC stands for Virtual Private Cloud
- It is logically isolated area of the AWS cloud
- We can have complete control over our virtual networking environment, including a selection of our IP address range, the creation of subnets, and configuration of route tables and network gateways.
- we can provide multiple layers of security, including security groups and NACL, to help control access to EC2 instances in each subnet.

> It is logically isolated from other virtual n/w in the AWS cloud. 

> MAX 5 VPC CAN BE CREATED and 200 subnets in 1 VPC. 
> we can allocate max 5 elastic IP 

> To create VPC, we need to create subnet, internet-gateway, route table 

> DHCP, NACL and SG created be default in a VPC. 

> VPC is region specific, it mean a VPC cannot be in 2 region 
> Subnet is AZ specific, it mean a Subnet cannot be in 2 AZ

> Once VPC is created, we cannot change its CIDR block 

####### Architecture of VPC ######

=======================================
########### IMPLIED ROUTER ############ v2
> It is the central VPC routing function.
> It connects different AZ's together and connects the VPC to the internet gateway.
> Each subnet have a route table. The router uses to forward traffic within the VPC. 
> route tables also have entries to external destinations.

> Route Table, NACL are part of IMPLIED ROUTER

##### ROUTE TABLES #######
> You can have up to 200 route tables per VPC
> We can have up to 50 routes entries per route table.
> EACH SUBNET MUST BE ASSOCIATED WITH ONLY ONE ROUTE TABLE at a given time.
> If you don't specify a subnet-to-route-table association, the subnet(when created) will be associated with the main(default) VPC route table.
> We can change the subnet associated to another route table.

> we can also edit the main (default) route table if we need, but 
- we cannot delete the main (default) route table.
- However, we can make a custom route table manually become the main route table, then we can delete the former main, as it is no longer a main route table.

> Every route table in a VPC comes with a default rule that allows all VPC subnets to communicate with one another
- we CANNOT modify or delete this rule.
- this entry contain 'CIDR block IP addr of VPC' in destination and target is local  
=======================================
######### VPC IP Addressing ########### v3

> ONCE THE VPC IS CREATED, WE CANN'T CHANGE ITS CIDR BLOCK RANGE. 
- The allowed block size is between a /16 netmask (65,536 IP addresses) and /28 netmask (16 IP addresses).

> MIN SIZE OF CIDR BLOCK IS /28 means out of 32bit, 28bit is taken by CIDR block and 4bit for host i.e. 2^4=16 IP can be use by host 

> MAX SIZE OF CIDR BLOCK IS /16 means out of 32bit, 16bit is taken by CIDR block and 6bit for host i.e. 2^6 IP can be use by host 

> If we need a different CIDR size, create a new VPC 

> The different subnet within a VPC can NOT overlap (basic TCP/IP rule) 
EXAMPLE: if a subnet X CIDR block is 10.0.0.0/24, it mean last 8 bit assign for host 
- Now we cannot have another subnet Y within the same VPC having 10.0.0.0/28 CIDR block because it is taking last 4 bit of subnet X

> we can however, expand VPC CIDR by adding new/extra IP addr ranges 

#### AWS Reserved IPs in each subnet

> First 4 IP addresses in each  subnet and the last one are reserved by AWS
- Ex if the subnet is 10.0.0.0/24 then 
10.0.0.0 is the base network 
10.0.0.1 VPC router 
10.0.0.2 DNS related 
10.0.0.3 Reserved for future use
10.0.0.255 last IP 

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##### INTERNET GATEWAY(IGW) #####
> Is the gateway through which our VPC communicate with the internet and with other AWS services

>> It is a horizontally scaled, redundant, and highly available VPC component
- it is manage be AWS itself 

> only 1 IG per VPC 

> It performs NAT(static one-to-one) between Private and Public (or Elastic) IPv4 address

> It supports both IPv4 and IPv6

#### Public Subnet Vs Private Subnet 

##Private IP address
10.0.0.0, 
172.16.0.0, 
192.168.0.0 

Routable IP addr
=======================================
Lab 4,5,6
=======================================
#### Type of VPC ###### v6

1. DEFAULT VPC 
- created in each region when AWS acct is created
- has default CIDR, SG, NACL, route table and IGW 
 
2. Custom VPC (non-default)
- has default CIDR, SG, NACL, route table but DOESNOT HAVE DEFAULT IGW
=======================================
######### SECURITY GROUP(SG) ##########
> It is a virtual firewall.
> It controls traffic at the virtual server (EC2 instance) level, specifically at VNI (virtual network interface) level 

>> up to 5 SG per EC2 instance 
>> SG is Statefull 

> Any Virtual Server Instance(EC2) created MUST HAVE a security group during its launch. 
- you can either choose an existing one, or create a new SG during launch. 

> Each VPC created will have a default SG, 
- we CANNOT DELETE A DEFAULT SECURITY GROUP.

> SECURITY GROUPS ARE VPC RESOURCES, 
- hence different EC2 instances in different AZ, belonging to the same VPC, can have the same SG applied to them

> Security groups act at the instance level, not the subnet level. 
- Therefore, each instance in a subnet in your VPC can be assigned to a different set of security groups.

>> Changes to security groups TAKE EFFECT IMMEDIATELY. 

> A Security group can be used in different subnet 

####### TYPE OF SECURITY GROUPS ####### v9
1. DEFAULT SECURITY GROUP in a default or custom VPC, will have:
- Inbound rules allowing instances assigned the same security group to talk to one another 
- All outbound traffic is allowed 

2. CUSTOM(NON-DEFAULT) SECURITY GROUPS in a VPC will always have:
- No Inbound rules - basically all inbound traffic is denied by default 
- All outbound traffic is allowed by default 

##### SECURITY GROUP CONFIGURATION #### 
> we can use SG names as source or destination in other SG rules. 
> we can use the SG name as source in its own inbound SG rules. 

> Security group are directional and can use allow rules only 
> A security group set of rules END WITH AN IMPLICIT DENY ANY 

> we can use CIDR addr or another security group in the security group. 
- subnet id cannot be use in source/destination in SG Rule

## SECURITY GROUP FORMAT 
INBOUND - Type(DNS/HTTP/ICMP) - Protocol - PortRange - Source 
OUTBOUND - Type(DNS/HTTP/ICMP) - Protocol - PortRange - Dest 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##Q: To allow the EC2 instances assigned to a security group to communicate with one another, 
- create a security group, apply it to all these instances, and configure a rule that allows any traffic, on any protocol/ports, the source of which is the security group itself. 
- Be cautious that the security group is a VPC resource, which mean member EC2 instances can be from different subnet and AZs too. 


##Q: To allow all EC2 instances on a subnet to communicate with each other,
- create a security group and apply it to those instances, and configure a rule that allows communication on all protocol/ports, the source of which is the subnet CIDR block 

=======================================
##### NETWORK ACCESS CONTROL LISTS #### v10 

> It is a function performed on the implied router (The implied VPC router hosts the NACL function) 

> It functions at the subnet level 

> NACL IS STATELESS. 
- Outbound traffic for an allowed inbound traffic, must be explicitly allowed too 

> IT HAVE "ALLOW" AND "DENY" RULES

> NACL is a set of rules, each has a number  
> NACL rules are checked for a permit from lower numbered(1st) rules until either a permit is found or an explicit/implicit deny is reached. 

> you can insert rules (based on the configured rule number spacing) between existing rules, 
- hence it is recommended to leave a number range between any two rules to allow for edits later. 

> NACL END WITH AN EXPLICIT DENY any, which we cannot delete. 

> A subnet must be associated with a NACL, if we do not specify the NACL, the subnet will get associated with default NACL automatically. 
- subnet cannot be associated with more than 1 NACL but 
- NACL can be associated with 1 or more subnet. 

> we can create our own custom NACL, not necessary to use default 

######### TYPES OF NACL #########
1. DEFAULT NACL 
- ALLOWS ALL INBOUND AND OUTBOUND TRAFFIC 

2. CUSTOM NACL 
- it BLOCK/DENIES ALL INBOUND AND OUTBOUND TRAFFIC BY DEFAULT 

#### NACL FORMAT #### 
#INBOUND - Rule, Type, Protocol, PortRange, source, Allow/Deny
#OUTBOUND - Rule, Type, Protocol, PortRange, Destination, Allow/Deny,

## NOTE:
> Inbound in ACL means coming from outside the subnet destined to the subnet. 
- Outbound means going out of the subnet.

> Inbound for security group means inbound from outside the instance destined to the instance. 
- Outbound means going out of the instance ENI

####### Security Group & NACL ######### v12
> CHANGES MADE TO NACLS (OR SECURITY GROUP) TAKE EFFECT IMMEDIATELY, so they are both quick to activate/defend as needed. 

> NACL help to block certain ranges of IP address from a large pool, becuase they do HAVE DENY RULES.
- SG cannot block a certain range of IP from internet 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## Ques 
## If an instance in a VPC is unable to communicate over a certain protocol/ports with anothe instance in the same VPC, then the problem is the security setting of :

- Security group or NACL of the source instance, and/or,
- Security group or NACL of the destination instance 

* The problem will never be routing table configuration, due to the default route entry .


>> NACL are stateless, to allow certain traffic through it, it need to be allowed( and the return traffic) in the inbound and outbound rules of the ACL. 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
## What is difference between Security group and NACL? 

> NACL operates at the subnet level (1nd line of defense)
- SG operates at the instance level (2nd line of defense i.e defense in depth)

> NACL supports allow and deny rules 
- SG Support allow rules only 

> NACL IS STATELESS : return traffic must be explicitly allowed by rule 
- SG IS STATEFUL i.e return traffic is automatically allowed regardless of any rules 

> NACL, we process rules in number order when deciding 
- SG, we evaluate all rules before deciding whether to allow traffic 

> NACL Automatically applies to all instances in the subnet its associated with (backup layer of defense, so you don't have to rely on someone specifying the SG) 
- SG Applies to an instance only if someone specifies the sG when launching the instance or associates the SG with the instance later on 

#### NACL FORMAT #### 
#INBOUND - Rule, Type, Protocol, PortRange, source, Allow/Deny
#OUTBOUND - Rule, Type, Protocol, PortRange, Destination, Allow/Deny, 

## SECURITY GROUP FORMAT 
INBOUND - Type(DNS/HTTP/ICMP) - Protocol - PortRange - Source 
OUTBOUND - Type(DNS/HTTP/ICMP) - Protocol - PortRange - Dest 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
=======================================
#### TCP/IP PACKET HEADERS #### v13

DestIP - DestPort - SourceIP - SourcePort - payload
- Here SourcePort could be ephemeral 

=======================================
############# NAT INSTANCE ############ V15 
> NAT instance place at public subnet
- it is normal EC2 instance but it is loaded with AMI that has NAT functionality 

>> NAT instance always configured in public subnet 

> NAT instance need to be assigned a security group

> NAT instance is there to enable the private subnet EC2 instance to get to the internet

> No traffic initiated from the internet can access the private subnet 

> Only admin SSH traffic can be allowed to the NAT instance (or RDP if windows) 

> Public subnet EC2 instance don't need to go through NAT 

> Private subnet EC2 instances need to access websites on the internet (http/https)

> NAT instance SG must allow :
- Traffic inbound from the private subnet or the private subnet SG as a source on the ports 80(http) and 443(https) 
- Traffic outbound to 0.0.0.0/0 (internet) on ports 80 and 443 
- Traffic inbound from customer own network on port 22(ssh) to administer the NAT instance

######## NAT GATEWAY ##########

> IT IS A AWS MANAGED SERVICE 
> Cannot assigned Security group 
- AWS is responsible for its security/patching etc 

> WORKS ONLY WITH ELASTIC IP, can not use a public IP to do it function 

> We can migrate the NAT instance to the NAT Gateway. NAT Gateway should be in public subnet
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
## What is difference between NAT Gateway and NAT Instance?

> NAT Instance we manage it and launch it 
- NAT Gateway manage by AWS 

> NAT Instance we add Security group 
- NAT Gateway SG is managed by AWS 

> NAT instance works on public ip / elastic ip 
- NAT gateway works only on elastic ip 

=======================================
############# VPC WIZARD ############## v16 

> VPC WITH PUBLIC AND PRIVATE SUBNETS CREATED BY A VPC WIZARD WILL HAVE: 
- by default, a public subnet associated with a custom route table and IGW
- by default, a private subnet associated with the main route table 
- An IGW created and attached to the VPC
- by default the wizard will prefer to create a NAT Gateway for VPC, but we have the option to choose a NAT instance instead. For launch of NAT instance the wizard need atleast M1 small instance

> Main(default) VPC route table is assigned to the private subnet, it has the VPC local subnet routing entry and an entry 0.0.0.0/0 pointing to the NAT instance/gateway

> Custom route table will have an entry 0.0.0.0/0 pointing to IGW as a target

> NOTE : CREATING A VPC, CREATES ROUTE TABLE AND NOT ROUTING INSTANCE

> VPC created by VPC Wizard, by default creates NAT Gateway/instance 

> VPC WITH NAT INSTANCE CANNOT BE DELETED UNLESS THE USER MANUALLY TERMINATE THOSE NAT INSTANCE 

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## VPC with public and VPN-only subnet created by a VPC WIZARD
> Wizard create VPC does not have a NAT instance or NAT gateway 

> Wizard created VPC will have
- Main route table associated with the the VPN-only subnet
- Custom route table associated with public subnet and pointing to the VPC IGW
- IGW created for the VPC
- VGW with VPN connection
- Route propagation enable for the main route table for exchanging route with the VGW dynamically
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## Routing to on premise network
> A public and VPN-only subnet VPC created by the VPC wizard refer to the fact that no NAT instance(or gateway) will be created as part of the wizard configuration
- VPN-only mean a subnet that does not require access to the internet

> VPC main route table is associated with the VPN-only subnet
> VPC custom route table is associated with the public subnet
> VGW is the gateway the main table refer to for access to customer premise/data centre

## VPN-only subnet
> Configuring a VPC using the VPC wizard that has a VPN-only and VPN access implies:
- No public subnet 
- no NAT instance/gateway 
- it will create a virtual private gateway(VGW) but without an elastic IP 
- it will create a VPN connection
=======================================
############ VPC PEERING ############## v18
> VPC peering connection is a networking connection between 2 VPC that enable us to route traffic between them USING PRIVATE IPv4/IPv6 address

> Instance in another VPC can communicate with each other as if they are within same network

>> We can create a VPC peering connection between own VPCs or with another acct VPC.
- connection can be within a single or between regions(also known as inter-region VPC peering connection).

> AWS use the existing infrastructure of a VPC to create a VPC peering connection
- it is neither a gateway nor a VPN and connection and does not rely on a separate piece of physical hardware

> There is no single point of failure for communication or a bandwidth bottleneck

> EXAMPLE of VPC peering connection usages:
- if you have more than one AWS account, you can peer the VPC across those account to create a file sharing network 
- you can also use a VPC peering connection to allow other VPC to access resources in your own VPC

## To establish a VPC peering connection you do the following: 
- the owner of requester VPC (or local VPC) send a request to the owner of peer VPC  
- EITHER OF VPC SHOULD NOT HAVE OVERLAP CIDR BLOCK 

> To enable the flow of traffic between the peer VPC, 
- use private IP address, 
- add route entry in VPC route table of both VPCs 
- if require update the SG rules to ensure that traffic to and from the peer VPC is not restricted 


> VPC peering connection is a one to one relationship between two VPC 
- you can create multiple VPC peering connection for each VPC that you own

> TRANSITIVE PEERING RELATIONSHIP ARE NOT SUPPORTED:
- you do not have any peering relationship with VPC that your VPC is not correctly peered with.

> VPC peering does not support edge-to-EDGE routing

> You have a limit on the number of active(50) and pending VPC peering(25) connection that you can have per VPC

> we cannot have more than 1 VPC peering connection betw the same 2 VPCs at the same time. 

> A placement group can span period VPC
> Unicast reverse path forwarding in VPC peering connection is not supported

> VPC peering is not transitive 
- to allow 4 VPC to talk to each other 
- we need a full mesh among them 
- n(n-1)/2 VPC peering i.e 6 peering connection are required 
- what if there we have 20 or 30 VPC

=======================================
############ Transit Gateway ########## v19

> Transit gateway is a network transit hub that we can USE TO INTERCONNECT VPC AND ON-PREMISE NETWORKS 

> IT IS A REGIONAL RESOURCE 
> VPC are allowed to communicate with one another and with on-premise CIDR block by default 

> this can be changed by creating multiple route table, associated different VPC with different routing table to limit/control who talk to whom 

> transitive gateway can be associated across accounts

> A VPC, AWS direct connect gateway, or VPN connection can be attached to a transit gateway

## Transit gateway route table
> Transit gateway has a default route table and can optionally have additional route table
> Route table includes dynamic and static routes that decide the next hop based on destination IP address of the packet

> The target of these rounds can be a VPC or a VPN connection
> by default the VPC and VPN connection that are attached to a transitwy are associated with the default transit gateway route table.

# Association
> Each attachment is associated with exactly one route table
> Each route table can be associated with zero or many attachment

# Route propagation
> A VPC or VPN connection can dynamically propagate route to a transit gateway route table
> With a VPC, you can create static route to send traffic to the transit gateway
> With the VPN connection, route are propagated with the transit gateway on your on-premise router using border gateway protocol(BGP)
=======================================
#### Virtual Private Networks (VPN) ### v21

> VPN CONNECTIONS ARE QUICK, EASY TO DEPLOY, AND COST EFFECTIVE

> A VGW(Virtual Gateway) is required on VPC side, and Customer gateway on the client's data center (locations) side 

> An Internet routable IP address is required on Customer gateway

> Two tunnels are configured for each VPN connection for redundancy

> We can NOT use the NAT gateway in VPC through the VPN connection

## Enabling Dynamic Route Propagation
> You need to update your vpn-only subnets' route table(s) to point at the VGW for subnets that are on the other side of the VPN connection

## AWS VPN CLOUDHUB
> You can have up to 10 IPSec connections per VGW (soft limit can be increased by contacting AWS)

> VPN based Hub and Spoke connectivity to a common VGW

> Can mix DX connections with VPN connections

> VPN cloud hub can also be used to allow the branches to communicate with one another
> This can be a redundant connectivity for the branch offices to the main office or data center too
> IPSec VPN tunnels + BGP need to be used
> You are charged hourly VPN rates plus data transfer rate for data sent to your spokes

## VPN – Allowed IP Prefixes
Which IP prefixes can receive/send traffic through the VPN connection?
- Only IP prefixes that are known to the virtual private gateway,
- VGW learns about these prefixes through Static or BGP routing
- VGW does not route any other traffic destined outside of the received BGP advertisements, static route entries, or its attached VPC CIDR
- You can NOT access Elastic IPs on your VPC side using the VPN tunnel establisheð, Elastic IPs in AWS can only be accessed from the Internet
=======================================
####### AWS DIRECT CONNECT(DX) ######## v22

> It is a direct connection(not internet based) and provides higher speed bandwidth, low latency and jitter and higher performance.
> Consistent performance and dedicated bandwidth

> Broader gateway routing protocol must be used to draw route between the two end of DX connection
> Customer router must be capable of 802.IQ and BGP
> Virtual Interface(VIF) is basically 802.1Q VLAN mapped from the customer router to the DX router. 
> we can use the connection to establish private VIF to connect to VPC in the region(via the VPC's VGW)
> we can establish multiple private VIFs to private subnet with multiple VPCs in a region
> we can establish public VIF to connect to any public AWS endpoints in any region
> Support both IPv4 and IPv6 (requires public VIFs)
> AWS charges data rate on direct connect lower than on VPC
> Suitable when transferring high volume of data between AWS and on premise 

> we cannot use NAT instance/gateway in VPC over the DX connection

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## Static vs Dynamic Routing # v22
> You need routing in order for Routers to be able to forward your traffic correctly

> In simple networks, you can define the routing manually, and this is called static routing (like we do on AWS Route tables)

> When the network grows, we need a dynamic mechanism to take care of updating and exchanging routing information such that we do not have to face the administration challenges of static routing at scale (like when we enable Route Propagation on AWS route tables for VPN or Direct Connect).

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## Border Gateway Protocol (BGP) # v22
> Connects different autonomous systems together
> Each Autonomous System (AS) requires an Autonomous system number (ASN)
> TCP based sessions between neighbors, on port 179
> The Main internet routing protocol today
> Can carry large number of routes, with granular route control
> Has many route/path attributes to control routing
> Has IBGP (within an AS) and EBGP (between ASs) peering types

> Transit AS capability

=======================================
#### Link Aggregation Groups - LAG ### v23

> A link aggregation group (LAG) is a logical interface that uses the Link Aggregation Control Protocol (LACP) to aggregate multiple connections at a single AWS Direct Connect endpoint, allowing you to treat them as a single, managed connection.
- All connections in a LAG operate in active/active mode.

> You can create a LAG from existing connections, or you can provision new connections. After you've created the LAG, you can associate existing connections (whether standalone or part of another LAG) with the LAG.

> The following rules apply:
- All connections in the LAG must use the same bandwidth.
- You can have a maximum of 4 connections in a LAG.
- All connections in the LAG must terminate at the same AWS Direct Connect endpoint.

> All LAGS have an attribute that determines the minimum number of connections in the LAG that must be operational for the LAG itself to be operational.
- By default, new LAGS have this attribute set to 0.
- You can update your LAG to specify a different value-doing so means thatyour entire LAG becomes nonoperational if the number of operational connections falls below this threshold.
- This attribute can be used to prevent over-utilization of the remaining connections.


## BGP and Hybrid Connectivity
> BGP between Corporate Data Center and AWS VPC configured using a direct connect link

> BGP setup, Routing updates are propagated dynamically
> Each side builds its own route table based on these updates and BGP communities configured, if any.

> BGP is the only routing option on Direct connect links
=======================================
### BGP - Communities and Attributes ## v24

> AWS Direct Connect applies inbound and outbound routing policies for a public AWS Direct Connect connection.

• INBOUND POLICIES:
- Client must own the public prefixes and they must be registered as such.
- Traffic must be destined to Amazon public prefixes.
- Transitive routing between connections is not supported.
- AWS Direct Connect performs inbound packet filtering to validate that the source of the traffic originated from your advertised prefix.

## AWS DX - BGP Communities in Outbound policies

> AWS Direct Connect advertises all local and remote AWS Region prefixes where available and includes on-net prefixes from other AWS non-Region points of presence (PoP) where available; for example, CloudFront and Route 53.
-  No access to non-Amazon prefixes (i.e no access to the global internet over the direct links).

> AS_PATH is used to determine the routing path, and AWS Direct Connect is the preferred path for traffic sourced from Amazon (Preference over HA VPN links)

> Only public ASNS are used internally for route selection.
> AWS Direct Connect advertises prefixes with a minimum path length of 3.

> When multiple AWS Direct Connect connections are there, the load-sharing of inbound traffic can be adjusted_by advertising prefixes with similar path attributes. 

> AWS Direct Connect advertises all public prefixes with the well-known NO EXPORT BGP community.
- The prefixes advertised by AWS Direct Connect must not be advertised beyond the network bo undaries of your connection.

## AWS DX - BGP Communities - On Premise side 

#Scope BGP Communities
> BGP community tags can be applied on the public prefixes that you advertise to Amazon to indicate how far to propagate your prefixes in the Amazon network
- For the local AWS Region only, all Regions within a continent, or all public Regions.
- If community tags are applied, prefixes are advertised to all public AWS Regions (global) by default.

#Local Preference BGP Communities
> Local preference BGP community tags are supported for private virtual interfaces, and transit virtual interfaces.
> Local preference BGP community tags can be used to achieve load balancing and route preference for incoming traffic(sourced from AWS).
> For each advertised prefix over a BGP session, a community tag can be applied to indicate the priority of the associated path for returning traffic.
> To load balance traffic across multiple AWS Direct Connect connections, apply the same community tag across the prefixes for the connections.
> To support failover across multiple AWS Direct Connect connections, apply a community tag with a higher preference to the prefixes for the primary or active virtual interface.
=======================================
##### ####### v25

## Route Tables and Route Priority - From AWS to on Premise

> Route tables determine where network traffic is directed.
> A route(s) must be added in the VPC route table (for the CIDRS on premise that will be reached from the VPC), the VGW will be the Target (next hop)
- This is true for both VPN and Direct Connect VPC connectivity

> Alternatively, route propagation can be enabled for the route table to automatically propagate the on premise CIDRS (received via BGP or configured by Static routes on the VGW (VPN case) to the table.

> If overlapping routes within a Site-to-Site VPN connection and longest prefix match cannot be applied, then AWS prioritize the routes as follows, from most preferred to least preferred:
- BGP propagated routes from an AWS Direct Connect connection
- Manually added static routes for a Site-to-Site VPN connection
- BGP propagated routes from a Site-to-Site VPN connection


> When a virtual private gateway (VGW) receives routing information, it uses path
selection to determine how to route traffic to your remote network.

> First it applies Longest prefix match applies;
If all routes are of equal length (subnet mask) then, the following rules apply:
o If any propagated routes from a Site-to-Site VPN connection or AWS Direct Connect connection overlap with the local route for your VPC,
- Forwarding will use the local route is most preferred even if the propagated routes are more specific.

o If any propagated routes from a Site-to-Site VPN connection or AWS Direct Connect connection have the same destination CIDR block as other existing static routes, AwS prioritizes the static routes whose targets are an Internet gateway, a virtual private gateway, a network interface, an instance ID, a VPC peering connection, a NAT gateway, or a VPCendpoint.

> Only IP prefixes that are known to the virtual private gateway, whether through BGP advertisements or static route entry, can receive traffic from your VPC.
- The virtual private gateway does not route any other traffic destined outside of received BGP advertisements, static route entries, or its attached VPC CIDR.
=======================================
### AWS Hybrid Connectivity– Routing Use Cases ### v26


##Q: Your client hired you as the AWS SME. The client previously configured a heavily used, dynamically routed VPN connection between their on-premises data center and AWS. They recently provisioned a Direct Connect connection and would like to start
using the new connection. After configuring Direct Connect settings in the AWS Console, which of the following options will provide the most seamless transition for the users?

A. Delete the existing VPN connection to avoid routing loops configure the Direct Connect router with the appropriate settings
(and verity network traffic is leveraging Direct Connect.

B. Configure the DirectConnect router with a higher BGP priority than the VPN routes, verify network traffic is leveraging
Directconnect and then delete the existing VPN connection.

C. Update the VPC route tables to point to the Direct Connect connection. Configure the Direet Conneet-router with the
appropriate settings verify network traffic is leveraging Direct Connect and then delete the VPN connection

D. Configure the Direct Connect router, update the VPC route tables to point to the Direct Connect connection, configure the
VRN connection with a higher BGP priority. And verify network traffic is leveraging the Direct Connect connection.
-------------------------------
##Q: You are implementing AWS Direct Connect. You intend to use AWS public service end points such as Amazon S3, across the AWS Direct Connect link. You want other Internet traffic to use your existing link to an Internet Service Provider. What is the correct way to configure AWS Direct connect for access to services such as Amazon S3?

A. Configure a public Interface on your AWS Direct Connect link Configure a static route via your AWS Direct Connect link that points to Amazon S3 Advertise a default route to AWS using BGP.

B. Create a private interface on your AWS Direct Connect link. Configure a static route via your AWS Direct connect link that points to Amazon S3 Configure specific routes to your network in your VPC.

C. Create a public interface on your AWS Direct Connect link Redistribute BGP routes into your existing routing infrastructure
advertise specific routes for your network to AWS.

D. Create a private interface on your AWS Direct connect link. Redistribute BGP routes into your existing routing infrastructure
and advertise a default route to ÁWS

-------------------------------
Q: A customer has established an AWS Direct Connect connection to AWS. The link is up and routes are being advertised from the customer's end, however the customer is unable to connect from EC2 instances inside its VPC to servers residing in its datacenter.
Which of the following options provide a viable solution to remedy this situation? (Choose 2 answers)

A. Add a route to the route table with an iPsec VPN connection as the target.
B. Enable route propagation to the virtual pinnate gateway (VGW).
C. Enable route propagation to the customer gateway (CGW).
D. Modify the route table of all Instances using the 'route' command.
E. Modify the Instances VPC subnet route table by adding a route back to the customer's on-premises environment.
=======================================
########### VPC EndPoints ############# v29 

> A VPC ENDPOINT ENABLES US TO PRIVATELY CONNECT OUR VPC TO SUPPORTED AWS SERVICES AND VPC ENDPOINT SERVICES powered by PrivateLink 
- WITHOUT IGW, NAT device, VPN connection, or AWS Direct Connect connection.

> Instances in VPC do not require public IP to communicate with resources in the service.

> Traffic between VPC and the other AWS service does not leave the Amazon network.

> Endpoints are virtual devices. They are HORIZONTALLY SCALED, REDUNDANT, AND HIGHLY AVAILABLE VPC components that allow communication between instances in VPC and services without imposing availability risks or bandwidth constraints on network traffic.

> There are two types of VPC endpoints: 
1. VPC Interface Endpoints and 
2. VPC Gateway Endpoints. 
Create the type of VPC endpoint required by the supported service.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##### VPC INTERFACE ENDPOINT ####
> It is an elastic network interface(ENI) with a private IP address that serves as an entry point for traffic destined to a supported service. 

> The following services are supported:
- API Gateway, CloudFormation, CloudWatch , CloudWatch Events/Logs, 
- EC2 API, KMS, Kinesis Data Streams, ELB, SNS, 
- Systems Manager, Endpoint Services hosted by other AWS Accounts, STS, Codebuild, AWS Config, Service Catalogue, Secrets Manager,
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##### VPC GATEWAY ENDPOINT ######
> It is a gateway that is a target for a specified route in route table, used for traffic destined to a supported AWS service. 
> The following AWS services are supported:
- Amazon S3
- DynamoDB

> You need endpoint policy to control who can access what 
> ENDPOINTS ARE SUPPORTED WITHIN THE SAME REGION ONLY.
=======================================
########### VPC Flow Logs ############# v30
 
> It is a feature that enables us to capture information about IP traffic going to and from network interfaces in VPC.

> Flow logs can help with number of tasks;
- To troubleshoot why specific traffic is not reaching an instance, which in turn helps to diagnose overly restrictive SG rules.
- use flow logs as a security tool to monitor traffic that is reaching our instance.

> WE CAN CREATE A FLOWLOG FOR VPC, SUBNET, OR NETWORK INTERFACE 
- If we create a flowlog for a subnet or VPC, each network interface in the VPC or subnet is monitored.
- cannot capture logs for EC2 instance

> Flow log data for a monitored network interface is recorded as flow log records, which are log events consisting of fields that describe the traffic flow.

> Flow log data can be published to CloudWatch Logs and S3.
- After you've created a flow log, you can retrieve and view its data in the chosen destination.

> To create a flow log,
- You specify the resource for which to create the flow log,
- The type of traffic to capture (accepted traffic, rejected traffic, or all traffic), and
- The destinations to which you want to publish the flow log data.

> CloudWatch Logs charges apply when using flow logs, whether you send them to CloudWatch Logs or S3.

> After we've created a flow log, it can take several minutes to begin collecting and publishing data.
=======================================
##### VPC DHCP Options Sets ###### v30
> we can use an on-premise DNS for AWS VPC environment

> But we can NOT use Route53 as a DNS for On-premise infrastructure

> The Dynamic Host Configuration Protocol (DHCP) provides a standard for passing configuration information to hosts on a TCP/IP network.

> The options field of a DHCP message contains the configuration parameters.
> Some of those parameters are the domain name, domain name server, and the netbios-node-type.
> You can configure DHCP options sets for your virtual private clouds (VPC).

> After you create a set of DHCP options, you can't modify them.
- If you want your VPC to use a different set of DHCP options, you must create a new set and associate them with your VPC.
- You can also set up your VPC to use no DHCP options at all.

> You can have multiple sets of DHCP options, but you can associate only one set of DHCP options with a VPC at a time.
- If you delete a VPC, the DHCP options set associated with the VPC are also deleted.

> After you associate a new set of DHCP options with a VPC, any existing instances and all new instances that you launch in the VPC use these options
=======================================
############# API GATEWAY ############# 
> Amazon API Gateway is an AWS service for creating, publishing, maintaining, monitoring, and securing REST and WebSocket APIs at any scale.

=======================================
############## CLOUDFRONT ############# v3

> Cloudfront is a global (not regional) service.
- It is used Ingress (injection proxy ) to upload objects
- and egress to distribute content

> Amazon Cloudfront is a web service that speeds up distribution of static and dynamic web content, such as html, .css, .js, and image files, to users.

> Cloudfront delivers content through a network of data centers called edge locations.

> When a user requests content that you're serving with Cloudfront, the user is routed (via DNS resolution) to the edge location that provides the lowest latency, so that content is delivered with the best possible performance.

## Cloudfront – Faster Response to Client requests
> If the content is already in the edge location with the lowest latency, CloudFront delivers it immediately.
- This dramatically reduces the number of networks that your users' requests must pass through, which improves performance.

> If not, CloudFront retrieves it from an Amazon S3 bucket or an HTTP/web server that you have identified as the source for the definitive version of your content (Origin Server).

> CloudFront also keeps persistent connections with origin servers so files are fetched from the origins as quickly as possible.

## Cloudfront Distribution
> You create a CloudFront distribution (this a CDN) to instruct CloudFront where you want content to be delivered from, and the details about how to track and manage content delivery.
- Then CloudFront uses edge servers that are close to your viewers (through DNS resolution) to deliver that content quickly when someone wants to see it or use it.

> When CloudFront gets a request for your files/objects, it goes to the origin to get the requested files that it distributes at edge locations.
- You can use any combination of Amazon S3 buckets and HTTP servers as your origin servers.

## CloudFront Use Cases
Customize user
Accelerate websites experience
Customer use cases
Stream live and on-demand media
Secure content

## Accessing Cloudfront - Configuration
> You can access Amazon CloudFront in the following ways:
1. AWS Management Console -
2. AWS SDKS – If you're using a programming language that AWS provides an SDK for, you can use an SDK to access CloudFront. SDKS simplify authentication, integrate easily with your development environment, and provide access to CloudFront commands.

3. Cloudfront API – If you're using a programming language that an SDK isn't available for, see for information about API actions and about how to the make API requests.

4. AWS Command Line Interface
5. AWS Tools for Windows PowerShell
=======================================
#######  ####### v4

## CloudFront – Edge Locations
> Edge locations are not tied to AZ, or Regions.

> Amazon Cloudfront has 116 Points of Presence (105 Edge Locations and 11 Regional Edge Caches) in 56 cities across 24 countries. Whereas current number of AZs is 54 only.

## CloudFront- Regional Edge Cache
> Amazon CloudFront has added several regional edge cache locations globally, at close proximity to your viewers.
- They are located between your origin webserver and the global edge locations that serve content directly to your viewers.
- As objects become less popular, individual edge locations may remove those objects to make room for more popular content.
- Regional Edge Caches have a larger cache width than any individual edge location, so objects remain in the cache longer at the nearest regional edge caches.

> Regional edge cache locations are currently used only for requests that need to go back to a custom origin; i.e. requests to S3 origins will skip regional edge cache locations.

> Serving less popular content from regional edge caches is enabled by default for all new and existing cloudfront distributions. There are no additional charges to use this feature. 

## CloudFront Regional Edge Cache – How it works
> When a viewer makes a request on your website or through your application, DNS routes the request to the CloudFront edge location that can best serve the user's request.

> This location is typically the nearest CloudFront edge location in terms of latency.

> In the edge location, CloudFront checks its cache for the requested files.
- If the files are in the cache, CloudFront returns them to the user.
- If the files are not in the cache, the edge servers go to the nearest regional edge cache to fetch the object.

## CloudFront Regional Edge Cache
> Regional edge caches have feature parity with edge locations. For example, a cache invalidation request removes an object from both edge caches and regional edge caches before it expires.
- The next time a viewer requests the object, CloudFront returns to the origin to fetch the latest version of the object.

> Proxy methods PUT/POȘT/PATCH/OPTIONS/DELETE go directly to the origin from the edge locations and do not proxy through the Regional Edge Caches.

> Regional edge caches are used for custom origins, but not Amazon S3 origins.

> Dynamic content, as determined at request time (cache-behavior configured to forward all headers), does not flow through regional edge caches, but goes directly to the origin.
=======================================
#######  ####### v5

## CloudFront – Configuration Settings
> If we want to use CloudFront to distribute content, create a distribution and specify configuration settings such as:
- ORIGIN : it is the S3 bucket or HTTP server from which CloudFront gets the files that it distributes.
- we can specify any combination of up to 25 S3 buckets and/or HTTP servers as origins

## CloudFront Distributions- Web Distribution
> we can use web distributions to serve the following content over HTTP or HTTPS:
- Static and dynamic download content, for example, .html, .css, .js, and image files, using HTTP or HTTPS,
- Multimedia content on demand using progressive download and Apple HTTP Live Streaming (HLS).

> You can't serve Adobe Flash multimedia content over HTTP or HTTPS, but you can serve it using a CloudFront RTMP distribution

> For web distributions, origin can be either S3 bucket or HTTP server
> A live event, such as a meeting, conference, or concert, in real time.
> For live streaming, you create the distribution automatically by using an AWS CloudFormation stack.

## NEED TO SPECIFY,
> Whether you want the files to be available to everyone or you want to restrict access to selected users.

> Whether you want CloudFront to require users to use HTTPS to access your content.

> Whether you want CloudFront to forward cookies and/or query strings to your origin (for web distributions only), and if so, whether to cache your content based on all parameters or on selected parameters.

> Whether you want CloudFront to prevent users in selected countries from accessing your content (Geo Resitrctions with Cloudfront distributions)

> Whether you want CloudFront to create access logs.

## CloudFront Distribution – RTMP Distribution
> RTMP distributions stream media files using Adobe Media Server and the Adobe Real-Time Messaging Protocol (RTMP).

> An RTMP distribution must use an Amazon $3 bucket as the origin.

> Cloudfront lets you create a total of up to 200 web distribution and 100 RTMP distribute for acct 
 
## CloudFront Distributions – Configuration Propagation
When you save changes to your distribution configuration,
> CloudFront starts to propagate the changes to all edge locations.

> Until your configuration is updated in an edge location, CloudFront continues to serve your content from that location based on the previous configuration.

> Your changes don't propagate to every edge location instantaneously.
- While CloudFront is propagating your changes, AWS can't determine whether a given edge location is serving your content based on the previous configuration or the new configuration.
- When propagation is complete, the status of your distribution changes from InProgress to Deployed.

> After your configuration is updated in an edge location, CloudFront immediately starts to serve your content from that location based on the new configuration.
=======================================
#######  ####### v6

## Using S3 bucket as a CloudFront Origin
Using Amazon S3 Buckets for Your Origin
> When you use Amazon S3 as an origin for your distribution, you place any objects that you want CloudFront to deliver in an Amazon S3 bucket.

> You can use any method that is supported by Amazon S3 to get your objects into Amazon S3( the Amazon S3 console or API, or a third-party tool).

> You can create a hierarchy in your bucket to store the objects, just as you would with any other Amazon S3 bucket.

> Using an existing Amazon S3 bucket as your CloudFront origin server doesn't change the bucket in any way;
- You can still use it as you normally would to store and access Amazon S3 objects at the standard Amazon S3 price.

## Using S3 bucket as a CloudFront Origin
Using Amazon S3 Buckets for Your Origin
> You incur regular Amazon S3 charges for storing the objects in the bucket.

> Upload your content to your origin servers. If you don't want to restrict access to your content using CloudFront signed URLS, make the objects publicly readable.

Important
> You are responsible for ensuring the security of your origin server.
> You must ensure that CloudFront has permission.to access the server and that the security settings are appropriate to safeguard your content.

## Using EC2 Webserver or Private Webserver as a CloudFront Custom Origin Server

> A custom origin is an HTTP server, the HTTP server can be an Amazon EC2 instance or an HTTP server that you manage privately.

> When you use a custom origin that is your own HTTP server, you specify the DNS name of the server, along with the HTTP and HTTPS ports and the protocol that you want CloudFront to use when fetching objects from your origin.

> Most CloudFront features are supported when you use a custom origin with the following exceptions:

## Using EC2 Webserver as a CloudFront Custom Origin Server
If you use Amazon Elastic Compute Cloud for your custom origins, AWS recommends the following:
> Use an Amazon Machine Image that automatically installs the software for a web server.

> Use an Elastic Load Balancing load balancer to handle traffic across multiple Amazon EC2 instances and to isolate your application from changes to Amazon EC2 instances.

> When you create your CloudFront distribution, specify the URL of the load balancer for the domain name of your origin server.

## Using S3 bucket' static website as CloudFront Custom Origin Server
> You can set up an Amazon S3 bucket that is configured as a website endpoint as custom origin with CloudFront.
> When you configure your CloudFront distribution, for the origin, enter the Amazon S3 static website hosting endpoint for your bucket.
- This value appears in the Amazon S3 console, on the Properties page under Static Website Hosting. Example:
• http://bucket-name.s3-website-us-west-2.amazonaws.com

> When you specify the bucket name in this format as your origin, you can use Amazon S3 redirects and Amazon S3 custom error documents.