=======================================
######### AWS STORAGE SERVICE #########

## AWS S3
- It is Simple Storage service 
- It is a scalable, high-speed, low-cost web-based service designed for online backup and archiving of data and application programs. 
- It allows to upload, store, and download any type of files up to 5 TB in size

## AWS Elastic File System
- Fully managed, scalable, and sharable storage among thousands of EC2 instances.

## Glacier
- Secure, durable, and extremely low-cost solutions for backup and archiving.

## Storage Gateway
- Seamlessly connect on-premise applications or services with the AWS cloud storage.

## 
=======================================
##### SIMPLE STORAGE SERVICE(S3) ######

> S3 is one of the first services that has been produced by aws.
> S3 provides developers and IT teams with secure, durable, highly scalable object storage.
- It is easy to use with a simple web services interface to store and retrieve any amount of data from anywhere on the web.

## What is S3?
> S3 is a safe place to store the files.
- It is Object-based storage, i.e., you can store the images, word files, pdf files, etc.
- The files which are stored in S3 can be from 0 Bytes to 5 TB (i.e unlimited storage)

> Files are stored in Bucket. A bucket is like a folder available in S3 that stores the files.

> S3 is a universal namespace, i.e., the names must be unique globally. Bucket contains a DNS address. Therefore, the bucket must contain a unique name to generate a unique DNS address.
If you create a bucket, URL look like:
https://s3-eu-west-1.amazonaws.com/acloudguru 


> If you upload a file to S3 bucket, then you will receive an HTTP 200 code means that the uploading of a file is successful.

## ADVANTAGES OF AMAZON S3

1. Create Buckets: Firstly, we create a bucket and provide a name to the bucket. Buckets are the containers in S3 that stores the data. Buckets must have a unique name to generate a unique DNS address.

2. Storing data in buckets: Bucket can be used to store an infinite amount of data. You can upload the files as much you want into an Amazon S3 bucket, i.e., there is no maximum limit to store the files. Each object can contain upto 5 TB of data. Each object can be stored and retrieved by using a unique developer assigned-key.

3. Download data: You can also download your data from a bucket and can also give permission to others to download the same data. You can download the data at any time whenever you want.

4. Permissions: 
- You can also grant or deny access to others who want to download or upload the data from your Amazon S3 bucket. Authentication mechanism keeps the data secure from unauthorized access.

5. Standard interfaces: S3 is used with the standard interfaces REST and SOAP interfaces which are designed in such a way that they can work with any development toolkit.

6. Security: Amazon S3 offers security features by protecting unauthorized users from accessing your data.

### S3 is a simple key-value store
S3 is object-based. Objects consist of the following:

1. Key: It is simply the name of the object. For example, hello.txt, spreadsheet.xlsx, etc. You can use the key to retrieve the object.

2. Value: It is simply the data which is made up of a sequence of bytes. It is actually a data inside the file.

3. Version ID: Version ID uniquely identifies the object. It is a string generated by S3 when you add an object to the S3 bucket.

4. Metadata: It is the data about data that you are storing. A set of a name-value pair with which you can store the information regarding an object. Metadata can be assigned to the objects in Amazon S3 bucket.

5. Subresources: Subresource mechanism is used to store object-specific information.

6. Access control information: You can put the permissions individually on your files.

===================================
> Block versus object storage
> Rock storage is suitable for transaction database random retried load and structured database storage
> local storage device the data to be stored in inventory size block data chunks for instance a file can be split into is blocked before it is store
> Data block store in block storage would not contain metadata register created data modified content type IT sector
> Block storage only keep the address index where the data blocks are stored does not care what is in block list how to retrieve it when required
> Object storage store the file as a whole and does not divide them
> an object storage and object is defined data itself its metadata that is data created modified security attributes content type IT sector object global unique ID
> The object global unique ID is a unique identifier for the object can be the object name itself and it must be unique such that it can be e retrieved this record where its physical storage location is
> Example of objects photos videos music static web content data backups snapshot archival image any data that can be increased mentally update will not have all lots of rights and update
> Object storage
> chess object storage is stored the object metadata its global unique ID all together it is suitable for distributed storage architecture
> This mean it can scale easily using cheap hardware compare to block storage bus starting additional storage unit
> Nokia 2 storage there is no limit on the type aur amount of metadata in an object
> Example of object storage solution
> Wss 3 Dropbox Facebook image videos spotify
> objective storage can guarantee hai availability and durability data copies are stored on multiple geographical distributed location of the storage cannot be mounted on a drive or directly directly 22 instance object storage is a perfect solution for data growth storage problem
> ###### Data consistency model
> Data consistency is relevant when we are considering copies of the same data object store over distributed system
> when the copies of data stored on different system are read the same time from different nodes consistency level referred to how consistent will they be returned data from the read is it going to be hundred percent the same or slightly different
> ##Consistency level strong consistency
> Sometime also referred as immediate consistency
> Read from different data stores for listen data returns the exact same information
> Any update made to the date object in any storage node will be propagated and updated on all other stories notes before the data is made available for read by clients
> Requires a locking mechanism to block read until the data is propagated and updated on all nodes
> Is good for transactional database and real time system with consistent rights
> Has limited scalability and reduced availability
> ##Eventual consistency
> Read from different data stores for the same data result different returns
> There is no locking mechanism if data is updated to an object and immediate read from different note will not return the same data with time and as the changes updates get propagated and updated on all other storage note that reads will be will eventually consistent
> Eventually consistent can virtually provide unlimited scalability availability data durability
> ##S3 consistency level
> history provides read after rights immediate or strong consistency of put off new object new object loads to S3 put is an http request to store the interest data eventually consistency for overwrite puts and deletes for changes update to existing object in S3
> Updates to an object are atomic that is when you run up put for an object then you read the top chat you will never get the updated object or the old one before the updates you will never get partial or corrupted data
> ###### S3
> S3 is a storage for the internet it has a simple web service interface for simple storing and retrieval of any amount of data anytime from anywhere on the internet it is object based storage and not a block storage
> S3 has a distributed data store architecture where object are redundant stored in multiple location
> ##S3 buckets
> Data is stored in buckets bucket can be viewed as a container for objects a bucket is a flat container of objects that does not provide any hierarchical of object
> You can use object key to make folder in a bucket when using the database console
> You can store unlimited object in your pocket but an object cannot exceed 5tb
> Can't create folder in your pocket available through console only
> You cannot create nested buckets a bucket inside another
> Bucket ownership is not transferable
> It is recommended to access S3 through SDK or API console internally use API 2
> An S3 bucket is region specific
> You can have a 100 pocket soft limit per account
> An S3 bucket has properties including access permission was running status storage classes
> ##S3 bucket naming rule
> S3 bucket are globally unique across all reason bucket name cannot be changed after they created if a bucket is deleted its name become available again to you or another account to use bucket names must be at least 3 or no more than 63 character long bucket names are part of the URL is to access bucket
> Bucket name must be a series of one or more levels like my main dot bucket
> Adjacent label are separated by a single period bucket name can contain lowercase letter numbers and-each label must start and end with a lower case letter or a number
> Bucket name must not be formatted as an IP address
> ###### S3 buckets sub resources
> Amazon S3 supports various option for you to configure your pocket Amazon S3 support subject sources for you to store and manage the bucket configuration information using the Amazon S3 API you can create and manage these resources you can also use the console Audi A8 SDK
> By default a bucket its object and related sab resources are all private that is by default only the owner has access to the bucket and storage object
> Sab resources configuration container for S3 bucket includes
> Life cycle to decide and object lifecycle management
> Website to hold configuration related to static website hosted in S3 bucket
> Versioning keep object version as its change get updated
> Access control list bucket policies
> ##S3 bucket DNS names
> The name is simply two parts bucket reasons in points bucketname
> S3 buckets region
> For better performance loot latency help to minimise cost create the S3 bucket closer to your client DC are source of data to be stored
> #####S3 objects
> An object size stored in S3 bucket can be 0 byte upto 5tb
> Each object is stored and retrieved by unique key
> An object is a 330 uniquely identified and address through
> Service centre point bucketname object key optional ITI object version
> Object store in S3 bucket in a reason will never leave that reason unless you specify move them to another reason or enable cross region replication
> S3 provide height data durability object are redundantly stored on multiple devices across multiple facility in Amazon S3 region where the bucket exist
> ##S3 object sub resources
> sub resources are supported in its two objects that is substances does not exist on their own they are always associated with some other entity such as an object or a bucket
> Basic resources associated with Amazon S3 object access control list to define guarantee and permission granted to the object
> Torrent used by S3 in case bittorrent tries to download the object
> ##S3 resources and sub resources
> Bucket and object are primary S3 resources each has its own sub resources
> Locate some resources are lifecycle website versionname ECL and policies ORS and logging bucket access log
> Subject subject resources are ECL and restore storing and archive
> Operations on S3 are either bucket level operation or object label operation
> ##S3 resource owner
> By default all Amazon S3 resources are private only a resource owner can access the resources
> resource owner refer to the account and create the resources for example account that you use to create buckets and objects on the resources
> If you create an identity and access management user in your account your account is the parent owner if the a.m. user upload and object the parent account to which the user belong owns the object
> A bucket owner can grant cross account permissions to another account or user in another account upload object
> Tws account data upload the object on them
> Bitbucket owner does not have permission on the object that other account own with the following exception
> Deepak daytona pay the bill can deny access to any object regardless of who owns them
> Deepak donor can delete any object in the pocket regardless of who owns them
> Deepak katona can archive any objects for restore archive object regardless of who owns them
> ##Managing access to resources access policy option
> managing access report to granting other eatables account and user permission to perform the resources operation by writing and access policy
> You can grant S3 bucket object permission to individual user account make the resource public grant permission to everyone also for as anonymous access or to all authenticated user user with a w s production
> ##S3 access policy
> Access policy describe who has access to what can associate and access policy with a resource bucket or object or user
> You can get a price available Amazon S3 access policy as follow resource best policy user policy
> ##S3 resource based access policy
> Resource based policy bucket policy and access control list are resource-based because you are attached them to your Amazon S3 resources
> ECL based access policy buckets and objects each bucket and object can have an associated with it
> Initial list of current identifying guarantee and permission granted
> You can use a CL to grant basic read and write permission to other account
> Bucket policy for your bucket you can add a bucket policy to grant other a w s account or a m user permission for the bucket and the object in it
> any object permission apply only to the object that the bucket owner creates bucket policy supplement and in many cases replace ECL based access policy
> ##S3 user access policy
> You can use a w s i m to manage access to your Amazon S3 resources
> Using IDM you can create I am user group and role in your account and attach access policy to them granting them access to a w s resources including Amazon S3
> You cannot current anonymous permissions in any a.m. user policy because the policy is attached to a user
> User policy can grant permission to a bucket and object in it
> ##How does S3 evaluate request for an S3 resource operatio?
> S3 value at usercontext S3 check whether the user attached policy allowed the request so basically whether the current account allowed the operations to the I am user or not if the use is the root account the validation is kept
> Market contract S3 validates whether bucket owner can be the same person parent account or another account has allowed the requested operation to this user
> Bucket policy bucket is real and object are all checked
> Note if the parent account on ST resources can grant resource permission to its a.m. user by using either the user policy or the resource policy
> the bucket and object unity is the same access to the object can be granted in the bucket policy which is evaluated at the pocket contest
> If the owner of different the object owners must use an object to grant permission
> if there is a count that on the object is also the parent object account to which the I am user belong it can configure object permission in a user policy which is evaluated at the user context

[7:41 AM, 1/20/2020] Manish Agrawal: #### Bucket ECL permissions
[7:42 AM, 1/20/2020] Manish Agrawal: Amazon S3 access control list enable you to manage access to pocket and object
[7:42 AM, 1/20/2020] Manish Agrawal: Each bucket and object can has an ECL attached to it as a sub resources
[7:42 AM, 1/20/2020] Manish Agrawal: It define which account guarantee for free define S3 groups are currently access and the type of access
[7:43 AM, 1/20/2020] Manish Agrawal: You can not provide permissions to the individual I am user
[7:43 AM, 1/20/2020] Manish Agrawal: Guarantee account cross account access and then delegate access provided by other account to their individual user
[7:43 AM, 1/20/2020] Manish Agrawal: When you create a bucket for an object Amazon S3 create a default ECL that grants the resources owner full control over the resources
[7:44 AM, 1/20/2020] Manish Agrawal: ### E w s s 3 predefine groups
[7:44 AM, 1/20/2020] Manish Agrawal: Amazon S3 has a set of predefined groups that are
[7:45 AM, 1/20/2020] Manish Agrawal: Authenticated user group this group represent all account access permission to this group allow n e w s account to access the resources however all request must be signed authenticated when you grant access to the authenticated user approve any authenticated user in the world can access resources
[7:45 AM, 1/20/2020] Manish Agrawal: All user group
[7:46 AM, 1/20/2020] Manish Agrawal: access permission to this group allows anyone in the world access to the resources the request can be signed authenticated or unsigned anonymous unsigned request ID the authentication header in the request rws highly recommend that you never grant the all user group write write a c p aur full control permission
[7:46 AM, 1/20/2020] Manish Agrawal: Log delivery group
[7:46 AM, 1/20/2020] Manish Agrawal: Write permission on a bucket enable this group to write server access lock