######### AWS STORAGE SERVICE #########

## EBS 

## AWS S3
- It is Simple Storage service 
- It is a scalable, high-speed, low-cost web-based service designed for online backup and archiving of data and application programs. 
- It allows to upload, store, and download any type of files up to 5 TB in size

## AWS Elastic File System(EFS)
- FULLY MANAGED, scalable, and sharable storage among thousands of EC2 instances.

## Glacier
- Secure, durable, and extremely low-cost solutions for backup and archiving.

#### Storage Gateway ####
> hybrid storage service that Seamlessly connect on-premise applications or services with the AWS cloud storage.
=======================================
############# EBS TYPES ###############

1. General purpose SSD(gp2)  
> SSD backed (Solid state drives)
> Are better for transactional workloads such as small databases & boot volumes, Dev/Test environment, Low Latency interactive apps where performance is highly dependent on IOPS 

> Volume Sizes 1GB-16TB 
> Max Throughput/Vol : 250 MB/sec

#### 2. PROVISIONED IOPS SSD(io1)
>  for mission-critical low-latency or high-throughput workloads
- upto 64,000 IOPS or 250 MiB/s of throughput per volume

> Volume size : 4GB-16TB
> Max Throughput/Vol : 1000 MB/sec

#### 3. THROUGHPUT OPTIMIZED HDD(st1) ##
> Low-cost HDD volume 
- designed for frequently accessed, throughput-intensive workloads
- defines performance in terms of throughput rather than IOPS 
-  good fit for large, sequential workloads Ex - Bigdata, dataware house, log processing, 
- it cannot be boot vol

> Volume size : 500GB-16TB 
> Max Throughput/Vol : 500 MB/sec

#### 4. Cold HDD (sc1) Volumes ####
> Throughput-oriented storage for large volumes of data that is infrequently accessed
> Volume size : 500GB-16TB 
> Max Throughput/Vol : 250 MB/sec

5. Magnetic (standard)
=======================================
########## EBS BLOCK STORAGE ########## v1 
> Two types of Block store devices are supported: 

1. ELASTIC BLOCK STORE (EBS) 
- Persistent 
- Network attached virtual drives 
- EBS backed EC2 instance (i.e. root volume of which is EBS) can be stopped, reboot, restart and terminated

2. INSTANCE STORE 
- Basically the virtual hard drive on the host allocated to this EC2 instance 
- It is called ephimeral storage or temporary storage
- Limited to 10GB per device  
- EC2 instance cannot be stopped, can only be rebooted or terminated - reboot will not erase the instance store data
- Terminate will erase the data
- Instance store-backed EC2 instances boot from an AMI stored on S3

### EBS Device Volumes 

> EBS volume behave like raw, unformatted, external block storage device that can be attach(Mount) to EC2 instances
> EBS volume are block storage device suitable for database style data that requires frequent read and write

> EBS volume attached to instance through the AWS network like virtual hard drive
> An EBS volume can attach to a single EC2 instance only at a time

> Both EBS volume and EC2 instance must be in the same AZ 
- you cannot attach a volume in one AZ to an EC2 instance in a different AZ

> An EBS volume data is replicated by AWS across multiple servers in the same AZ to prevent data loss resulting from any single AWS component failure 
=======================================
## Difference between Instance Store Vs EBS? v2

> IOPS Performance 
> Use instance store instead of EBS if very high IOPS rate is required
- Instance store although cannot provide for data persistence, but it can provide for much higher IOPS compared to network attached storage EBS storage
- remember that instance store is a virtual hard disk space allocated to the instance on the localhost 
- it is worth noting that not all newer EC2 instance support instance store volume
=======================================
############ EBS Snapshots ############ v3 

> EBS snapshot are point-in-time image/copies of EBS volume

> any data written to the volume after the snapshot process is initiated will not be included in the resulting snapshot (but will be included in future incremental updates)

> Per add account up to 5,000 EBS volumes can be created
> Per account up to 10,000 EBS snapshot can be created
> EBS snapshot are stored on S3, we can only access them through EC2 API not directly
- This is unlikely instance-store in AMI( where we can specify a S3 bucket of your own)

#### CHARACTERISTICS ####
> Why EBS volume are AZ specific 
- snapshot are region specific
- To migrate and EBS from one AZ to another create a snapshot (region specific) and create an EBS volume from the snapshot in the intended AZ

> You can create/restore a snapshot to an EBS volume of the same or large size than the original volume size
- you cannot restore and EBS volume snapshot to a smaller volume size

## during snapshot process #
> We can take a snapshot of a non-root EBS volume while the volume is in use on a running EC2 instance

- This mean we can still access it while the snapshot is being processed
- however snapshot will only include data that is already written to your volume. Any data cached by the operating system OS or in memory will not be included which mean the snapshot cannot be 100% consistent

> This snapshot is created immediately but it may stay in pending status until the full snapshot is complete
- we can still access the volume but I/O might be slower 

> While in pending state, an in progress snapshot will not include data from ongoing read and write to the volume 
- this is why for a complete snapshot you need to stop I/O or unmount the volume if possible(or stop the instance for root volumes)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## EBS snapshot consistency ## v4

> To take complete(consistent) snapshot OF NON-ROOT EBS VOLUME:

1. PAUSE FILE WRITE to the desired volume for enough time to take a snapshot

2. if you can't pause file write, you need to UNMOUNT detach the volume from the EC2 instance, take the snapshot and then remount the volume to ensure a consistent and complete the snapshot

> WE CAN RE-MOUNT THE VOLUME WHILE THE SNAPSHOT STATUS IS PENDING 
- this mean the volume does not have to deatached until the snapshot completes

> To create snapshot for root(boot)EBS volume you should stop the instance first and then take the snapshot
- Be careful if you have any instance-store volume on the EC2 instance, their data will be lost once you stop the instance

## EBS INCREMENTAL SNAPSHOT
> EBS snapshots are stored incrementally
- For low cost storage on S3 and guarantee to be fully restore data from the snapshot
- What you need is a single snapshot then FURTHER SNAPSHOTS WILL ONLY CARRY THE CHANGED BLOCKS (incremental updates) 
- Therefor you do not need to have multiple full/complete copies of the snapshot(less storage, fastest updates)

> EBS snapshots are asynchronously created 
- this refer to the fact that updates or changes to snapshot do not have to happen immediately when the respective volume data change

> You are charged for: 
- data transfer to S3 from your EBS volume you are taking a snapshot 
- storage on S3
=======================================
####### EBS encrypted support ######### v6

> EBS encryption is supported on all EBS volume type and all EC2 instance families
> Snapshots of encrypted volume are also encrypted
> Creating EBS volume from an encrypted snapshot will result an encrypted volume.

## EBS DATA ENCRYPTION AT REST ##

> Data encryption at rest mean encrypting data while it is stored on the data storage device
> There are many ways you can encrypt data on EBS volume at rest, while the volume is attached to an EC2 instance
- Use 3rd party EBS volume(SSD or HDD) encryption tool
- Use encrypted EBS volume
- Use encryption at the OS level (using data encryption plugin/driver)
- Encrypt data at the app level before storing it to the volume
- Use encrypted file system on top of the EBS volume
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## EBS DATA ENCRYPTION IN-TRANSIT

> EBS volume are virtually attached to EC2 instance, not physically
- This means when we encrypt data on EBS volume, data is actually encrypted on EC2 instance then transferred encrypted data, to stored on EBS volume
- This mean data in transit between EC2 and encrypted EBS volume is also encrypted

> Data at rest in the EBS volume is also encrypted

## EBS encryption

> Encrypted volume are accessed exactly like unencrypted one basically encryption is handle transparently.
> we can attach an encrypted and unencrypted volume to the same EC2 instance (but the instance has to support encrypted volume)
=======================================
########## EBS encryption ######### v7
> There is no direct way to change the encryption state of a volume
> To change the state(indirectly) you need to follow either of the following 2 way :

1. Attach in new encrypted EBS volume to the EC2 instance then
- copy the data from the un-encrypted vol. to the new vol. 
- both volume must be on the same EC2 instance

2. Create a snapshot of unencrypted vol.
- copy the snapshot and choose encryption for the new copy, this will create an encrypted copy of the snapshot 
- use this new encrypted copy to create an EBS volume, which will be encrypted too
- attach the new encrypted, EBS volume to the EC2 instance

#### EBS ROOT VOLUME ENCRYPTION ####
> There is no direct way to encrypt root volume

> INDIRECT WAY TO ENCRYPT ROOT VOLUME
- Launch the instance with EBS volume required 
- do whatever patching or install application 
- create an AMI from the EC2 instance 
- copy the AMI and choose encryption while copying 
- this result it an encrypted AMI that is private 
- use the encrypted AMI to launch new EC2 instance which will have the EBS root volume encrypted

### EBS volume/snapshot - encryption key
> To encrypt volume/Snapshot, we need an encryption key called CMK that is managed by KMS

> When encrypting 1st EBS volume, AWS KMS create a default CMK key, 
- this key is used for your first volume encryption, encryption of a snapshot created from this volume and subsequent volume created from these snapshot

> After that, each newly encrypted volume is encrypted with the Unique /separate AES256 bit encryption key 
- this key is used to encrypt the volume it's snapshot and any volume created from this snapshot

## Changing encryption key
> We cannot change encryption key used to encrypt an existing encrypted snapshot or encrypted EBS volume
- If you want to change the key, create a copy of the snapshot and specified during the copy process that you want to re-encrypt the copy with a different key
- this come in handy when you have a snapshot that was encrypted using default CMK key and you want to change key in order to share the snapshot with other account

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
###### EBS VOLUME MIGRATION #####
> EBS volume are AZ specific(can be used in the AZ where they are created only)

>> To move/migrate EBS vol to another AZ in the same region, 
- create a snapshot of the volume 
- use the snapshot to create a new volume in the new AZ

>> To move/migrate EBS vol to another region 
- create a snapshot of the volume 
- copy the snapshot and specify the new region  
- in the new region, create volume out of the copied snapshot
=======================================
######## Sharing EBS Snapshots ######## v8

> By default, only the account owner can create volumes from the account snapshots

> we can share public unencrypted snapshots with AWS community not the private 

> we can share encrypted/unencrypted snapshots with another AWS account(s), by making it snapshot permission to private 

> You can NOT make encrypted snapshots public
- However, you can share it with other AWS accounts if needed, but you need to mark it "private" then share it.

## SHARING EBS ENCRYPTED SNAPSHOTS ## 8b
> To share encrypted snapshots with another AWS account-B:
1. Acct-A must MAKE USE OF NON-DEFAULT/CUSTOM CMK key to encrypt the snapshot(AWS will not allow the sharing if default CMK is used),

2. CONFIGURE CROSS-ACCOUNT PERMISSIONS TO THE CUSTOM CMK KEY, 
- Without this, the other accounts will not be able to copy the snapshot, nor will be able to create volumes of the snapshot

3. Mark the snapshot private then enter the AWS accounts with which you want to share the snapshot.
-----------------------------
> For AWS account-B with whom an encrypted snapshot is shared:
- They must first create their own copies of the snapshots, it is recommended to use their own CMK key during copy to have full control otherwise if acct-A changed CMK key then snapshot will not usable.

> When you share your snapshot of a volume, you are actually sharing all the data on that volume used to create the snapshot

> Changes made by the other account(s) to their copies, do not impact the original shared snapshot
=======================================
########## COPYING SNAPSHOTS ########## 9a
> The following is possible for our snapshots:
- we can copy an un-encrypted snapshot
- During the copy process, we can request encryption for the resulting copy
- we can also copy an encrypted snapshot
- During the copy process, you can request to re-encrypt it using different key

> Snapshot copies receive a new Snapshot ID, different from that of the original snapshot

> We can copy a snapshot within the same region, or from one region to another

> To move a snapshot to another region, we need to copy it to that region

> we can only make a copy of the snapshot when it has been fully saved to S3 (its status shows as "complete"), and 
- not during "pending" status (when data blocks are being moved to S3)

> Amazon S3's Server Side Encryption (SSE) protects the snapshot data in-transit while copying (Since the snapshot and the copy are both on S3)

> User defined tags are NOT copied from original snapshot to copy
> we can have up to 5 snapshot copy requests running in a single destination per account

> You can copy Import/Export service, AWS Marketplace, and AWS storage gateway snapshots (not just the EBS ones)

> if you try to copy anlencrypted snapshot without having permissions to the encryption key, the copy process will "fail silently"
- This is why "Cross-account permissions" were required when sharing encrypted snapshots,
- If the accounts with which the snapshot is shared, do not have access encryption key, they will not be able to create copies nor will be able tobELse the shared snapshots

## Use Cases - Copying a Snapshot ## 9d

> Use cases for Copying a snapshot
- Geographic expansion
- Disaster Recovery : backing up your data and logs in another region, restoring from that data/logs in case of a disaster
- Migration to another region
- Encryption (of unencrypted volumes)
- Data retention and auditing requirements
- Copy data and logs to another AWS account for auditing
- This also protects against account compromise

=======================================
## Creating/Registering AMIs ## 11a
> To create your own AMI, from an Instance-store backed EC2 instance's root volume, you need to:
- Launch an EC2 instance from an AWS Instance-Store backed AMI
- Update the root volume as you require (software updates, patches, apps.etc)
- Create the AMI which will upload the AMI and updates as a bundle to S3
- You need to specify the S3 bucket (User Bucket) to load the AMI/bundle to
- Register the AMI (Manually), such that AWS EC2 can find it to launch further EC2 instances
- The created AMI image of the instance-store backed EC2 instance is stored in AWS S3

> Since your new AMI is stored in an AWS S3 bucket, S3 charges apply until you de-register the AMI and delete the S3 stored objects

> For changes to the source AMI (stored in S3) to become in effect, you must deregister and reregister the AMI before the changes takể effect.

## Launching EC2 Instances from Instance-Store Backed AMI ##11b
> Instances launched from an Instance-store backed AMI will have an instance store as the root device volume.

> When an instance is launched using an instance store-backed AMI, the image (saved in S3) is copied from S3 to the instance's root device volume.
- The root device volume is then used to boot the instance.

## De-Registering User Created AMIS ##11c
> When you do not need an AMI any further, you can de-register it,
- If you do this, you will not be able to use it again to launch further instances (AWS EC2 will not find it)

> De-registering an AMI will not impact those instances created from the AMI while it was registered

=======================================
#### User Created EBS-backed AMI ## 12a
> For EBS-backed instances, when you want to create an AMI, stop the instance to ensure data consistency and integrity, then create the AMI

> For EBS backed Instances, AWS registers the created AMI automatically

> During the AMI-creation process, EC2 creates snapshots of instance's root volume and any other EBS volumes attached to the instance.
- You are charged for storage costs as long as the snapshots are stored in S3
- In EBS's case, you do not need to specify one of your S3 buckets
- Once you do not need them anymore, delete them

> If any volumes attached to the instance are encrypted, new AMI only launches successfully on instances that support Amazon EBS encryption (more on this later)

## Cleaning up EBS b ## 12b
> To delete the snapshot of an EBS-backed instance's root device volume used by a registered AMI (The one that was created by AWS during the AMI creation process)
- You must de-register the AMI first
- When you deregister an Amazon EBS-backed AMI, it doesn't affect the snapshot that was created for the root volume of the instance during the AMI creation process.


=======================================
### Redundant Array of Independent Disks(RAID) ## v13

> To increase I/O performance/throughput of EC2 instance you can do so by:
- Using EBS optimized EC2 instances
- Use a RAID array of EBS volumes

> RAID array is a collection of drives (i.e EBS volumes)

> STRIPPING : distributing the data to be written over the array disks and writing to multiple disks in parallel (faster writing) without redundancy

> MIRRORING : writing the same data to multiple array disks for redundancy

> RAID is accomplished at the OS level, EBS volumes are supported in any RAID array type

> Be careful that the EC2 instance can handle the resulting array I/0 performance to get the best I/0 performance

> Use EBS optimized instances or instances with 10Gbps network Interface

> RAID array types:

1. RAID 0:
- Has stripping and NO mirroring
- Provides the best I/O performance among RAID types
- Resulting I/O is the sum of the individual disks 1/Os
- Failure of one EBS volume means failure of the entire array

2. RAID 1:
- Redundancy, NO Stripping
- No I/O performance enhancement

3. RAID 10:
- Redundancy and Stripping (Combines both RAID O and RAID 1)

> As a rule of thumb,
- An EC2 instance's max bandwidth need to be greater or equal to the total I/0 of EBS volume (or RAID array)

> It is not recommended to use a RAID array as the root/boot volume of an instance
=======================================
##### AWS Elastic File System(EFS) ####

> It provides simple, scalable, elastic file storage for use with AWS Cloud services and on-premises resources.
> It is easy to use and offers a simple interface that allows you to create and configure file systems quickly and easily.
> It is built to ELASTICALLY SCALE ON DEMAND without disrupting app, GROWING AND SHRINKING AUTOMATICALLY as you add and remove files

> As a regional service, Amazon EFS is designed for high availability and durability storing data redundantly across multiple Availability Zones.
> we can MOUNT EFS TO OUR ON-PREMISES DATACENTER servers via NFSv4 Protocol when connected to VPC with AWS Direct Connect.
> We can mount EFS on on-premises servers to migrate data sets to EFS or backup on-premises data to EFS.

> Highly Available & Durable
> Secure (Can be encrypted, Security Groups)
> Can be mount to N no. of Instances
> Instances from different AZ can be connected to EFS
> Service is not available in all regions
> Pricing is $0.30/GB per month and 5GB under free tier account

##### EFS - BENEFITS ####
> Simple web services interface that allows you to create and configure file systems quickly and easily.
> MULTIPLE EC2 INSTANCES AND ON-PREMISES SERVERS CAN SIMULTANEOUSLY ACCESS AN EFS.
> EFS provides the capacity that we need, without having to provision storage in advance. 
- we pay for what we use, with no minimum commitments or up-front fees.

> EFS provides a simple and secure way to move data from existing on-premises or in-cloud file systems, with the ability to copy files and directories at speeds up to 5x faster than standard Linux copy tools.
=======================================
######### AWS STORAGE GATEWAY #########


> AWS Storage Gateway is a service that CONNECTS AN ON-PREMISES SOFTWARE APPLIANCE WITH CLOUD-BASED STORAGE TO PROVIDE SEAMLESS AND SECURE INTEGRATION between an organization's on-premises IT environment and AWS's Storage infrastructure. 
- The service enables you to securely store data to the AWS cloud for scalable and cost-effective storage.

> AWS STORAGE GATEWAY'S SOFTWARE APPLIANCE is available for download as a virtual machine (VM) image that you INSTALL ON A HOST IN DATACENTER.

> Storage gateway supports either VMware ESXI or Microsoft Hyper-V. 
- Once you have installed gateway associated with AWS account through the activation process, you can use the AWS management console to create the storage gateway option that is right for you.

##### Types of Storage Gateway #####
1. File Gateway (NFS)
2. Volumes Gateway (ISCSI)
   2a. Stored Volumes
   2b. Cached Volumes
3. Tape Gateway (VTL)

#### 1. File Gateway #####
> Files are stored as object in S3 Buckets, accessed through a Network File System (NFS) mount point. 
- Ownership, permissions and timestamps are durably stored in S3 in the user-metadata of the object associated with the file. 
- Once objects are transferred to S3 they can be managed as native S3 objects, and bucket policies such as versioning, lifecycle management and cross region replication apply directly to objects stored in bucket.

##### 2. Volume Gateway #####
> A volume gateway provides cloud-backed storage volumes that we can mount as Internet Small Computer System Interface (ISCSI) devices from on-premises app servers. The gateway supports the following volume configurations:

2A. CACHED VOLUMES 
- WE STORE OUR DATA IN S3 AND RETAIN A COPY OF FREQUENTLY ACCESSED DATA SUBSETS LOCALLY. 
- Cached volumes offer a substantial cost savings on primary storage and minimize the need to scale your storage on-premises. 
- You also retain low-latency access to your frequently accessed data.

2b. Stored volumes 
– If you need low-latency access to entire dataset, first configure on-premises gateway to store all data locally. Then ASYNCHRONOUSLY BACK UP POINT-IN-TIME SNAPSHOTS OF THIS DATA TO AMAZON S3. 
- This configuration provides durable and inexpensive offsite backups that you can recover to your local data center or Amazon EC2. For example, if you need replacement capacity for disaster recovery, you can recover the backups to Amazon EC2.

###### 3. Tape Gateways ######
> With a tape gateway, you can cost-effectively and durably archive backup data in Amazon Glacier. 
- A tape gateway provides a virtual tape infrastructure that scales seamlessly with your business needs and eliminates the operational burden of provisioning, scaling, and maintaining a physical tape infrastructure.

> You can run AWS Storage Gateway either on-premises as a VM appliance, or in AWS as EC2 instance. 
- deploy gateway on EC2 instance to provision ISCSI storage volumes in AWS. 
- Gateways hosted on EC2 instances can be used for disaster recovery, data mirroring, and providing storage for applications hosted on Amazon EC2.

### Summary
• File Gateway – For flat files, stored directly on S3.
• Tape Gateways – Used for backup and uses popular backup applications like NetBackup, Backup Exec, Veear etc.

Volume Gateway:
• Stored Volumes – Entire Dataset is stored on site and is asynchronously backed up to S3.
• Cached Volumes – Entire Dataset is stored on S3 and the most frequently accessed data is cached on site.
