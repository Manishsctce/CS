##### AWS SQS #####

> Simple queue service is a reliable, scalable, fully managed message queue service
> SQS enable to decouple and scale microservice, distributed system and serverless application. SQS move data between distributed application component and helps you to decouple these components.

> SQS support both standard and FIFO queue

> Amazon SQS automatically delete messages that have been in queue for more than maximum messages retention period the default message retention period is 4 days
- We can set the message retention period to value from 60 second to 1,209,600 seconds (14 days) using the SetQueueAttributes action

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What Are the Main Benefits of Amazon SQS?

> Security 
– You control who can send messages to and receive messages from an Amazon SQS queue.
- Server-side encryption (SSE) lets you transmit sensitive data by protecting the contents of messages in queues using keys managed in AWS Key Management Service (AWS KMS).

> Durability 
– To ensure the safety of your messages, Amazon SQS stores them on multiple servers. Standard queues support at-least-once message delivery, and FIFO queues support exactly-once message processing.

> Availability 
– Amazon SQS uses redundant infrastructure to provide highly-concurrent access to messages and high availability for producing and consuming messages.

Scalability – Amazon SQS can process each buffered request independently, scaling transparently to handle any load increases or spikes without any provisioning instructions.

Reliability – Amazon SQS locks your messages during processing, so that multiple producers can send and multiple consumers can receive messages at the same time.

Customization – Your queues don't have to be exactly alike—for example, you can set a default delay on a queue. You can store the contents of messages larger than 256 KB using Amazon Simple Storage Service (Amazon S3) or Amazon DynamoDB, with Amazon SQS holding a pointer to the Amazon S3 object, or you can split a large message into smaller messages.

=======================================
########### STANDARD QUEUE ############

> It is default queue type

> UNLIMITED THROUGHPUT 
– Support unlimited number of transaction per second(TPS) per API action

> AT-LEAST-ONCE MESSAGE DELIVERY. 
- A message is delivered at least once, but occasionally more than one copy of a message is delivered.

> Best-effort ordering 
- Occasionally, messages might be delivered in an order different from which they were sent. This is not guaranteed

#SCENARIO
> We can use standard message queue in many scenario, as long as your applications can process messages at arrived more than once and out of order for example decouple
- Decouple leave user request from intensive background work let users upload media while resizing for encoding it
- Allocate task to multiply workout nodes- process a high number of credit card validation request
- Batch messages for future processing - schedule multiple entries to be added to a database 


=======================================
########### FIFO QUEUE ############

> High Throughput 
– By default, with batching, FIFO queues support up to 3,000 messages per second (TPS), per API action (SendMessage, ReceiveMessage, or DeleteMessage). 
- To request a quota increase, submit a support request. 
- Without batching, FIFO queues support up to 300 messages per second, per API action (SendMessage, ReceiveMessage, or DeleteMessage).

> EXACTLY-ONCE PROCESSING 
– A message is delivered once and remains available until a consumer processes and deletes it. Duplicates aren't introduced into the queue.

> FIRST-IN-FIRST-OUT DELIVERY 
– The order in which messages are sent and received is strictly preserved.

#SCENARIO
> Send data between applications when the order of events is important, for example:

> Ensure that user-entered commands are executed in the right order.

> Display the correct product price by sending price modifications in the right order.

> Prevent a student from enrolling in a course before registering for an account.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
=======================================
########## QUEUE ATTRIBUTES ###########

## Visibility Timeout 
> The length of time (in seconds) that a message received from a queue will be invisible to other receiving components.


## Message Retention Period
- The amount of time that Amazon SQS will retain a message if it does not get deleted.

## Maximum Message Size
> Maximum message size (in bytes) accepted by Amazon SQS

## Delivery Delay
- The amount of time to delay the first delivery of all messages added to this queue.
- Value must be between 0 seconds and 15 minutes

## Receive Message Wait Time
- The maximum amount of time that a long polling receive call will wait for a message to become available before returning an empty response.
- Value must be between 0 and 20 seconds.
=======================================
## To calculate the number of API requests (R) per queue

R = B / D * (2 * P + C)

B is the billing period (in seconds).
D is the data key reuse period (in seconds).
P is the number of producing principals that send to the Amazon SQS queue.
C is the number of consuming principals that receive from the Amazon SQS queue.
=======================================
> All requests to queues with SSE enabled must use HTTPS and Signature Version 4


docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide