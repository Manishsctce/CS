1. Application Metrics - App Monitoring
- Instrument a service to gather statistics about individual operation. Aggregate metrics for alerting and reporting. 

2. Audit Logging - App Monitoring
- Audit logging captures each user's actions. It is useful for customer support, for compliance and to detect suspicious behaviour

3. Back end for front end - App security, scalability
- Create separate backend services to be consumed by gpecific frontend applications or interfaces. 
This pattern is useful when you want to avoid customizing a gingle backend for multiple interfaces.

4. Blue-green deployment - App deployment, ApR availability, Resilience
- Technique that reduces downtime and risk by running Lwo identical production environments called Blue and Green

5. Bulkheads - App availability, Resilience
- Isolate elements of an application into pools so that if one fails, the others will continue to function.

6. Cache aside / Inmemory DB - App performance
- Load data on domand into a cache from a data store. This can improve performance and also helps to maintain consistency between data hold in the cache and data in the underlvirg data store.

7. Caching - App performance, Scalability
- Temporarily copy frequently accessed data to fast storage that's located close to the application


8. Canary - App deployment, App availability, Resilience
- Slowly rolling out the change to a small subset of users before rolling it out to the entire infrastructure and making it available to everybody

9. Circuit break - App availability, Resilience
- Handle faults that might take a variable amount of time to recover from, when connecting to a remote service or resource

10. Consumer-driven contract - App integration
- Inspire providers with insight into their consumer obligations, and focuses service evolution around the delivery of the key business functionality demanded by consumers
=======================================
############### CQRS ##################

## What is CQRS?

> It is a design pattern for Microservice Cloud Application
> Command Query Responsibility Segregation

Problem Statement : How to implement a query that retrieves data from multiple services in a microservice architecture?

> it separates read and update operations for a data store
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
=======================================
####### BLUE & GREEN DEPLOYMENT #######


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What's the difference between a blue/green deployment and a rolling deployment?
  
> In Blue Green Deployment, you have TWO complete environments. 
- One is Blue environment which is running and 
- the Green environment to which you want to upgrade. 
- Once you swap the environment from blue to green, the traffic is directed to your new green environment. 
- You can delete or save your old blue environment for backup until the green environment is stable.

> In Rolling Deployment, you have only ONE complete environment. 
- The code is deployed in the subset of instances of the same environment and moves to another subset after completion.
=======================================
####### CANARY DEPLOYMENT #######


=======================================
###### Domain Driven Design(DDD) ######

## What is Domain Driven Design(DDD)?

> It is a way of looking at software from top down. 

Aims to ease the creation of complex app.

> DDD focus on 3 principles:
1. Focus on the core domain and domain logic
2. Find ccomplex design on models of the domain
3. Constantly collaborate with domain experts to improve the app model and to resolve any domain-related issues.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## Why there is a need for Domain Driven Design (DDD)?

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
=======================================