~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What are the building blocks of Angular? 

> The Angular application is made using the following: 

- Modules
- Component
- Template
- MetaData
- Data Binding
- Directives
- Services
- Dependency Injection
- Routing
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is component decorators?

> main objectives of decorators is to add some metadata to the class that will tell Angular how to process a class. 
- Decorators are functions that modify JavaScript classes. 
- Angular has many decorators that attach metadata to classes so that it knows what those classes mean and how they should work.

In Angular 4, we will have following options to configure.

1. selector:
- define the name of the HTML element in which our component will live.

2. template or templateUrl:
- It can be inline string or link an external html file. 
- It allows us to tie logic from our component directly to a view.

3. styles:
- the styles array for our specific component. 
- We can also link external CSS by styleUrls.

4. directives:
- another component directives we want to use inside our components.

5. providers:
- This is the place we are passing the services that we need insider our components.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is compilation in Angular 4? And what are the types of compilation in Angular 4?
> There is actually only one Angular compiler.
>  There are two types of compilation Angular 4 provides:

1. JUST-IN-TIME (JIT) COMPILATION: 
- This is a standard development approach which compiles Typescript and html files in the browser at runtime, as the application loads. 
- It is great but has disadvantages. Views take longer to render because of the in-browser compilation step. 
- App size increases as it contains angular compiler and other library code that wonâ€™t actually need.

2. AHEAD-OF-TIME (AOT) COMPILATION: 
- With AOT, the compiler runs at the build time and the browser downloads only the pre compiled version of the application. 
- The browser loads executable code so it can render the application immediately, without waiting to compile the app first. 
- This compilation is BETTER THAN JIT BECAUSE OF FAST RENDERING, SMALLER APPLICATION SIZE, SECURITY AND DETECT TEMPLATE ERRORS EARLIER.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##
=======================================
## What is Transpiling in Angular?
> It is the process of converting the typescript into javascript (using Traceur, a JS compiler). 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is the use of @Input and @Output? 
> When it comes to the communication of Angular Components, which are in Parent-Child Relationship; 
- @Input in Child Component when we are passing data from Parent to Child Component 
- @Output is used in Child Component to receive an event from Child to Parent Component. 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## In how many ways the Data Binding can be done?
> Data Binding happens between the HTML (template) and typescript (component). 
- Data binding can be done in 3 ways:

1. Property Binding 
2. Event Binding 
3. Two-Way Data Binding. 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is the sequence of Angular Lifecycle Hooks?

OnChange()  -  OnInit()  -  DoCheck()  -  AfterContentInit()  -  AfterContentChecked()  -  AfterViewInit()  -  AfterViewChecked()  -  OnDestroy(). 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What are the Pipes? 
> This feature is used to change the output on the template; 
- something like changing the string into uppercase and displaying it on the template. 
- It can also change Date format accordingly. 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## Differentiate between ng-Class and ng-Style.
> In ng-Class, loading of CSS class is possible; whereas, 
- in ng-Style we can set the CSS style.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is an AsyncPipe in Angular? 
When an observable or promise returns something, we use a temporary property to hold the content. Later, we bind the same content to the template. With the usage of AsyncPipe, the promise or observable can be directly used in a template and a temporary property is not required 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## 


## How Routing works in Angular 2?
## How many types of Route Gaurds in Angular? And define gaurd as classes?
## What are HTTP and why it is useful?
## How do we handle HTTP error and response?


## Define Pipes with example?
## How do we call an angular 2 pipe with multiple argument?
## How do we chain pipes?
## Define pure and impure pipe?
## Which directives are used in Angular forms ?
## How to validate forms in Angular?


## What is Automation Testing?
## Types of Testing?
=======================================
####### Decorators ########
> It is a feature of TypeScript and are implemented as functions. 
- The name of the decorator starts with @ symbol following by brackets and arguments, since decorators are just functions in TypeScipt.

> It is simply functions that return functions. 
- These functions supply metadata to Angular about a particular class, property, value, or method...
> Decorators are invoked at runtime.
> Decorators allow you to execute functions. For example @Component executes the Component function imported from Angular 7.

Some Common Decorators...
- @NgModule() to define modules...
- @Component() to define compents...
- @Injectable() to define services...
- @Input() and @Output() to define properties...that send and receive data from the dom.
- There are many built-in decorators available in Angular...and many properties on each decorator

## TYPES OF DECORATORS
1. Class decorators, : e.g. @Component and @NgModule
2. Property decorators : for properties inside classes, e.g. @Input and @Output
3. Method decorators : for methods inside classes, e.g. @HostListener
4. Parameter decorators : for parameters inside class constructors, e.g. @Inject

> Each decorator has a unique role
