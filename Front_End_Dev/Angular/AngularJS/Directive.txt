########### DIRECTIVES ############
> it is used to controls the rendering of the HTML inside an AngularJS appl 

##What are directive in AngularJS?
> directive are the markers on DOM element that is used to specify behavior on the DOM elem.
> all directive start with ng-
> There are multiple directive in angularJS like ng-app, ng-model, ng-controller, ng-repeat etc

DIFFERENT TYPES OF DIRECTIVE are
> Element directive
> Attribute directive
> CSS class directive
> Comment directive

#### RESTRICT
> restrict field is used to set if the directive should be activated by a matching HTML element, or an element attribute. 
- By setting restrict to E you specify that only HTML elements named div should activate the directive. 
- By setting restrict to A you specify that only HTML attributes named div should activate the directive. 
- You can also use a value of AE which will match both HTML element names and attribute names.

#### TEMPLATE
> template field is an HTML template that will replace the content of the matched div element. 
- It will work as if the content of the matched div element had not been there, and instead this HTML template had been located in the same place.

-----------------------------------------------
######## CUSTOM DIRECTIVE ###########
> we register a directive with a module

Example-

myapp = angular.module("myapp", []);
myapp.directive('mydirective', function() {
    var directive = {};
    directive.restrict = 'E'; /* restrict this directive to elements */
    directive.template = "My first directive: {{textToInsert}}";
    return directive;
});

> here custom directive name is 'mydirective'
> this will activate when mydirective is used in html
> 2nd arg is directive func i.e factory func. It return JavaScript obj. 
- returned Obj from the factory function has two properties: 
	1. A restrict field  
	2. a template field.
	
###### Restrict field - it is used to set 
1. 'E' ->  Restricted to element.
2. 'A' -> Restricted to attribute.
3. 'C' -> Restricted to class.
4. 'M' -> Restricted to comment i.e only matches comment

> restrictions can all be combined as needed
----------------------------
### Scope inside a directive #####
> scope option is an object that contains a property for each isolate scope binding
> we can use this "scope" for accessing data/methods inside the template and link function.
- By default, unless explicitly set, directives don’t create their own scope. 
- Therefore, directives use their parent scope ( usually a controller ) as their own.
> These values can be either “false”, “true” or “{}”

> Any camel case directive name can be write with -,:,_ separation 
Ex - myOwnDirective can used in html as my_Own_Directive or my:Own:Directive or my-own-directive or my-own_directive

> When scope is set to “true”, 
- AngularJS will create a new scope by inheriting parent scope ( usually controller scope, otherwise the application’s rootScope ). 
- Any changes made to this new scope WILL NOT REFLECT BACK to the parent scope. 
- However, since the new scope is inherited from the parent scope, ANY CHANGES MADE IN THE PARENT SCOPE WILL BE REFLECTED IN THE DIRECTIVE SCOPE.

> When scope is set to “false”, the controller Ctrl1 and directive are using the same scope object. 
- This means ANY CHANGES TO THE CONTROLLER OR DIRECTIVE WILL BE IN SYNC.

> When scope is set to “{}”
- it will NOT be INHERITED from the parent scope. 
- This new scope also known as ISOLATED SCOPE because it is completely detached from its parent scope.
- It’ll make sure that our directive is generic, and PLACED ANYWHERE INSIDE THE APPLICATION. 
- Parent scope is not going to interfere with the directive scope

> Prefixes are used to bind the parent scope’s methods and properties to the directive scope.
> There’re 3 types of prefixes AngularJS provides.
  1. "@" (  Text binding / one-way binding )
  2. "=" ( Direct model binding / two-way binding )
  3. "&" ( Behaviour binding / Method binding  )
  
Ex - 
myapp.directive('myCustomer', function() {
  return {
    restrict: 'E',
    scope: {
      customerInfo: '=info'
    },
    templateUrl: 'my-customer-iso.html'
  };
- here Its name (customerInfo) corresponds to the directive's isolate scope property customerInfo.
- Its value (=info) tells "$compile" to bind to the info attribute. 

"=attr" attributes in the scope option of directives are normalized just like directive names. 
- To bind to the attribute in <div bind-to-this="thing">, you'd specify a binding of =bindToThis.


https://www.undefinednull.com/2014/02/11/mastering-the-scope-of-a-directive-in-angularjs/
----------------------------
#### link of directive ######
link takes a function with the following signature, function link(scope, element, attrs, controller, transcludeFn) { ... }, where:

1. scope - it is an Angular scope object.
2. element - is the jqLite-wrapped element that this directive matches.
3. attrs - is a hash object with key-value pairs of normalized attribute names and their corresponding attribute values.
4. controller -  is the directive's required controller instance(s) or its own controller (if any). The exact value depends on the directive's require property.
5. transcludeFn is a transclude linking function pre-bound to the correct transclusion scope.

- parameter can be of any name 
- parameter containing value according to there application like scope of appln, elements of appln
-----------------------------------------------------------
#### ng-app directive ####
> it starts an AngularJS Application. 
> It DEFINES THE ROOT ELEMENT. 
> It automatically initializes or bootstraps the appl when web page containing AngularJS Application is loaded. 
> It is also USED TO LOAD VARIOUS angularJS MODULES in AngularJS Application. 

##### $routeProvider ######
> $routeProvider is used to configure the routes. 
- We use the ngRoute config() to configure the $routeProvider. 
- The config() takes a function which takes the $routeProvider as parameter and the routing configuration goes inside the function.

Ex - 
var app = angular.module("appName", ['ngRoute']);
app.config(function($routeProvider) {
	$routeProvider
		.when('/view1', {
			templateUrl: 'view1.html',
			controller: 'FirstController'
		})
		.when('/view2', {
			templateUrl: 'view2.html',
			controller: 'SecondController'
		})
		.otherwise({
			redirectTo: '/view1'
		});
});

###when() method takes a "path" and a "route" as parameters.

> PATH is a part of the URL after the # symbol.
> ROUTE contains two properties - templateUrl and controller.
	- templateUrl property defines which HTML template AngularJS should load and display inside the div with the ngView directive.
	- controller property defines which controllers should be used with the HTML template.
	
> When the application is loaded, path is matched against the part of the URL after the # symbol. 
- If no route paths matches the given URL the browser will be redirected to the path specified in the otherwise() function.
-------------------------------
#### ng-init ####
> it initialize an angularJS appl data.
> it is used to put values to the variable to be used.
-------------------------------
#### ng-model ####
> define model/variable to be used.
Ex - 
<div ng-app = "">
   <p>Enter your Name: <input type = "text" ng-model = "name"></p>
</div>
-------------------------------
#### ng-repeat ####
> It iterate through an array and bind the view with each element
-  <li> tag for each item within contacts array.
-------------------------------
##### ng-click #####
> binds the click event on the button or link or any clickable element with the function that is defined within $scope
-------------------------------
##### ngCloak directive ##### 
> it is used to prevent the angular html template from being briefly displayed by the browser in its raw(uncompiled) form while appl is loading.
>  preferred usage is to apply multiple ngCloak directives to small portions of the page

CSS Rule embedded is
[ng-cloak],[data-ng-cloak], .ng-cloak {
	display: none !important;
}
> When this css rule is loaded by the browser, all html elements (including their children) that are tagged with the ngCloak directive are hidden

-------------------------------
###### ngView directive ###########
