JavaScript is not compiled but translated. The JavaScript Translator (embedded in browser) is responsible to translate the JavaScript code.

##JavaScript is used

JavaScript is used to create interactive websites. It is mainly used for:

Client-side validation
Dynamic drop-down menus
Displaying data and time
Displaying popup windows and dialog boxes (like alert dialog box, confirm dialog box and prompt dialog box)
Displaying clocks etc.

> JavaScript provides 3 places to put the JavaScript code: within body tag, within head tag and external JavaScript file


<script type="text/javascript">  
document.write("JavaScript is a simple language for javatpoint learners");  
</script>  
- document.write() function is used to display dynamic content through JavaScript

3. External JavaScript file
-provides code re usability
- with .js extension
- increases the speed of the webpage

Ex - embedded in web pages as 
<script type="text/javascript" src="message.js"></script> 

=======================================
##### Comments #####
1. Single line comments - double forward slashes (//)
2. Multi line comments - /* */
=======================================

=======================================
############# VARIABLE ################

#### NAME STANDARD ####
> Name MUST START WITH A LETTER (a to z or A to Z), underscore(_), or dollar($).
> After 1st letter we can use digits (0 to 9), for example value1.
> JavaScript variables are CASE SENSITIVE
Ex - var x = 10;

#LOCAL VARIABLE - declared inside block or function
#GLOBAL VARIABLE - declared outside the function or declared with window object
EX: 
	<script>  
		var data=200;//gloabal variable  
		function a(){
			var localVar = 500;//local variable
			window.value=100;//declaring global variable by window objec
			document.writeln(data);  
		}    
		a();//calling JavaScript function    
	</script>
	
> To declare JavaScript global variables inside function, you need to use window object
> When declare a variable outside the function, it is added in the window object internally. You can access it through window object also.


// Declare and initiate at the beginning
var firstName = "",
    lastName = "",
    price = 0,
    discount = 0,
    fullPrice = 0,
    myArray = [],
    myObject = {};
=======================================
######### DATA TYPES ##########

> There are two types of data types in JavaScript.
1. Primitive data type
2. Non-primitive (reference) data type

> JavaScript is a dynamic type language, means you don't need to specify type of the variable bCZ it is dynamically used by JavaScript engine. 
- we need to use 'var' here to specify the data type

## 5 Primitive datatype
1. string, 
2. Number, 
3. Boolean, 
4. Undefined - represent undefine value, 
5. Null - represents null i.e. no value at all

##Non-primitive
Object, Array, RegExp 

> Always treat numbers, strings, or booleans as primitive values. Not as objects.


Use {} instead of new Object()
Use "" instead of new String()
Use 0 instead of new Number()
Use false instead of new Boolean()
Use [] instead of new Array()
Use /()/ instead of new RegExp()
Use function (){} instead of new function()

NaN represent Not-a-Number 
> this indicate that a value is not a legal number.
> Subtracting a string from a string, does not generate an error but returns NaN (Not a Number)

> JavaScript is loosely typed. A variable can contain different data types, and a variable can change its data type:
EXAMPLE :
var x = "Hello";     // typeof x is a string
x = 5;               // changes typeof x to a number
=======================================
############### OPERATOR ##############

1. Arithmetic Operators( + - * / % ++ --)
2. Comparison (Relational) Operators (== === != !== > >= < <=)
3. Bitwise Operators(& | ^ ~ << >> >>>)
4. Logical Operators (&&  ||  !)
5. Assignment Operators (=  +=  -=  *=  /=  %=)
6. Special Operators (?:  ,  delete  in  instanceof  new  typeof  void  yield) 

> Other than java operator it has below operators:-
===	equal value and equal type
!=	not equal
!==	not equal value or not equal type

typeof	: Returns the type of a variable
instanceof	Returns true if an object is an instance of an object type
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
####### SPECIAL OPERATORS #######
Th> e following operators are known as JavaScript special operators.

(?:)        - Conditional Operator returns value based on the condition. It is like if-else.
,           - Comma Operator allows multiple expressions to be evaluated as single statement.
delete      - Delete Operator deletes a property from the object.
in	        - In Operator checks if object has the given property
instanceof	- checks if the object is an instance of given type
new			- creates an instance (object)
typeof		- checks the type of object.
void		- it discards the expression's return value.
yield		- checks what is returned in a generator by the generator's iterator.

=======================================
########## CONDITIONAL LOOP ###########
1. if , if..else, if else if 
- like java only
2. switch - like java only
=======================================
############### LOOPS #################
There are four types of loops in JavaScript.

1. for loop - like java only
2. while loop - like java only
3. do-while loop - like java only

4. for-in loop 
- used to iterate the properties of an object.
=======================================
############# FUNCTION ################

1. JS Simple function 
SYNTAX- 
function functionName([arg1, arg2, ...argN]){  
 //code to be executed  
} 
EXAMPLE-
function getcube(number){  
alert(number*number*number);  
} 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2. JS FUNCTION with Return value 
EXAMPLE-
function getInfo(){  
  return "hello javatpoint! How r u?";  
} 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
3. JS Function Object
SYNTAX-
new Function ([arg1[, arg2[, ....argn]],] functionBody)  

EXAMPLE-
var add=new Function("num1","num2","return num1+num2");  
document.writeln(add(2,5));

EXAMPLE- 
var pow=new Function("num1","num2","return Math.pow(num1,num2)");  
document.writeln(pow(2,3));   
 
=======================================
######### JavaScript OBJECTS ##########
There are 3 ways to create objects.

1. By object literal
SYNTAX :
object={ property1:value1, property2:value2 ..... propertyN:valueN}  

EXAMPLE-
emp={id:102,name:"Shyam Kumar",salary:40000}  
document.write(emp.id+" "+emp.name+" "+emp.salary); 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2. By creating instance of Object directly (using new keyword)
SYNTAX :
var objectname=new Object();  

EXAMPLE-
var emp=new Object();  
emp.id=101;  
emp.name="Ravi Malik";  
emp.salary=50000;  
document.write(emp.id+" "+emp.name+" "+emp.salary); 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
3. By using an object constructor (using new keyword
> Here, we need to create function with arguments. Each argument value can be assigned in the current object by using this keyword.

Ex - function emp(id,name,salary){  
this.id=id;  
this.name=name;  
this.salary=salary;  
}  
e=new emp(103,"Vimal Jaiswal",30000);  
  
document.write(e.id+" "+e.name+" "+e.salary);

### Defining method in JavaScript Object
> We can define method in JavaScript object. But before defining method, we need to add property in the function with same name as method

Ex 
<script>
	function emp(id,name,salary){
		this.id=id;
		this.name=name;
		this.salary=salary;
		this.changeSalary=changeSalary;
		function changeSalary(otherSalary){
			this.salary=otherSalary;
		}
	}
</script>

### 	UNDEFINED IS NOT NULL
> With JavaScript, null is for objects, undefined is for variables, properties, and methods.

> To be null, an object has to be defined, otherwise it will be undefined.
EXAMPLE : if (typeof myObj !== "undefined" && myObj !== null)


#### OBJECT METHODS
1. obj.hasOwnProperty(prop)
> prop - name of the property to test

EXAMPLE: 
var properties = [];
var obj = d.details;//d.details = Obj{key1:value1,key2:value2,key3:value3}
for(var key in obj) {
		if(obj.hasOwnProperty(key) && typeof obj[key] !== 'function') {
			
			properties.push( "<b>"+key+"</b>"+ " : " + obj[key]+" <br/>");
		}
	}

EXAMPLE:

	var foo = {
	hasOwnProperty: function() {
		return false;
	},
	bar: 'Here be dragons'
	};
	foo.hasOwnProperty('bar'); // always returns false

// Use another Object's hasOwnProperty and call it with 'this' set to foo
	({}).hasOwnProperty.call(foo, 'bar'); // true

// It's also possible to use the hasOwnProperty property from the Object prototype for this purpose
	Object.prototype.hasOwnProperty.call(foo, 'bar'); // true	
	
2. Delete obj property 
	var obj = new Object();  
	obj.fname = "Manish"; obj.lname = "Agrawal"; obj.mname = "Kumar";
	delete obj.mname;//will remove obj.mname





=======================================
##### String #####
There are 2 ways to create string in JavaScript

1. By string literal
	var stringName = "Hello World";
	
2. By string object (using new keyword)
	var stringName = new String("Hello World");

##METHODS	
1. charAt()	Returns the character at the specified index (position)
2. charCodeAt()	Returns the Unicode of the character at the specified index
3. concat()	Joins two or more strings, and returns a new joined strings
4. fromCharCode()	Converts Unicode values to characters
5. indexOf()	Returns the position of the first found occurrence of a specified value in a string
6. lastIndexOf()	Returns the position of the last found occurrence of a specified value in a string
7. localeCompare()	Compares two strings in the current locale
8. match() 
> Searches a string for a match against a regular expression, and returns the matches

9. replace()	
> Searches a string for a specified value, or a regular expression, and returns a new string where the specified values are replaced
10. search()	Searches a string for a specified value, or regular expression, and returns the position of the match
11. slice()	Extracts a part of a string and returns a new string
12. split()	Splits a string into an array of substrings
13. substr()	Extracts the characters from a string, beginning at a specified start position, and through the specified number of character
14. substring()	Extracts the characters from a string, between two specified indices
15. toLocaleLowerCase()	Converts a string to lowercase letters, according to the host's locale
16. toLocaleUpperCase()	Converts a string to uppercase letters, according to the host's locale
17. toLowerCase()	Converts a string to lowercase letters
18. toString()	Returns the value of a String object
19. toUpperCase()	Converts a string to uppercase letters
20. trim() - Removes whitespace from both ends of a string
21. valueOf() - Returns the primitive value of a String object
=======================================
#####  #####

use strict; 
> it is used to indicate that the code should execute in strict mode
> Declare at the beginning of a JavaScript or a JavaScript function 
- we can Declared inside a func, it has local scope 
> In Strict mode, we cann't use undeclared variables

In STRICT MODE BELOW NOT ALLOWED:-
> Deleting a function is not allowed.
> Deleting a variable (or object) is not allowed.
> Duplicating a parameter name is not allowed
> Escape characters are not allowed
> Octal numeric literals are not allowed
> Writing to a read-only property is not allowed:
EXAMPLE :
	"use strict";
	var obj = {};
	Object.defineProperty(obj, "x", {value:0, writable:false});
	obj.x = 3.14;            // This will cause an error
=======================================
#####  #####
=======================================
#####  #####
=======================================
#####  #####
=======================================
#####  #####

 JavaScript is the programming language of HTML and the Web.
- Many desktop and server programs use JavaScript.

> JavaScript accepts both double and single quotes
EXAMPLE:
document.getElementById("demo").innerHTML = "Hello JavaScript";
document.getElementById('demo').innerHTML = 'Hello JavaScript';


> In HTML, JavaScript code must be inserted between <script> and </script> tags.
- we can place any number of scripts in an HTML document.
- Scripts can be placed in the <body>, or in the <head> section of an HTML page, or in both.

JavaScript can "display" data in different ways:
1. Writing into an HTML element, using innerHTML.

2. Writing into the HTML output using document.write().
3. Writing into an alert box, using window.alert().
Writing into the browser console, using console.log().

##### KEYWORD ########
break	: Terminates a switch or a loop
continue:jumps out of a loop and starts at the top
debugger:	Stops the execution of JavaScript, and calls (if available) the debugging function
do ... while:	Executes a block of statements, and repeats the block, while a condition is true
for:	Marks a block of statements to be executed, as long as a condition is true
function:	Declares a function
if ... else	Marks a block of statements to be executed, depending on a condition
return	Exits a function
switch	Marks a block of statements to be executed, depending on different cases
try ... catch	Implements error handling to a block of statements
var	Declares a variable

> Code after double slashes // or between /* and */ is treated as a comment.
> All JavaScript identifiers are case sensitive. 

########### VARIABLE ############
> You can declare many variables in one statement.
EXAMPLE:
var person = "John Doe", carName = "Volvo", price = 200;

> If you re-declare a JavaScript variable, it will not lose its value.
EXAMPLE:
var carName = "Volvo";
var carName;
- The variable carName will still have the value "Volvo" after the execution of above statements.

