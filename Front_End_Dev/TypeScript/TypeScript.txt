############# TYPE SCRIPT ##############
## What is TypeScript?

> It is an open-source pure object-oriented programing language.
> It is developed and maintained by Microsoft under Apache 2 license.
> It was developed by Anders Hejlsberg, who is also one of the core members of the development team of C# language.
> It was first released in the month of 1st October 2012 and was labeled version 0.8.
> It is a strongly typed superset of JavaScript that compiles to plain JavaScript.
> It is a language as well as a set of tools.
> It is a language for application-scale JavaScript development.
> It can be executed on Any browser, Any Host, and Any Operating System.
> It is not directly run on the browser. It needs a compiler to compile and generate in JavaScript file.
> It source file is in ".ts" extension. We can use any valid ".js" file by renaming it to ".ts" file.
> It is the ES6 version of JavaScript with some additional features.
---------------------------------------
## Why use TypeScript?
> It SUPPORTS STATIC TYPING, STRONGLY TYPE, MODULES, OPTIONAL PARAMETERS, etc.
> It supports object-oriented programming features such as classes, interfaces, inheritance, generics, etc.
> It is fast, simple, and most importantly, easy to learn.
> It provides the error-checking feature at compilation time. 
> It supports all JavaScript libraries because it is the superset of JavaScript.
> It support reusability because of the inheritance.
> It make app development quick and easy as possible, and the tooling support of TypeScript gives us autocompletion, type checking, and source documentation.
> It has definition file with .d.ts extension to provides a definition for external JavaScript libraries.
> It supports the latest JavaScript features including ECMAScript 2015.
> It gives all the benefits of ES6 plus more productivity.
---------------------------------------

## What are the Disadvantage of TypeScript over JavaScript? 

> TypeScript takes a long time to compile the code.
> TypeScript does not support abstract classes.
> If we run the TypeScript application in the browser, a compilation step is required to transform TypeScript into JavaScript.
=======================================
## COMPONENTS OF TYPESCRIPT
> The TypeScript language is internally divided into three main layers. Each of these layers is divided into sublayers or components
1. Language
2. The TypeScript Compiler
3. The TypeScript Language Services

#### Arrow function 

Ex : var fn = () => 'response';

is equivalent to 

var fn = function(){ return 'response';}
=======================================
####### Type declaration ######
> data type is postfix 
var a : number ;
var b : boolean;
=======================================
###### Primitive datatype in TS #######
> number, boolean, string, undefined, null, void

> Number can represent integer, fraction, Binary(Base 2), Octal(Base 8), Decimal(Base 10), Hexadecimal(Base 16) literals.
let identifier:number = value;

> void is used where no datatype is available. 
- A variable of type void is not useful because we can only assign undefined or null to them. 
- Undefined datatype denotes uninitialized variable whereas 
- null represents a variable whose value is undefined.

EXAMPLE:
var myArr = {1,2,3,"manish"}; // In javascript
var numArr: number[]; // In typescript
numArr.push(1); numArr.pop(1);// In typescript

### ANY type 
> It is super type of all datatype in TypeScript.
- It is used to represent any javascript value.

EXAMPLE:
let iden:any = 'Hi';
iden = 500;
iden = true;
=======================================
####### USER-DEFINED DATA TYPE ########
1. Array
2. Class 
3. Tuple 
4. Enum
5. Interface
6. Functions

################ ARRAY ################

1. push()
2. pop()
3. unshift()
4. splice(i,1) 
- 
EXAMPLE:
var myArr = {1,2,3,"manish"}; // In javascript
var numArr: number[]; // In typescript
numArr.push(1); numArr.pop(1);// In typescript

############## Tuple in TS ############
Ex - var myTup : [number, boolean];
myTup = [1, true];
myTup = [1, 'manish']; //its wrong

## To compile typescript  
> tsc <file_name>.ts 

### Implicit type 
> Implicit type with variable declaration
var a = 10;
var b = true;
var c = "Hello";

a = true; // It is not assignable because TS assign var a an implicit assign a type.


> Implicit type with function
Ex - 
function greet():string{
	return "Gm";
}
var greeting = greet();// greeting will implicit type with string.

but 
var greeting ;
greeting = greet(); // greeting will be 'any' type

### Union type
var a : number | boolean;
>It can take either number or boolean but cannot take something else.

############ CLASS ############
Ex - 
class Person {
	fname:string;
	lname:string;
}

var person1 = new Person();// To create instance.
person1.fname = "Manish";
console.log(person1.fname);

> In TypeScript, we can have only 1 constructor bcz we cannot have overloaded constructor