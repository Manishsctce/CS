=======================================
######## AWS COMPUTE SERVICES #########

## AWS EC2
- It is Elastic Compute CloudFront
- It is a raw server
- It enables on-demand, scalable computing capacity in the AWS cloud

## ELASTIC BEANSTALK
- It is a web app server
- It is example of PaaS
- Developers can QUICKLY DEPLOY AND MANAGE APP in the AWS cloud. Developers just have to upload their application and the rest is taken care of by Elastic Beanstalk.
> Beanstalk doesn't use for long-running processes. 

## AWS LAMBDA
- It is ADVANCE VERSION OF EC2
- It is a compute service that lets u run code without provisioning or managing servers.

## AWS ELASTIC LOAD BALANCER 
- It distributes incoming app or network traffic across multiple targets, such as Amazon EC2 instance, container and IP addr. 

## AWS ECR
- It is Elastic Container Registry
- It is fully-managed docker container registry that make it easy for developer to 

## AWS ECS 
- It is Elastic Container Service
- It is a highly scalable, high performance container orchestration service that supports Docker container and allow easily run and scale containerized app on AWS.

## AWS Lightsail
- provides template-based computing. 
- It is also called Virtual Private Servers (VPS). 
- It makes it possible to quickly launch virtual machines from templates rather than selecting individual components in EC2.
=======================================
##### Elastic Compute Cloud(EC2) ######  

> AWS EC2 provides scalable computing capacity in the AWS cloud

> You can use EC2 to launch as many or as few Virtual servers as you need, configure security and networking and manage storage. 

> it enables us to scale up or scale down the instance

> it is having 2 storage options i.e EBS & instance store 
> Preconfigured templates are available known as Amazon Machine Image. 
> By default, when you create an EC2 account with amazon, your acct is limited to a maximum  of 20 instances per EC2 region with 2 default high I/O instance.

> EC2 service provides resizeable compute capacity in cloud. 
> we have root access to each EC2 instance 
> we can stop, restart, reboot or terminate our EC2 instance
> EC2 availability SLA is 99.95% for each region during a month
- here 0.05% i.e. 22min per month, EC2 instance might not be available

> we can provision EC2 instance on shared or dedicated hosts(i.e physical servers) 

##### EC2 INSTANCE ACCESS 
> To access an instance we need a key and key-pair name 
- when we launch a new EC2 instance, we can create a public/private key pair 
- we can download the private key only once 
- the public key is saved by AWS to match it to the key pair name, and private key when we login to EC2 instance 
- if we launch instance without a key pair, we will not be able to acess it(via RDP/SSH) 

>> There is soft limit of 20 EC2 INSTANCES PER REGION, 
- we can submit request to AWS to increase it 


#### EC2 - Root/Boot volume 

> Two types of Block store devices are supported: 
1. Elastic Block store (EBS) (Bootable)
- Persistent mean if we stop EC2 then data will not lost
- Network attached virtual drives i.e. it is not part of EC2

2. Instance store (Bootable)
- Ephimeral volume i.e. Not Persistent mean if we stop/terminate EC2 then data will lost
- Basically the virtual hard drive on the host allocated to this EC2 instance 
- Limited to 10GB per device  
- Instance-store backed EC2 instance has an instance-store root volume 


=======================================
######## EC2 instance families ########

###### 1. General Purpose #######
- Balanced memory and CPU 
- suitable for most application
- Ex- M3, M4, T2 

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
###### 2. COMPUTE OPTIMIZED #####
- More CPU than memory 
- Compute & HPC intensive use 

3 types : C4, C5, C5n 

##C4 
vCPU		: 2 to 36, 
RAM			: 3.75 to 60GB, 
Storage		: EBS only, 
N_Bandwidth	: 10Gbps 

##C5 
vCPU		: 2 to 72, 
RAM			: 4 to 192GB, 
Storage		: EBS only & NVMe SSD, 
N_Bandwidth	: 25 Gbps 

> C5 use Elastic Network Adapter 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
###### 3. MEMORY OPTIMIZED #####
- More RAM/ memory 
- Memory intensive apps, DB and caching 
- R/X/Z series 

## R4/R5/R5a/R5ad/R5d 
- High performance
- suitable for both relational and No-sql DB 
- Used in financial service, Hadoop 
vCPU		: 2 to 96
RAM			: 16 to 768GB
Storage		: EBS only & NVMe SSD
N_Bandwidth	: 

## X1/X1E 
> Well suited for high performance DB, Memory intensive enterprise app, relation DB, workload SAP HANA, 
- Electronic design automation 
vCPU		: 4 to 128
RAM			: 122 to 3904GB
Storage		: Instance storage & NVMe SSD

## Z1d 
> all CPU core frequency is upto 400GHz, fastest of any cloud instance 
> It use Nitro System, Xeon processor, 
vCPU		: 2 to 48
RAM			: 16 to 384GB
Storage		: NVMe SSD
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#### 4. GPU compute instance ####

> Graphics optimized 
> High performance and parallel computing 

## F1 
Field programmable gate arrays (FPGA) 
- each FPGA contain 25million logic element(i.e gate) and 6800 DSP engines 
> Design to accelerate computational intensive algorithm, such as data flow or highly parallel operations 
> Used in Geronomic research, financial analytics, real time video processing & Big data. 

vCPU		: 8 to 64
FPGA 		: 1 to 8
RAM			: 122 to 976GB
Storage		: NVMe SSD

## P2/P3 
> It use NVIDIA Tesla GPU 
> provide high bandwidth networking
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
###### 5. Storage OPTIMIZED #####
> Very High, low latency I/O
> I/O intensive apps, data warehousing, Hadoop

=======================================
###### EC2 EBS OPTIMIZED instance ##### V10

> EBS optimized EC2 instances enable the full use of an EBS volume provisioned IOPS 
- They deliver dedicated performance between EC2 instance and their attached EBS volumes
- Are designed to work will all EBS volume types 
- This is all about high performance data transfer between EC2 instance and their attached EBS volumes

############ EC2- SR-I/OV ########
> SR-I/OV mean Single Root I/O Virtualization

> SR-I/OV is a network interface (host interface) virtualization 
- whereby, a guest machine (EC2 instance) has direct access to virtual network interface without hypervisor being in the middle (emulating a vNIC) 
- basically, virtualizing the network adaptor on the physical host 

> SR-I/OV
- Not supported on all instance types 
- it is supported on R4, X1, P2, C3/4, R3, I2, M4, d2 

###### ADVANTAGE #######
> For supported instance types, SR-I/OV provides: 
- higher PPS performance for data transfer
- Lower latency 
- very low network jitter 

> EC2 enhanced networking can be enabled on EBS-backed or Instance-backed instance 
> EC2 enhanced networking can function across Multi-AZ 

> To use enhanced networking, the EC2 instance need to 
- Support SR-I/OV
- Should be created form HVM(Hardware Virtual Machine) AMI
- be launched in a VPC (default)

> Using enhanced networking does not cost extra 
=======================================
###### EC2 Placement Groups(PG) ####### V11
> It is a logical grouping (clustering) of EC2 instance in the same AZ or in different AZ with the goal of providing low latency, and high network throughput for inter-instance communication 

> A placement group, determines how instance are placed on underlying hardware. 

> 2 strategies to create placement group :
1. CLUSTERS INSTANCES into a low-latency group in a single AZ. 
2. SPREAD INSTANCES across underlying hardware in multiple AZs 

> Use SR-I/OV(Single Root I/O Virtualization) based enhanced networking instance for PG

> To guarantee availability, try to launch all required instance at the same time(Recommended)

> we can create PG across VPC peering 
> There is no charge for creating PG(except EC2 instance)
> PG NAME MUST BE UNIQUE WITHIN AN ACCOUNT FOR THE REGION
> We can use different instance type with PG however this is not recommended for closure PG
> we cannot merge two PG

> you can 
- move an existing instance to a PG 
- move an instance from one PG to another 
- remove an instance from a PG

> An instance cannot be launched in multiple placement groups at the same time

> Instances inside a PG can address each other using private or public IP addresses 
- best performance is achieved when they use private IP addresses for intra placement group communication
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##### CLUSTER Placement Group(CPG) ####

> It is within a single AZ and cannot span multiple AZ

> It is recommended when app require low network latency, high network throughput or both, and 
- if the majority of the network traffic is between the instance in the group 

> To provide the lowest latency and the highest PPS network performance for PG, choose instance type that support enhanced networking (SR-I/OV)  

> It is always RECOMMENDED TO LAUNCH THE PG INSTANCE AT THE SAME TIME 
- if you try to add instance to PG, and you can't due to availability reason, try to stop and start all instances.
- This may result in migration to other hosts that have availability of the specific instance types requested for the group 

> TRY TO AVOID LAUNCHING MORE THAN 1 INSTANCE TYPE IN THE PG (although possible), we increase our chances of getting an insufficient capacity error. 

> if we stop an instance in a PG and then start it again, it still runs in the PG. 
- However the starts fails if there isn't enough capacity for the instance. 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#### Spread Placement Groups(SPG) ####
> It is a group of instances that are each placed on distinct underlying hardware

> SPG are recommended for app that have small number of critical instances that should be kept separated from each other
- Launching instances in a SPG reduces the risk of simultaneous failure that might occur when instance share the same underlying hardware
- spread placement group provide access to distinct hardware and are therefore suitable for mixing instance type or launching instances over time

> SPG CAN SPAN MULTIPLE AZ
- we can have a MAX OF 7 RUNNING INSTANCES PER AZ PER GROUP

> if you start on launch and instance in a SPG and there is insufficient unique hardware to fulfill the request request fails 
- you can try your request again later

=======================================
########## EC2 Status checks ########## V12 

> By default EC2 perform automatically status check EVERY 1 MINUTE
- This is done on every running EC2 instance to identify any hardware or software issues
- Each status check returns either a pass or a failure status
- If one or more status check return a fail, the overall EC2 instances status is changed to "impaired"

> once EC2 instances status changes to impaired because of host hardware/software problem, 
- AWS will schedule stop/start for EBS backed instances to relocate them to a different host 
- you can also do this manually

> Status checks are built-in EC2 services
- They cannot be configured, deleted, disabled or changed

> You can configure cloudwatch to initiate actions like reboot or recover on impaired EC2 instances (ie. for failure status check)

> EC2 service status checks are very important for ASG too, to determine EC2 instance status

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
######## EC2 Monitoring #########

> EC2 SERVICE SEND ITS METRIC DATA TO CLOUDWATCH EVERY 5 MINUTE(enable by default)
- This is free of charge 
- it is called basic monitoring

> you can choose to enable detailed monitoring while launching the instance (or later) where the EC2 will send it metric data to AWS cloudwatch every 1 minute 
- chargeable 
- it is called detailed  monitoring

> You can set cloudwatch alarm action on EC2 instance to 
- stop, restart, terminate or recover EC2 instance 
- we can use stop or terminate actions to save cost 
- we can use the reboot and recover to move your EC2 instance to another host

=======================================
############# EC2 States ############## v13
> When we launch instance, it goes through pending then running state 
- moving to running state mean, instance has started booting 
- then the instance receive a private DNS hostname, and possibly a public DNS hostname (depends on whether it is configured to receive a public IP) 

> if you reboot EC2 instance, it is considered as running and does not add additional hour for bill 
- stopping and restarting an instance adds an hour to bill
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
###### EC2 - STOPPED STATE ######
> When you stop an instance AWS shuts it down.
> Stopped instance maintain its instance ID and root volume

> INSTANCE-STORE BACKED INSTANCE CANNOT BE STOPPED they can only be reboot and terminate

> We are not charged for EC2 instance if they are stopped, however attached EBS vol incur charges

> For stopped EC2 instance we can detach/re-attach their EBS vol including root vol
- when detached, we can attach it to another instance modify it and then re-attached it again to the stopped instance
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##### STOPPING EC2 INSTANCE #####

> WHEN WE STOP AN EBS-BACKED INSTANCE(ROOT VOL), ANY DATA IN INSTANCE-STORE VOL IS LOST 
- despite the fact that the instance can be restarted, all instance store will be gone

> When you stop an EBS-backed EC2 instance
- Instance perform on shutdown 
- state change from running->stopping->stopped 
- EBS volume remain attached to the instance 
- any data cache in RAM or instance store volume is gone 
- most probably when restarted again it will restart on a new physical host 
- instance retain its private IPv4 address, any IPv6 address
- INSTANCE RELEASE ITS PUBLIC IPv4 address back to AWS pool
- instance retain its elastic IP address

> if instance was registered with ELB, it is recommended that de-register it from ELB, such that the ELB will stop healthcheck to the instance 
- you can re-register it later when used restart

> If instance was part of ASG, the ASG would mark it when stopped, as unhealthy, terminated it and replace it
- if you do not want this to happen you better remove/detach the instance from ASG before stopping it 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
######### EC2 REBOOT ########
> Rebooting an EC2 instances does not cause a new hourly bill

> best practice is to use EC2 reboot and not the instance OS reboot because
1. AWS when it initiates reboot, wait for 4 minutes, then if the instance did not reboot will force a hard reboot
2. AWS Reboot creates cloudtrail log which is used for forensic, troubleshooting and documentation/audit purpose
=======================================
###### EC2 - Instance Termination ##### v14

> When you terminate a running instance the instance states changes as follows
Running -> Shutting down -> Terminated
- During the Shutting down and Terminated states you do not incur charges

> By default, EBS root vol. (created automatically when the instance is launched) are deleted automatically when the EC2 instance is terminated

> ANY ADDITIONAL NON-ROOT VOL. ATTACHED TO EC2 PERSIST AFTER THE INSTANCE IS TERMINATED BY DEFAULT,
- here attach vol. to the instance can be during launch or later

> You can modify both behaviors by modifying the "DeleteOnTermination" attribute of any EBS volume during instance launch or while running

> You can view EBS root volume DeleteOnTermination, behavior from "Block Device Mapping"

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
### EC2 TERMINATION PROTECTION ##

> This is a feature we can enable such that an EC2 instance is protected against accidental termination through API, Console, or CLI) SDK

> This can be enabled for both Instance-backed and EBS-Backed Instances

> CloudWatch can ONLY terminate EC2 instances if they do not have the termination protection

> If you want to terminate an instance that has termination protection turned on, you can do so by choosing oS shutdown, and configure AWS to treat OS shutdown as instance termination.

> This can be configured during launch, when the instance is running or stopped (if EBS backed instance)	
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## Instance Immediate Termination

> AWS recommends that after you launch an EC2 instance, you check its status to confirm that it moved from pending to running, and not to a terminated state.

> Possible reasons that a launched instance immediately terminates are:
- The instance store-backed ÁMI you used to launch the instance is missing a required part.
- You've reached your EBS volume limit.
- An EBS snapshot is corrupt.

> To find the reason of the termination:
- From AWS Console : Go to Instances (select the instance) -> Description tab -> State Transition reason
- From CLI use the "describe-instance" command

=======================================
####### EC2 - Instance Meta Data ###### v15

> Instance metadata can be use to configure or manage the instance
Example: IPv4 addr, IPv6 addr, DNS Hostnames, AMI-ID, Instance-ID, Instance-Type, Local-hostname, Public Keys, Security groups

> Metadata can be only viewed from within the instance itself

> METADATA CAN NOT PROTECTED BY ENCRYPTION, anyone that has access to the instance can view this data.

> To view EC2 Instance Metadata (from EC2 instance console):
GET http://169.254.169.254/latest/meta-data/
Curl http://169.254.169.254/latest/meta-data/

> To view specific metadata parameter, example to view local hostname
GET http://169.254.169.254/latest/meta-data/host-name/

=======================================
####### EC2 - Instance Userdata ####### v15

> It is data supplied by the user at instance launch in the form of a script to be executed during the instance boot

> USERDATA IS LIMITED TO 16KB

> Userdata can only be viewed from within the instance itself (logon to it)
> we can change user data, we need to stop instance first (EBS backed)
  Instance -> actions ->Instance-settings -> View/Change user data

> User data is not protected by encryption, do not include passwords or sensitive data in your user data (scripts)

> You are not charged for requests to read user data or metadata
=======================================
####### EC2 - VM Import/Export ######## v16 

> It can be used to migrate Vmware, Microsfot, XEN VMs to the cloud (Import)

> It can be used to convert EC2 Instances to Vmware, Microsfot, XEN VMs to use on-premise (Export)

> This supports:
- Windows and Linux VMs
- Vmware ESX VMDK [Virtual Machine Disk] (and OVA [Open Virtualization Appliance] images for export only)
- Citrix XEN VHD [Virtual Hard Disk]
- MicroSoft Hyper-V VHD

>> VM Import/Export is supported through API / CLI, but NOT through AWS Console

> Before generating the VMDK or VHD images, MAKE SURE THE VM IS STOPPED AND NOT IN SUSPENDED OR PAUSED STATES

> For vmware, AWS HAS A VM CONNECTOR which is a plugin to vmware vCenter
- This allow the migration of VMs to AWS S3
- Convert it to EC2 AMI
- And progress can be tracked in vCenter

### EC2 - IAM Roles
> For an EC2 instance to have access to other AWS services (example S3) you need to configure an IAM Role, which will have an IAM policy attached, under the EC2 instance.
=======================================
############ BASTION HOSTS ############ v17

> Now AWS calls it Remote Desktop for Windows Instances

> BASTION HOST(or jump box/stone) IS USED TO MANAGE AND ADMINISTER PUBLIC/PRIVATE EC2 INSTANCES
- It make secure connectivity to VPC

> The Bastion host is an EC2 instance, whose interfaces will have SG allowing inbound SSH/RDP

> BASTION HOSTS CAN HAVE AUTO-ASSIGNED PUBLIC IP/ELASTIC IP 
- Elastic IPs are better for security reasons and to fix the IP address bcz it get re-associated with the new instances(if launch by ASG) 

> Using SG, we can further limit which IP CIDR can access the Bastion Host.

> Once logged to the Bastion host, we can connect via RDP/SSH to the EC2 instance(s) we desire to manage

> To configure high available bastion host, we can use ASG as follows:
1. Create ASG with desired capacity of 2, choose multi-AZ(2), using Elastic IPs on each (This is the recommended HA way)
- we can configure number of BH instance at launch 

2. Not an HA but saves on cost. Create an ASG with desired capacity 1, min 1, max 1, such that if the bastion instance fails/or gets terminated, the ASG will launch another one.
- until ASG launches another one, you may have a down time (this is for management/administration ), where downtime is acceptable
=======================================
######## EC2 PURCHASE OPTIONS ######### v18

1. On-Demand Instances 
– Pay, by the second, for the instances that you launch.

2. Reserved Instances 
– Reduce your Amazon EC2 costs by making a commitment to a consistent instance configuration, including instance type and Region, for a term of 1 or 3 years.

3. Spot Instances 
– Request unused EC2 instances, which can reduce your Amazon EC2 costs significantly.

4. Dedicated Hosts 
– Pay for a physical host that is fully dedicated to running your instances, and bring your existing per-socket, per-core, or per-VM software licenses to reduce costs.
- we can control number of cores allocated to the application

5. Dedicated Instances 
– Pay, by the hour, for instances that run on single-tenant hardware.

Savings Plans – Reduce your Amazon EC2 costs by making a commitment to a consistent amount of usage, in USD per hour, for a term of 1 or 3 years.

Scheduled Instances – Purchase instances that are always available on the specified recurring schedule, for a one-year term.

Capacity Reservations – Reserve capacity for your EC2 instances in a specific Availability Zone for any duration.

####### 1. RESERVED INSTANCE #######
> we do not actually buy Instances, rather, we reserve long term capacity and pay for it for instance family/configuration, anytime we run (in that AZ or region) an on-demand instance that matches the reserved one, reserve pricing will apply to the on-demand instance

- You can purchase it at a significant discount
- Purchased reserved instance are always available

> When purchased with an AZ scope, capacity reservation in the AZ is guaranteed
> Term options are 1 year or 3 years

> Once purchased, it can NOT be refunded or Cancelled
- You can however, sell them on AWS reserved instance marketplace
- Only the ones with AZ scope can be sold on the Marketplace

> You are billed for reserved instance, whether it is running or stopped

> Reserved instances DO NOT RENEW AUTOMATICALLY when the reserved term expires, rather, it will be billing as on-demand billing rates

> You have no control over which EC2 on-demand instance will have the reserved instance prices applied to

> Reserved Instance benefits can only apply to on-demand instances (not Spot or Dedicated)

> By default, a Reserved Instance scope is Region, however, it can bé AZ pr Region
- If AZ, you get guaranteed reserved capacity in the AZ You can also sell the reservations with AZ scope on AWS reserved instance market place
- If the scope Region, you do not get reserved capacity guarantees You can change from Scope AZ to Scope Region

#### Modifying EC2 Reserved Instances ####
> What you can change is:
- Change AZ within the same Region (keep its scope as(AZ but for a different AZ)
- This also means you can migrate Reserved instances befween AZs in the same region
- Change the scope from AZ to a Region or the other way around

- Change instance size within the same instance family
- You can modify all or a subset of your reservation

> You need to submit a request for the desired modification, through AWS consate, CLI, or API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
###### EC2 SPOT INSTANCES #######
> AWS Spot Instances allow customers to use compute capacity without upfront commitments, AT CHEAPER PRICES than on-demand instance pricing
- CUSTOMERS BID ON SPOT INSTANCES. AWS Off-peak pricing fluctuates, if the price meets the bid price, the instances are allocated for the bidding account
- IT MAY TERMINATED AT ANYTIME by AWS when the market prices goes higher than the previous bid price by the client (who got the instances)

> all Instance families are available for spot instances (T2 for example)

> Encrypted EBS volumes are supported in Spot instance
- If you specify in your launch configuration, it will be honored
=======================================
#### Elastic Network Interface(ENI) ### v19

## How multiple IP addresses work with Network Interfaces
> Eth0 is the Primary network interface, 
- You can't move/detach the primary (eth0) interface from an instance

> By default, Eth is the only ENI created with an EC2 instance when launched

> You can add more interfaces to your EC2 instance (number of additional interfaces is determined by the instance family/type)

> An ENÌ is bound to an Availability Zone

> You can specify which subnet/AZ you want the additional ENI be added in

> You can specify exactly which IP address in the subnet to be configured on instances, or leave AWS assign one automatically from the available subnet IPs

> SG apply to network interfaces not to individual IPs on the interface, hence, IP addresses are also subject to the interface security group

## Default EC2 virtual network interface (eth0)

> You can create (optional) only one additional Ethernet interface (eth1) when launching an EC2 instance, but you can create and attach more ENIS to the EC2 instance (the number of which depends on the Instance family/type)
> Attaching ENI when the instance is running is called "hot attach"

> Attaching ENI when the instance is stopped is called "warm attach"

> Attaching ENI when the instances is launched is called “cold attach"

## How to Add additional Network Interfaces at Instance Launch
> When launching an EC2 instance, after selecting your VPC and subnet, you will be able to "add a device", this is how you can add one more (eth1) interface

> CAUTION:
- you do this, AWS will no longer assigna public IPV4 address to your eth0 (primary network interface), and you will have to use an Elastic IP address mapped to your eth0 (manually) in order to be able to connect from the internet to your instance

## Elastic Network Interfaces (ENI)
> By default, network interfaces created "automatically" during EC2 instance launch by AWS console, are terminated when the instance is terminated,
- Does not include eth1 that you can add during launch (manually added)
> Network interfaces created by CLI are "NOT" terminated automatically when the Ec2 instance terminates.

> In both cases above, you can change the default behavior by changing the "termination behavior" from :
Instances -> Net Interfaces -> Change termination behavior
=======================================
####### ENI IP Address #########v20

## Virtual Elastic Network Interfaces (ENI) - Attributes
> Each Elastic Network Interface can have up to:
- A description
- One Primary IPV4 addresses
- One or more secondary IPV4 addresses
- One Elastic IP address corresponding to each IPV4 address (via NAT)
- One Public-IPV4 address (automatically assigned)
- One of more IPV6 addresses DOLFIN
- Up to 5 Security groups
- A MAC address
- A source/destination check flag o

## Secondary IP addresses - Benefits
> You can configure secondary IPv4 addresses to your EC2 instance's Interfaces and ENIS
> It can be useful to assign multiple IP addresses to an EC2 instance in your VPC to do the following:
- Hosting multiple websites on a single server (multiple SSL certificates each associated with one IP address)

- Security and network appliances use in your VPC
- Redirecting internal traffic to a standby EC2 instance in case your primapy EC2 instance fails,
- This can be achieved by moving (reassigning) the secondary IPV4-adatess from the failed instance to the standby one

## Secondary IPV4 address Re-Assignment
> When you configure secondary IPV4 addresses, and if you allow re-assignment, they can be reassigned to another network interface (moved, transitioned)

> You can reassign etho's secondary private IPV4 address to another network interface
- Comes in handy in failure scenarios if your traffic was directed to the secondary IPV4 address, and the instance fails, move it (reassign it) to a standby instance if you have one, and the traffic will continue (The Elastic IP to secondary IPV4 association remains as the secondary is moved)

## Elastic IP and Secondary IPV4 address Re-Assignment
> Each private IPV4 address can be associated with a single Elastic IP address, and vice versa.

> When a secondary private IPV4 address is reassigned to another interface, the secondary private IPV4 address retains its association with an Elastic IP address.

> When a secondary private IPV4 address is unassigned from an interface, an associated Elastic IP address is automatically disassociated from the secondary private IPV4 address.

## Virtual Elastic Network Interfaces (ENIs)
> Any network interface can be assigned a secondary IPV4 address from the same subnet of the network interface or EC2 instance

> You can assign/remove IP addresses from EC2 instances while they are running or stopped

> Detaching an ENI
- Except for Etho, any interface can be detached and áttached to other instances
- Primary private IPV4, Secondary private IPV4, IPV6, and Elastic IP addresses they continue to be with the same network interface even when it is detached, or attached to another instance

## Example Scenario
> You have two instances, EC2-A, is the primary instance with a secondary IPV4 address, and an Elastic IP address associated with the Instance's secondary IPV4 address

> The second instance, EC2-B, will be a standby instance with no Elastic IP address, and no Secondary IPV4 address

> You can use the secondary IPV4 re-assignment feature to move the Secondary IPV4 address and the associated elastic IP, to instance EC2-B, in case of a problem or failure of EC2-A happens

## 
> To attach a network interface in a subnet to EC2 instance in another subnet, they both "MUST" be in the same AWS Region and same AZ

> Network NIC teaming is not achievable by adding ENIS to an EC2 instance 

> The drawing shows how you can establish network management and public facing interfaces on the same instances using Eth0 and Eth1 ENIs
=======================================
##Q: You have just launched an EC2 instance, and get the following error message when you try to connect to it from a workstation running Windows 7.
Error: Server refused our key or No supported authentication methods available
What could be the reason for this error? 

There are two parts of the error message.
1. The first part is that ‘Server refused our key’

> Putty: This is a CLI (Command Line Interface) tool in Windows. 
- To log in to this Putty tool we need to have the keys in the Putty readable format which would have the extension of ‘.ppk’.
- There is a tool called ‘PuttyGen’ by which we can convert our ‘.pem’ key to the ‘.ppk’ format and 
- if we feed this key to the Putty tool we can log in to our respective instance.

> Load the ‘.pem’ key in the ‘PuttyGen’ tool and use the ‘Save private key’ in the ‘PuttyGen’ to save the private key in ‘.ppk’ format.
- Then load this key in the ‘Auth’ section of ‘Putty’ tool as shown below
- The username should be provided in the ‘Data’ section 

2. The second part of the error message is ‘No supported authentication methods available’.
- Please refer to the below table for the AMI and their corresponding usernames
1. Linux : ec2-user
2. Centos : centos
3. Debian : admin / root
4. Fedora : ec2-user / fedora
5. RHEL : ec2-user / root
6. SUSE : ec2-user / root
7. UBUNTU : ubuntu

=======================================
########## ELASTIC BEANSTALK ##########

> With Elastic Beanstalk, we can QUICKLY DEPLOY AND MANAGE APP in the AWS Cloud without having to learn about the infrastructure that runs those appl. 

> Elastic Beanstalk REDUCES MANAGEMENT COMPLEXITY without restricting choice or control. 
> we simply upload our app, and Elastic Beanstalk automatically handles the details of capacity provisioning, load balancing, scaling, and application health monitoring.

> It supports app developed in Go, Java, .NET, Node.js, PHP, Python, and Ruby. 
- When we deploy app, Elastic Beanstalk builds the selected supported platform version and provisions one or more AWS resources, such as EC2 instances, to run app.

> we can interact with Elastic Beanstalk by using the Elastic Beanstalk console, AWS CLI
=======================================
#### Elastic Container Service(ECS) ###

> ECS service can optionally be configured to use AS to adjust its desired count up or down in response to CloudWatch alarms. 
- AS is available in all regions that support Amazon ECS.

