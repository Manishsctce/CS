####### Elastic Load Balancer ######### v1 

> Internet facing load balancer has an publicly resolvable DNS name
> Domain name for content on the EC2 instance served by the ELB is resolved by the internet DNS servers to the ELB DNS name (and hence IP addresses)
> This is how traffic from the internet is directed to the ELB front end

 
> There are two type of load balancer in the AWS offering 

1. CLASSICAL LOAD BALANCER (CLB) (layer 4 & 7)
> It support http, https, TCP, SSL (but not http/2)
> Protocol ports supported are 1 to 65535
> It support ipv4 IPv6 and dual stack

2. Application Load BALANCER(ALB) (layer7) 
- HTTP/HTTPS
- used for intelligent routing 

3. Network Load Balancer (layer 4)
- TCP/UDP/TLS

#### IMPORTANT #####
> ELB IS REGION SPECIFIC
- we can use Route-53, if we want to load balance in different regions

> ELB Name CAN NOT START OR END WITH A HYPHEN (-)

> If we need IPv4 address of enduser then use "X-Forwarded-For" header
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## BENEFIT OF ALB OVER CLB

1. ALB support path-based routing
- we can configure rule on lister to forward request based on URL 
- This enables you to structure your application as smaller services, and route requests to the correct service based on the content of the URL.

2. ALB support host-based routing 
- we can configure rule on lister to forward request based on host field in HTTP header. 
- This enables you to route requests to multiple domains using a single load balancer.

3. Support for routing requests to multiple apps on a single EC2 instance. 
- You can register each instance or IP address with the same target group using multiple ports.

> Support for registering targets by IP address, including targets outside the VPC for the load balancer. 

> Support for containerized applications. 
- Amazon ECS can select an unused port when scheduling a task and register the task with a target group using this port. 
- This enables you to make efficient use of your clusters.

> Support for monitoring the health of each service independently, as health checks are defined at the target group level and many CloudWatch metrics are reported at the target group level. 
- Attaching a target group to an Auto Scaling group enables you to scale each service dynamically based on demand.

> Access logs contain additional information and are stored in compressed format.

> Improved load balancer performance.
=======================================
##### ELB Listener ######## v3

## ELB - Listeners
> An ELB Listener, is the process that checks for connection requests

> You can configure the protocol/port on which ur ELB listener listens for connection requests
> Frontend listeners check for traffic from clients to the ELB
- Frontend mean client side facing 

> Backend listeners are configured with protocol/port to check for traffic from the ELB to the EC2 instances
- Backend mean EC2 instance side facing

> we can configure multiple listeners with different protocols/ports both on the front end and backend 

> Registered EC2 instances are those that are defined under the ELB
>> It may take sometime for the registration of EC2 instances under the ELB to complete

> ELB only has to do with Inbound traffic destined to the EC2 registered instances (as the destination) and the respective return traffic
- IT HAS "NOTHING" TO DO WITH THE OUTBOUND TRAFFIC that is initiated/generated from registered EC2 instances destined to the internet, or to any other instances within the VPC.

> You start to be CHARGED HOURLY (also for partial hours) once your ELB is active
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
###### ELB – HOW IT WORKS #######

> If you do not want to be charged or you do not need the ELB anymore, you can delete it
- BEFORE YOU DELETE THE ELB, it is recommended that you POINT THE ROUTE53 (or DNS server) TO SOMEWHERE ELSE other than the ELB

> Deleting the ELB DOES NOT AFFECT/DELETE EC2 INSTANCES regisțered with it 

> ELB forwards traffic to "eth0" of registered instances

> In case the EC2 registered instance has multiple IP addresses on eth0, ELB will route the traffic to its primary IP address

=======================================
######## ELB - Scope ######### v4
> You can add tags to ELB

> In a VPC, ELBs SUPPORT IPV4 ADDRESSES ONLY

>> To ensure that the ELB SERVICE CAN SCALE ELB NODES IN EACH AZ, ensure that the subnet defined for the load balancer is at least /27 in size, and has ATLEAST 8 AVAILABLE IP ADDRESSES THE ELB NODES CAN USE TO SCALE

- ELB uses these IP addresses to open/connect with registered EC2 instances (remember this in your SG and NACL settings for ELB environment in VPC)
=======================================
######### ELB – Health Checks ######### v5

> For fault tolerance, it is recommended that we distribute registered EC2 instances across multiple AZs within the VPC region
- Ideally, have the same number of registered instance in each AZ if possible

> The LOAD BALANCER ALSO MONITORS THE HEALTH OF ITS REGISTERED INSTANCES and ensures that it routes traffic only to healthy instances
- A healthy instance shows as "In-Service" under the ELB

> When the ELB detects an unhealthy instance, it stops routing traffic to that instance
- On un-healthy instance shows as "Out-of-Service" under the ELB

> When the ELB service detects the EC2 instance is back healthy, it resumes traffic routing to the Instance again

> By default
- AWS console uses ping HTTP (port 80) for health checks
- AWS API uses Ping TCP (port 80) for health checks

> Registered instances must respond with a HTTP "200 OK" message within the timeout period, else, it will be considered as unhealthy

> DEFAULT RESPONSE TIMEOUT IS 5 SEC (range 2– 60 seconds)

> Health check interval:
- Period of time between health checks
- Default 30 (range 5 - 300 sec)

> Unhealthy Threshold:
- Number of consecutive failed health checks that should occur before the instance is declared unhealthy
- Default 2 (Range 2-10)

> Healthy Threshold:
- Number of consecutive successful health checks that must occur before the instance is considered healthy
- Default 10 (Range 2-10)
=======================================
#### Cross-Zone Load Balancing(CZLB) ## V6

> By default, the ELB distributes traffic evenly bet AZs, without consideration to the number of registered EC2 instances in each AZ

> CZLB is DISABLED BY DEFAULT
- When enabled, the ELB will DISTRIBUTE TRAFFIC EVENLY between registered EC2 instances
- If you have 5 EC2 instances in one AZ, and 3 in another, and enable CZLB, each registered EC2 instance will be getting around the same amount of traffic load from the ELB

> ELB service can be configured through AWS console, CLI, SDK, and Query APIS

> ELB IS REGION SPECIFIC, so all registered EC2 instances must be within the same region, but can be in different AZs 
- Use Route-53, if you want to load balance in different regions

> ELB name you choose must be unique within the account ELB in the AWS region
> The NAME can be up to 32 alphanumeric characters, and CAN NOT START OR END WITH A HYPHEN (-)

> To define your ELB in an AZ, you can select one subnet in that AZ
- Only one subnet can be defined for the ELB in an AZ
- If you try and select another one in the same AZ, it will replace the former one

> If you register instances in an AZ with the ELB but do not define a subnet in that AZ for the ELB,
- These instances will not receive traffic from the ELB

> The ELB is most effective if there is one registered instance at least in each ELB defined AZ
=======================================
###### ###### v7

> An ELB can be Internet facing or Internal load balancer

1. INTERNET FACING:
> ELB nodes will have public IP addresses,
- DNS will resolve the ELB DNS name to these IP addresses
- It routes traffic to the private IP addresses of registered EC2 instances,
- Hence, why your instances do not have to have public IP addresses

> You NEED ONE "PUBLIC" SUBNET IN EACH AZ WHERE THE INTERNET FACING ELB will be defined, such that the ELB will be able to route internet traffic
- Define this subnęt in the ELB confíguration

> Format of the public ELB DNS name of Internet facing ELB: 
name-1234567890.region.elb.amazonawz.com
- this name represent all the ELB node(i.e 8 nodes)

2. INTERNAL ELB:
> ELB nodes will have private IP addresses, to which the DNS resolves ELB DNS name
> It routes traffic to the Private IP addresses of registered EC2 instances

> Format of the public ELB DNS name for internal ELB:
internal-name-123456789.region.elb.amazonaws.com
=======================================
###### ###### v9

## ELB – Security Groups
> If you create ELB in a Non-default VPC, we can choose SG for the ELB from existing. 
- If you do not specify one, default SG of the VPC is assigned to the ELB

## ELB – Security Group & NACLS
> You must assign a security group to your ELB
- This will control traffic that can reach your ELB's front end listeners
- It must also allow health check protocol/ports & listener protocol/port (actual traffic) to reach your registered EC2 instances in the backend

> You must also ENSURE THAT SUBNETS NACLS ALLOW TRAFFIC TO/FROM THE ELB BOTH WAYS (on the front and backend side)

=======================================
#### ELB – SECURITY GROUP SETTINGS #### v9

# Allow Inbound :
1. Internet facing ELB
- Source: 0.0.0.0/0, Protocol: TCP, Port: ELB Listener(HTTP, HTTPS, TCP, SSL)

1b. If Internal ELB
- Source: VPC CIDR, Protocol: TCP, Port: ELB Listener (HTTP, HTTPS, TCP, SSL)

2. Allow Outbound :
- Destination: EC2 Registered Instances SG, Protocol: TCP, Port: Health Check

3. Allow Inbound:
- Source: ELB SG, Protocol:TCP, Port:EC2 Listener/healthcheck

4. Allow Outbound:
- Destination: ELB SG, Protocol: TCP, Port: Ephemeral
=======================================
###### ###### v10

Internet-Facing ELB – NACL settings

> These settings are needed if the ELB subnet is associated with a non-default NACL
- For default NACLS, everything is allowed inbound and outbound

> The NACL settings focus primarily on ELB settings and response traffic
- You need to make sure that the EC2 instance subnet NACL has any additional rules required for any other inbound or outbound communication aside from the specified rules for ELB

> ELB subnet in this case is a public subnet

> For internal ELB, replace the 0.0.0.0/0 in the NACL settings with VPC CIDR in all rules ( inbound and outbound)
- ELB subnet is a private subnet in Internal ELB architecture
=======================================
###### ###### v11

## ELB - Listeners
> Both frontend and backend listeners can listen on ports 1-65535

> The ELB supports 
1. Layer-4 TCP/SSL listeners for both frontend and backend 
2. Layer 7 HTTP/HTTPS listeners for both frontend and backend

##### 1. ELB L4 /TCP Listeners ####
> When TCP (layer 4) listeners are used for front-end and back-end connections, the ELB forwards the request to the EC2 registered, back-end, instances without modifying the headers.

> When the ELB receives the request, it tries to open a TCP connection to the EC2 backend instance on the port specified in the listener configuration.

> Because of this interception, EC2 instance logs would show ELB IP address as the source IP at the EC2 instance received packets

> Enable proxy protocol on the ELB to force the ELB to carry the connection request details(Actual user source IP, source Port...etc) with the request sent to the EC2 instance

### 2. ELB – L7 HTTP/HTTPS Listeners ### v12

> To use an HTTPS listener, the ELB must have a X.509 SSL/TLS server certificate, which will be used to terminate the Client to ELB HTTPS connection.

> Using this certificate the ELB will terminate then decrypt the client session on the ELB itself before sending the request to the Backend EC2 Instances.
- This is called SSL Termination (Offloading)

> The certificate can be generated using AWS Certificate Manager (ACM) or you can upload your own to IAM

> If you do not want this, you can deploy TCP for front-end and back-end listeners, and deploy Certificates on the backend EC2 instances to terminate the encrypted sessions (basically SSL will be end to end, not decrypted by the ELB)

## ELB – HTTP/HTTPS Listeners
> When using HTTP/S for front end listeners, the ELB terminates the session, carries the headers in the request, and then sends the request to the EC2, back-end, Instances

> Since the ELB intercepts the request, and in order for the backend EC2 instances to find the actual source information (original headers),

> You can use HTTP "X-Forwarded-For" header for the request sent from the ELB to the backend instances (EC2 instances APPS need to read the X-Forwarded-for header)

> To ensure that backend instances are available to receive the HTTP/S tequest(s), the ELB establishes one or more TCP connections to each backend instance
=======================================
###### ###### v16
16_ELB & Sticky Sessions (Session Affinity)


> Use CONNECTION DRAINING:
- This enables the LB to complete in-flight requests made to instances that are de-registering or unhealthy. 
- When you enable it, you can specify a maximum time for the LB to keep connections alive before reporting the instance as de-registered. 
- The maximum timeout value can be set between 1 and 3,600 seconds (the default is 300 seconds). 
- When the maximum time limit is reached, the LB forcibly closes connections to the de-registering instance.


> STICKY SESSIONS feature is mainly used to ensure that all requests from the user during the session are sent to the same instance.
- Sticky session feature of the CLB provide session management, 
- its has LIMITATIONS such as :
- in case of a failure, you are likely to lose the sessions that were resident on the failed node. 
- it’s possible that the traffic may be unequally spread across the web servers as active sessions may exist on particular servers. 
- If not mitigated properly, this can hinder the scalability of app. 
=======================================
###### ###### v
17_ELB Security policy for SSLHTTPS sessions

## ELB – Security Policy for SSL/HT°
SSL Session Negotiation
> ELB uses SSL negotiation configuration, known as a security policy, to negotiate SSL connections between a client and the load balancer.

> The "Security Policy includes the encryption protocol version, Ciphers to be used...etc

> For Front end (Client to ELB) [HTTPS/SSL]
- You can define your custom security policy or use the ELB pre-defined security policies

> For backend, encrypted, connections
- Pre-defined security policies are always used

## ELB – Security Policy Components
1. SSL protocols
- SSL or TLS, are cryptographic protocols

2. SSL Ciphers ( a set of ciphers is called a cipher suite)
> Encryption algorithms
> SSL can use different ciphers to encrypt data

3. Server Order Preference
> If enabled, the first match in the ELB cipher list with the Client list is used
> By default, the default security policies have Server Order Preference enabled

## ELB – SSL/ȚLS version support
> The ELB supports TLS 1.0, TLS 1.1, TLS 1.2, SSL 3.0
- It does not support TLS 1.3 or 2.0

## ELB – Security Policy Components
> AWS ACM certificates include an RSA public key
- If you want to use AWS ACM X.509 certificates, you need to include a set of ciphers that support RSA in your security policy, else, the TLS connection will fail

> If you do not specify otherwise, AWS Elastic Load Balancing service will configure your ELB with the current/latest pre-defined security policy
=======================================
###### ###### v
18. SSLHTTPS authentication - Client and Server Certificates
=======================================
###### ###### v
19. ELB Connection Draining
=======================================
########### ELB Monitoring ############ v20

> ELB monitoring can be achieved by:

1. AWS CloudWatch:
> ELB service sends ELB metrics to cloudwatch every “1 minute"
- ELB sends these metrics only if requests flow through ELB
> AWS CloudWatch can be used to trigger an SNS notification if  threshold reached

2. Access Logs:
> Disabled by default
> You can obtain request information such as requester, time of request, requester IP, request type...etc.
> ELB provides access logs that capture detailed information about requests sent to your load balancer. 
- Each log contains information such as the time the request was received, the client's IP address, latencies, request paths, and server responses. 
- You can use these access logs to analyze traffic patterns and troubleshoot issues.

> access logs can be store in S3 bucket

> You are not extra charged for enabling access logs,
- You pay for S3 storage
- You are not charged for data transfer of access logs from ELB'to the S3 bucket

3. AWS CloudTrail:
> You can use it to capture all API calls for ELB
> You can store these logs in an S3 bucket that you specify
=======================================
###### ###### v
21. ELB Pre-Warming & Scaling

## ELB – Pre-Warming
ELB Scaling:
> The time required for the ELB to detect the increase in traffic/load and scale (or add) more ELB nodes can take from 1 to 7 minutes according to traffic profile
- ELB is not designed to queue requests,
- It will return Error 503 (HTTP) if it can't handle the request, any requests above the ELB capacity will fail

> ELB service can sçale and keep up with traffic increase, if you traffic increases at 50% in step or linear form every 5 minutes

ELB Pre-Warm:

## ELB Scaling & DNS updates
> When the ELB scales (spins more ELB nodes with new Public IP addresses),
- It updated the ELB's DNS record with the new list of ELB node Public IP addresses (for internet facing ELB)
- ELB uses a DNS record TTL of 60 seconds, to ensure that the new ELB node IP addresses are used and allow clients to take advantage of the increased capacity

## ELB Scaling & Load Testing your Applications
> For efficient load testing of ELB or applications hosted on backend instances
- Use multiple testing instances of client testing & try to launch the tests at the same time
- You can also use global testing sites if possible

> If using a single client for testing, ensure your testing tool will enforce the Re- resolving of DNS with each testing/request initiated for testing

> This will ensure that as ELB service launches new ELB nodes, the new nodes will be leveraged through DNS re-resolution

## ELB – Connection timeout
> By default, ELB has an idle connection timeout of 60 seconds
Go Sec Set the idle time out of your applications (those launched on registered EC2 back end instances) to at least 60 seconds
=======================================
###### ###### v
22. Testing you ELB scaling (or applications servers by ELB)