######### Auto Scaling (AS) #########

> It is an AWS feature that allows AWS compute (EC2 instances fleet) to grow or shrink depending on workload requirements

> Enable elasticity by scaling horizontally 

> Auto scaling ensures that we have the right number of AWS EC2 instances for our needs at all times

> Auto Scaling helps you save cost by cutting down the number of EC2 instances when not needed, and scaling out to add more instances only when it is required
=====================================
############ COMPONENTS #############

Auto Scaling components:
1. Launch Configuration
2. AS Group(ASG)
3. Scaling Policy (Plan)


######## 1. LAUNCH CONFIGURATION ####

> It is the configuration template used to create new EC2 instances for the ASG. 
- It include IAM role to associate with created instances

> It defines parameters like:
- Instance family, instance type, AMI, Key pair, Block devices, and SG 

> Can be created from AWS Console or CLI

> We can create a launch configuration from scratch, or
- we can use existing/running EC2 instance to create the launch configuration
- This is provided that the AMI used to launch this instance does still exist on AWS

- EC2 instance tags, and any additional block store volumes created after the instance launch will not be taken into account

> launch configurations CANNOT MODIFY
- you have to create a ñew one, make the required changes, and use that with your ASG
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##### 2. AS GROUP #############

> It is a logical grouping of EC2 instances. 
- It is a collection of EC2 instances managed by an AutoScaling Policy

> An ASG can have a minimum, maximum, and desired capacity of EC2 instances, subnet, health check period

> Can be edited after it is created
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##### 3. Scaling Policy (Plan) 
> Determines when/if and how the ASG scales or shrinks ( On-demand/Dynamic scaling, Cyclic/Scheduled scaling)

> metric type, target value
=======================================
######## Auto Scaling features ######## v3

> AS can be configured from Console, CLI, SDKS, and APIS

> Auto Scaling can span Multi-AZs WITHIN THE SAME AWS REGION. Hence, it can be used to create Fault Tolerant designs on AWS
- Auto Scaling CANNOT SPAN ACROSS MULTIPLE REGIONS

> Cost: There is NO ADDITIONAL COST for launching AS Groups. You pay for what you use of EC2 instances

> IT WORKS WELL WITH AWS ELB, CLOUD WATCH, AND CLOUD TRAIL

> AS is compliant with PCI DSS

> You can determine which subnets will AS Groups use to launch new instances in each AZ 

> Auto Scaling service ALWAYS TRIES TO DISTRIBUTE EC2 INSTANCES EVENLY ACROSS AZs where it is enabled
- If Auto Scaling fails to launch instances in an AZ (for AZ failure or capacity unavailability..etc), it will try in the other AZs defined for this AS Group until it succeeds
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##### AS - AZ Rebalance ####### v4

> If AS finds that the number of EC2 instances launched by an ASG into subject AZ IS NOT BALANCED (EC2 instances are not evenly distributed across AZs), AS WILL INITIATE A RE-BALANCING ACTIVITY

- The target of the activity would be to reach an even distribution of instances bet AZs
- AS does that by launching new EC2 instances in the AZs that have less EC2 instances first, then terminating Ec2 instances from the AZs that had more EC2 instances
- This would help avoid impact on current performance while AZ Rebalance is going on

## WHAT CAN CAUSE IMBALANCE OF EC2 INSTANCES ?

> You manually change the AZ where your AS is in effect (adding or removing AZs)
> Manually requesting termination of EC2 instances from ASG
> An AZ that did not have enough EC2 capacity, now has enough capacity and it is one of your ASG Azs

> An AZ with Spot instances market price meeting your bid price
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## Attaching a Running EC2 instance ## v5

> Using AWS console or CLI, we can attach running EC2 instance to ASG, if the below conditions are met

- Instance is in running state (not stopped or terminated)
- AMI USED TO LAUNCH THE INSTANCE STILL EXISTS
- Instance is not part of another ASG
- Instance is in the same AZ of the ASG

> If the existing EC2 instances under the ASG, plus the one to be added, exceed the maximum capacity of the ASG, then request will fail, EC2 instance won't be added
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
### Adding an ELB to the ASG ## v6
> You can attach one or more (classic) ELB to existing AS Group
- The ELB must be in the same region as the ASG

> Instance and the ELB must be in the same VPC

> Once we add ELB to ASG, any EC2 instance existing or added or deleted by the AS Group will be AUTOMATICALLY REGISTERED/DEREGISTER with those ELB

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
### ASG – Health Checks(HC) ### v7

> BY DEFAULT, AS USES EC2 STATUS CHECKS ONLY TO DETERMINE THE HEALTH STATUS OF AN EC2 INSTANCE

> When we have one or more ELB defined with AS Group, we can configure AS to use "both" the EC2 HC and ELB HC to determine the Instances health status

## GRACE PERIOD:
> It is the time AS waits from the time an Instance comes into service (become In-Service) before checking its health status
- By default is 300 seconds
- A value of "zero" means no grace period and the instance health is checked once it is In-service

> Until the Grace Period timer expires, any unhealthy status reported by EC2 status checks, or ELB attached to AS Group, will not be acted upon.

> After Grace Period expires, AS would consider an Instancę unhealthy in any of the following cases:
- EC2 Status checks report to AS an instance status other than running
- If the instance status is impaired due to a host Hardware or Software Problem

• If ELB HC are configured to be used by the Auto Scaling, then if the ELB reports the Instance as "Out-of-Service"
- If you have multiple ELB attached to the AS Group, if any of them reports the EC2 instance status as "Out-of-Service".

> One source reporting the instance as unhealthy is enough for Auto Scaling to mark it for replacement

## ASG – Unhealthy Instance Termination
> Once Auto Scaling identifies an instance as unhealthy, it gets scheduled for termination
- The instance will never recover its health again automatically

> During a very short time period, you can use the AWS Command (as-set-instance-health) to set the instance health back to healthy
- If the Auto Scaling started terminating the Instance, you will get an error if you try to apply this command

> Unlike AZ Rebalancing, termination of unhealthy instances happens first, then Auto Scaling attempts to launch new instances to replace the ones terminated

> Elastic IP and EBS volumes gets detached from the terminated instances, you need to manually attach them to the new instances
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#### AS with Spot-Instance #### v8

>> We can choose to use Spot-instances in our launch configuration and specify our bid price
- If we want to change the bid price, we have to create a new launch configuration
- We CAN NOT MIX AND MATCH ON-DEMAND WITH SPOT INSTANCES IN AS LAUNCH CONFIGURATION

> If AS tries to launch spot-instances in AZ unsuccessfully because of the market price, it will try in another AZ, if its market price drops below bid price
- If the original AZ spot market price drops below the bid price, then the Auto scaling process will try to rebalance between the two AZs

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
###### AS and SNS Notifications ####
> we can configure AS to send SNS email notification whenever:
- Instance is launched or fails to launch
- Instance is Terminated or fails to terminate

## Merging of ASGs
> Can only be done from the CLI (not AWS Console)
> You can merge multiple, single AZ, ASGs into a single, one Multi-AZ ASG

> To do this:
- Re-zone one of the groups to cover/span the other AZs for the other ASGs
- Delete the other ASGs

> This can be used in merging ASGs with/without ELB attached to them
> The resulting ASG must be one of the pre-existing ASG, not a new one
=======================================
###### AS Policy Scaling actions ###### v11

1. Scale-Out :
- It is the process in which more EC2 instances are launched by the scaling policy

2. Scale-In
- It is the process in which EC2 instances are terminated by the scaling policy

> It is always recommended to create a scale-in event for each scale-out event you create

#############################

> With the DEFAULT TERMINATION POLICY, the behavior of the ASG is as follows:

1. If there are instances in multi-AZ, choose the AZ with the most instances and at least one instance that is not protected from scale in. 
- If there is more than one AZ with this number of instances, choose the AZ with the instances that use the OLDEST launch configuration.

2. Determine which unprotected instances in the selected AZ use the oldest launch configuration. If there is one such instance, terminate it.

3. If there are multiple instances to terminate based on the above criteria, determine which unprotected instances are closest to the next billing hour. (This helps you maximize the use of your EC2 instances and manage your Amazon EC2 usage costs.) If there is one such instance, terminate it.

4. If there is more than one unprotected instance closest to the next billing hour, choose one of these instances at random.
The following flow diagram illustrates how the default termination policy works:
=======================================
######## ASG - SCALING POLICIES ####### v11

1. Manual Scaling
- Maintain a current number of instances all the time
- Manually change ASG's min/desired/max, attach/detach instances

2. Cyclic (schedule based) scaling
- Predictable load change

3. On-demand/Dynamic (Event based) scaling
- Scaling in response to an event/alarm

> An ASG can have multiple policies attached to it at any time
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#### 2. ASG – Schedule/Cyclic Scaling #### v11
> Use for predictable load change (increase or decrease)

> You need to configure a scheduled action(s) for a scale out at a specified date/time and to a required capacity

> You can configure this action to happen once or at a recurring schedule

> A scheduled action must have a unique date/time,
- You CAN NOT CONFIGURE TWO SCHEDULED ACTIVITIES at the same date/time

> You can update/edit a scheduled action after you have created it
> You can use AWS console or CLI for this
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#### 3. ASG – DYNAMIC/ON-DEMAND SCALING ### v12
> On-Demand SCALING OUT/IN, IN RESPONSE TO AN ALARM (demand)

> An alarm is an object that watches over a single metric (CPU utilization, mémory, network in/out.etc)

> You NEED TO HAVE SCALE-OUT AND SCALE-IN POLICY CONFIGURED, which will instruct Auto Scaling what to do (Scale out/in) in response to Alarms 
> You can use Cloud Watch to monitor and generate the Alarms
---------------------------------
## 3a. DYNAMIC/ON-DEMAND – SIMPLE SCALING Policy
> Single adjustment (up or down) in response to an alarm
> Waits for a cool down timer to expire before responding to more alarms

##COOL DOWN PERIOD:
> It is the period of time AS waits after a scaling activity (launching a new instance or terminating one instance) until the effect of the scaling activity becomes visible
- It ensures that the ASG does not launch or terminate additional EC2 instances before the previous scaling activity takes effect.
- Default is 300 seconds, the time during which ASG will not respond to any additional alarms
- It is not supported for scheduled scaling or step on-demand scaling
---------------------------------
## 3b. DYNAMIC/ON-DEMAND - STEP SCALING Policy ## v13 

> Multiple steps/adjustments
> Does not support/wait for a cool down timer,
- Can respond to multiple alarms and initiate multiple scaling activities
- After a scaling activity is started, the policy continues to respond to additional alarms, even while a scaling activity is in progress. 

> Supports a warm-up timer
- The time it will take a newly launched instance to be ready and contribute to the watched metric

> We can define how scalable target should be scaled when a threshold is in breach for a specified no. of evaluation periods. 
- Step scaling policies increase or decrease the current capacity of a scalable target based on a set of scaling adjustments, known as step adjustments. 

## WARM-UP PERIOD:
> The period of time before which a newly created EC2 instance by ASG, using step scaling, is not considered/counted toward the ASG metrics

## On-Demand Scaling in General
> For Simple or Step scaling, a scaling adjustment can't change the capacity of the group above the maximum group size or below the minimum group size.
=======================================
###### ###### v14
lab
=======================================
###### ###### v15

## Monitoring Auto Scaling Groups

> AWS EC2 service sends EC2 metrics to cloud watch about the ASG instances
- Basic Monitoring (Every 5 minutes enabled by default – free of charge)
- You can enable detailed (every 1 minute – chargeable)

> When the launch configuration is done by AWS CLI, detailed monitoring for EC2 instances in enabled by default

> When enabled, Auto Scaling service sends to Cloud watch aggregate metries AS Group itself
- Every minute by default (once enabled),

## ASG Monitoring

> If you want to change the Instance monitoring from basic to detailed (using AWS Console), you have to create a new Launch configuration and use that for the AS Group
- newly launched Instances will then use the updated monitoring settings

> You have now two settings that need to match:
- AS policy alarm settings for cloud watch (Cloud Watch checking for CPU tilization)
- Ex. If CPU utilization is above 75% for one min, then scale-out

- The actual Cloud Watch metric monitoring frequency for the EC2 service itself (Cloud Watch receiving EC2 Status Checks from the EC2 service)
- EC2 CPU metrics are sent to Cloud Watch every 5 minutes (via EC2 status checks)

- The above two need to match or else, Cloud Watch alarm monitoring will do 4 reads and will not findany data, and with the 5th, it will find the EC2 metric information

## ASG Monitoring
Example:
> If the EC2 monitoring is set to default (basic or 5 min.), then set your ASG Alarm period to 300 seconds
> If the EC2 monitoring is detailed (1 min.), then set your ASG alarm to 60 seconds
> Avoid to have ASG alarm doing 60 seconds when the EC2 monitoring is set to basic