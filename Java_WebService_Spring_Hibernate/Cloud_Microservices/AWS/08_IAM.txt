=======================================
## AWS SECURITY, IDENTITY & COMPLIANCE SERVICES ##

## Identity Access and Management (IAM)
- Allows us to create and manage groups and users to grant them required permissions to perform day-to-day infra tasks.

#### Inspector
- Automated security assessment service to test the security state of applications hosted on EC2.

#### Certificate Manager
- Manages SSL/TLS certificates. 
- Also makes it easy to deploy them across various AWS services.

#### Directory Service
It is an AWS Directory service for Microsoft Active Directory. Makes it easy to deploy directory-aware workloads on AWS resources to use and manage AD in the AWS cloud.

#### AWS Web Application Firewall (WAF)
By configuring rules to allow, block, or just monitor web requests, protects web applications from external attack.

#### Shield
Managed service to protect web applications against DDoS attacks running on AWS.

#### AWS Single-Sign-on (SSO)

#### AWS Cognito 
> It provides authentication, authorization, and user management for web and mobile apps. 
- Your users can sign in directly with a user name and password, or through a third party such as Facebook, Amazon, or Google.

> The 2 main components of Amazon Cognito are user pools and identity pools. 
1. User pools are user directories that provide sign-up and sign-in options for your app users. 
2. Identity pools enable you to grant your users access to other AWS services. 
- You can use identity pools and user pools separately or together.

=======================================
###### AWS Account Identifiers ########

> AWS assigns two types of unique ID to each user's account:

1. AWS account ID
> It is a 12-digit number which can be used to construct Amazon Resource Names (ARNs)

2. Canonical user ID
>  It is 64-DIGIT HEXADECIMAL ENCODED a 256-bit number.
> It is USED in an Amazon S3 bucket policy FOR CROSS-ACCOUNT ACCESS means that AWS account can access the resources in another AWS account. 
- For example, if you want AWS account access to your bucket, you need to specify the canonical user ID to your bucket's policy.

=======================================
### Identity Access Management(IAM) ###

> It is USED TO MANAGE USERS AND THEIR LEVEL OF ACCESS to the aws console.
- It is used to set users, permissions and roles. It allows you to grant access to the different parts of the aws platform.

- With IAM, Organizations can centrally manage users, security credentials such as access keys, and permissions that control which AWS resources users can access.

> IAM enables the organization to create multiple users, each with its own security credentials, controlled and billed to a single aws account. 
- IAM allows the user to do only what they need to do as a part of the user's job.

> Without IAM, Org with multiple users must either create multiple user acc, 
- each with its own billing and subscriptions to AWS products or share an account with a single security credential. 
- Without IAM, you also don't have control about the tasks that the users can do.


===================================
######## Features of IAM ########## v2

1. Centralised control of your AWS account: 
- You can control creation, rotation, and cancellation of each user's security credentials. You can also control what data in the aws system users can access and how they can access.

2. Shared Access to your AWS account: 
- Users can share the resources for the collaborative projects.

3. Granular permissions: 
- It is used to set a permission that user can use a particular service but not other services.

4. Identity Federation: 
- An Identity Federation means that we can use Facebook, Active Directory, LinkedIn, etc with IAM. 
- Users can log in to the AWS Console with same username and password as we log in with the Active Directory, Facebook, etc.

5. Multifactor Authentication: 
- An AWS provides multifactor authentication as we need to enter the username, password, and security check code to log in to the AWS Management Console.

6. Permissions based on Organizational groups: 
- Users can be restricted to the AWS access based on their job duties, for example, admin, developer, etc.

7. Networking controls: 
- IAM also ensures that the users can access the AWS resources within the organization's corporate network.

8. Provide temporary access for users/devices and services where necessary: 
- If you are using a mobile app and storing the data in AWS account, you can do this only when you are using temporary access.

9. Integrates with many different aws services: IAM is integrated with many different aws services.

10. Supports PCI DSS Compliance: 
- PCI DSS (Payment Card Industry Data Security Standard) is a compliance framework. If you are taking credit card information, then you need to pay for compliance with the framework.

11. Eventually Consistent: 
- IAM SERVICE IS EVENTUALLY CONSISTENT as 
- it achieves high availability by replicating the data across multiple servers within the Amazon's data center around the world.

12. Free to use: AWS IAM is a feature of AWS account which is offered at no additional charge. You will be charged only when you access other AWS services by using IAM user.
=======================================
############# IAM ELEMENT ############# v3
> IAM infrastructure includes the following elements: 
1. Principal 
2. Request 
3. Authentication 
4. Authorisation 
5. Action
6. Resources

## PRINCIPAL
> A principle is an entity that can take an action on resource
> Our administrative IAM user is our 1st principle
> AWS principles can be IAM users, Roles, Federated user and app
> we can allow user and service to assume a role
> We can support federated user or programmatic access to allow an app to access AWS account

-----------------------------
## REQUEST
> When Principles send a request via console, CLI, SDK or APIs including the following:
- Actions (or operation) that the principal wants to perform
- Resource upon which the actions are performed
- Principal information including the environment from which the request was made like IP addr, date and time
-----------------------------
## REQUEST CONTEXT
> Before AWS can evaluate and authorize a request, AWS gathers below information:
- PRINCIPAL(the requester) : which is determined based on the authorisation data
- AGGREGATE PERMISSION : that are associated with that principle
- ENVIRONMENT DATA : such as the IP address useragent, SSL enabled status, or the time of day
- RESOURCE DATA : this include resource information such as dynamic DB table name, S3 bucket, or tag on an Amazon ec2 instance
-----------------------------
## AUTHENTICATION
> A principal sending a request must be authentication(sign in to AWS) to send the request to AWS services 
- some services like S3 allow requests from Anonymous users 

-----------------------------
## AUTHORIZATION
> To Authorize requests, IAM uses values from the request context to check for matching policies and determine whether to allow or deny the request.
- IAM policies are stored in IAM as JSON documents and specify the permissions that are allowed or denied

1. User-Based Policies: specify permissions allowed/denied for principals
2. Resource-based policies: specify permissions allowed/denied for resources

> IAM checks each policy that matches the context of your request.
- IF A SINGLE POLICY INCLUDES A DENIED ACTION, IAM DENIES THE ENTIRE REQUEST AND STOPS EVALUATING. THIS IS CALLED AN EXPLICIT DENY.
- REQUESTS ARE DENIED BY DEFAULT, thus, IAM authorizes your request only if every part of your request is allowed by the matching policies.

> The EVALUATION LOGIC follows these rules:
- By default, all requests are denied.
- An explicit allow overrides this default.
- An explicit deny overrides any allows.

Note
> By default, only the AWS account root user has access to all the resources in that account.
- So if you are not signed in as the root user, you must have permissions granted by a policy.
-------------------------------
## IAM Elements - ACTIONS ## v4
> Actions are defined by a service, and are the things that you can do to a resource, such as viewing, creating, editing, and deleting that resource.

> Any actions or resources that are not explicitly allowed are denied by default.

> After your request has been authenticated and authorized, AWS approves the actions in your request.

> IAM supported actions for a user resource include,
- CreateUser, DeleteUser, GetUser, UpdateUser

> To allow a principal to perform an action, you must include the necessary actions in a policy that applies to the principal or the affected resource.
-----------------------------
## IAM Elements - RESOURCES ## v4
> A resource is an entity that exists within a service.
- Examples are, EC2 instances, S3 bucket, IAM user, DynamoDB table
- Each AWS service defines a set of actions that can be performed on each resource.

> After AWS approves the actions in your request, those actions can be performed on the related resources within your account.

> If you create a request to perform an unrelated action on a resource, that request is denied.
- For example, if you request to deleteÃ¡n IAM role)but provide an IAM group resource, the request fails.

> When you provide permissions using an identity-based policy in IAM, then you provide permissions to access resources only within the same account.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
########## IDENTITY FEDERATE ##

1. we can federate, corporate authenticated users identity into AWS 
- Corporate can replace their existing identity with a temporary identity in ur AWS acct.

## It is useful in below cases:

1. when users already identified in a corporate directory.
- if corporate directory is compatible with Security Assertion Markup lang(2.0)
- you can configure ur corporate directory to provide SSO access to the AWS.

> if you corporate directory is not compatible with SAML2.0 
- we can create identity broker app to provide SSO access to the AWS console for ur user.

 
=======================================
########### IAM Identities ############ v6

> IAM Identities (Users, Groups, and Roles)
> it is identity that we create under AWS account to provide authentication for people, applications, and processes in your AWS account.

> Identities represent user/group/roles that can be authenticated and then authorized to perform actions in AWS.

> Each of these can be associated with one or more Policies to determine what actions a user, role, or member of a group can do with which AWS resources and under what conditions.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
########### IAM Users #########
> An IAM user is an entity that you create in AWS. 
- It represents the person or service who uses the IAM user to interact with AWS.
- An IAM USER CAN REPRESENT A PERSON OR AN APP that requires AWS access to perform actions on AWS resources

> A primary use for IAM users is to give people the ability to sign in to the AWS Management Console for interactive tasks and to make programmatic requests to AWS services using the API or CLI.

> For any user you can assign them:
- A username and password to access the AWS console
- An access key ID (Access key and Secret Key) that they can use for programmatic access (issuing requests) to your AWS resources

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
######## IAM Groups ###########
> An IAM GROUP IS A COLLECTION OF IAM USERS

> It is a way to assign permissions/policies to multiple users i.e. for a collection of users at once

- Any user in that group automatically has the permissions that are assigned to the group.
- If a new user joins your organization and should have administrator privileges, you can assign the appropriate permissions by adding the user to that group.
- If a person changes jobs in your organization, instead of editing that user's permissions, you can remove him or her from the old groups and add him or her to the appropriate new groups.

## IAM GROUPS - LIMITATIONS
> A group is not truly an "identity" in IAM because it cannot be identified as a Principal in a permission policy.

>> GROUPS CAN'T BE NESTED; THEY CAN CONTAIN ONLY USERS, NOT OTHER GROUPS.

> We have a limit of 300 Groups in an AWS account.

>> A USER CAN BE A MEMBER OF UP TO 10 IAM GROUPS 

> 1000 MAX ROLES IS ALLOWED IN IAM
> 5000 MAX USERS CAN BE CREATED IN A IAM ACCOUNT

> You can add up to 10 managed policies to an IAM user, role, or group. - The size of each managed policy cannot exceed 6,144 characters.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
######### IAM Roles ###########
> An IAM Role is very similar to a user, in that it is an identity with permission policies that determine what the identity can and cannot do in Aws.

> An IAM Role does not have any credentials (password or access keys) associated with it.

> Instead of being uniquely associated with one person, a role is intended to be assumable by anyone who needs it (and it authorized to use it).
- An IAM user can assume a role to temporarily take on different permissions for a specific task.
- An IAM Role can be assigned to a Federated user who signs in by using an external identity provider instead of IAM.
- AWS uses details passed by the identity provider to determine which role is mapped to the federated user.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## IAM Temporary Credentials:
> Temporary credentials are primarily used with IAM roles, but there are also other uses.
- You can request temporary credentials that have a more restricted set of permissions than your standard IAM user.
- This prevents you from accidentally performing tasks that are not permitted by the more restricted credentials.

> A benefit of temporary credentials is that they expire automatically after a set period of time.
- You have control over the duration that the credentials are valid.


=======================================
####### IAM â Access Management ####### v7

## PERMISSIONS AND POLICIES
> The access management portion of IAM helps to define what a user or other entity is allowed to do in an account, often referred to as authorization.

> Permissions are granted through policies that are created and then attached to users, groups, or roles.

#Policies and Users
> IAM User are global entities i.e not region specific
> By default, IAM users can't access anything in your account.

> You grant permissions to a user by creating a policy. 
>> POLICY IS A DOCUMENT (JSON) THAT DEFINES THE EFFECT, ACTIONS, RESOURCES, AND OPTIONAL CONDITIONS.

> ANY ACTIONS OR RESOURCES THAT ARE NOT EXPLICITLY ALLOWED ARE DENIED BY DEFAULT.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## 1. IAM â USER-BASED POLICIES 

> The following example shows a policy that grants permission to Perform Amazon DynamoDB actions (dynamodb:*) on the Books table in the account 123456789012 within the us-east-2 region.
{
  "Version": "2012-10-17",
  "Statement": {
    "Effect": "Allow",
    "Action": "dynamodb:*",
    "Resource": "arn:aws:dynamodb:us-eÃ¡st-2:123456789012:table/Books"
  }
}
> When you attach this policy to a user, group, or role, then the IAM entity has those DynamoDB permission

> Typically, users in your account have multiple policies that together represent the permissions for that user.

> For example, if the previous policy is the only policy attached to a user, then that user is allowed to perform DynamoDB actions on the Books table only.
- Actions on all other tables are prohibited. 
- Similarly, the user is not allowed to perform any actions in Amazon EC2, Amazon S3, or in any other AWS service, because permissions to work with those services are not included in the policy.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## 2. IAM â RESOURCE BASED POLICIES 

> In some cases (Like S3 buckets), you can attach a policy to a resource in addition to attaching it to a user or group. This is called a resource-based policy

> A resource-based policy contains slightly different information than a user-based policy.
- In resource-based policy, you SPECIFY WHAT ACTIONS ARE PERMITTED AND WHAT RESOURCE IS AFFECTED.
- You also EXPLICITLY LIST WHO IS ALLOWED ACCESS TO THE RESOURCE (a Principal)

>> Resource-based-policy include a principal element that specifies who is granted with the permission
- It is not specified in User-Based-policy
- In a user-based policy, the "who" is established by whomever the policy is attached to.

EXAMPLE: 
An S3 bucket policy that allows an IAM user named bob in AWS account 777788889999 to put objects into the bucket called example-bucket. The Principal element is set to the Amazon Resource Name (ARN) of the IAM user bob. This indicates that the resource (in this case, the S3 bucket) is accessible to that ÃAM user but no one else.)
{
"Version": "2012-10-17",
 "Statement": {
   "Effect": "Allow",
   "Principal": {"AWS": "arg:aws:iam::777788889999:user/bob"},
   "Action": [
      "s3:PutObject",
      "s3:PutObjectAcl"
    ],
	"Resource": "arn:aws:s3:::example-bucket/*"
  }
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## IAM â MULTIPLE POLICIES

> Users or groups can have multiple policies attached to them that grant different permissions.
- In the case of multiple policies attached to a user (or a group)
- The users' permissions are calculated based on the combination of policies.
- The basic principle still applies: If the user has not been granted an explicit permission for an action and a resource, the user does not have those permissions.

## FEDERATED USERS AND ROLES
> Federated users don't have permanent identities in your AWS account the way that IAM users do.

> To assign permissions to federated users, you can create an entity referred to as a role and define permissions for the role.

> When a federated user signs in to AWS, the user is associated with the role and is granted the permissions that are defined in the role.
=======================================
#### IAM Policies â- Creating one ##### v4
> We can create new IAM policy in console using following methods:

## 1. Import 
â You can import a managed policy within your account and then edit the policy to customize it to your specific requirements.
- A managed policy can be an AWS managed policy, or a customer managed policy that you created previously.

## 2. Visual editor 
- You can construct a new policy from scratch in the visual editor. If you use the visual editor, you do not have to understand JSON syntax.

## 3. JSON 
â In the JSON tab, you can create a policy using JSON syntax.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#### IAM CROSS-ACCOUNT ACCESS #### v4
> IDENTITY-BASED POLICIES IS NOT THE WAY TO PROVIDE CROSS-ACCOUNT ACCESS

> If you need to make a request in a different account (Account B),

1. The resource in that account must have attached "resource-based policy" that allows access 

2. must assume a role (Identity-based-policy) within that account with the permissions that you need.

- This role will be created by the other account to allow you required access
- The IAM user (you as the requester interested to access the resource in the other account) will make an API call to assume that role in the other AWS account (Account B)
=======================================
######### v8 
=======================================
#### Users and Credentials #### v9
> You can access AWS in different ways depending on the user credentials:

1. Console Password:
- A password that the user can type to sign in to interactive sessions such as the AWS Management Console.

2. Access Keys:
- A combination of an access key ID and a secret access key.
- You can assign two to a user at a time.
- These can be used to make programmatic calls to AWS when using the APl in program code or at a command prompt when using the AWS CLI or the AWS PowerShell tools.

3. Server Certificates:
-SSL/TLS certificates that you can use to authenticate with some AWS services.

## IAM
> Create credentials for the user,depending on the type of access the user requires:

# Programmatic access:
-The IAM user might need to make APl calls or use the AWS CLI or the Tools for Windows PowerShell.
- In that case,create an access key (an access key ID and a secret access key)for that user.

# AWS Management Console access
-If the user needs to access AWS resources from the AWS Management Console, Create a password for the user.

> As a best practice,do not create credential of a certain types for a user who will never need that kind of access

## IAM Users - Password Management
You can
- Allow all IAM users in the account to change their own password
- Allow only a selected IAM users to change their own password
â¢ FÃ¶r this case, Disable the option for all users to change their own passwords and you use an lAM policy to grant permissions to only some users to change their own passwords and optionally other credentials like their own access keys.

## IAM Users-Access Keys
> Users need their own access keys to make programmatic calls to AWS from the HTTPS API, CLI,SKDs,Toosl for Windows PowerShell

> You can create,modify,view,or rotate access keys(access key IDs and secret access keys)for IAM users.

> When you create an access key,IAM returns the access key ID and secret access key.

> You should save these in a secure location and give them to the user.
- To ensure the security of your AWS account,the secret access key is accessible only at the time you create .

-If a secret access key is lost,you must delete the access key for the associated user and create a new key.

> By default, when you create an access key, its status is Active, which means the user can use the access key for AWS CLI, Tools for Windows PowerShell, and API calls.

> Each user can have two active access keys, which is useful when you must rotate the user's access keys.

> You can give your users permission to list, rotate, and manage their own keys
- This is done through an IAM policy, not from Console menus like Passwords

> You can disable a user's access key, which means it can't be used for API calls.
- You might do this while you're rotating keys or to revoke API access for a user.

> You can delete an access key at any time. However, when you delete an access key, it's gone forever and cannot be retrieved. (You can always create new keys.)
=======================================
##### v10

## IAM Roles
> An IAM Role, is a set of permissions that grant access to actions and resources in AWs.
- These permissions are attached to the role, not to an IAM user or group.
- instead of being uniquely associated with one person, a role is intended to be assumable by anyone who needs it.

> A role does not have standard long-term credentials assaciated with it.
- Instead, if a user assumes a role, Temporary Security Credentials are created dynamically and provided to the user.

> Roles can be assumed/used by any of the following:
- An IAM user can be in same AWS account or different as the role
- An external user authenticated by an external identity provider(IdP) service that is compatible with SAML 2.0 or OpenID Connect(OIDC), or a custom-built identity broker. 

## IAM - Assuming/Using a Role

> There are two ways to assume/use a role:
1. Interactively in the IAM console:
> IAM users in your account using the IAM console can switch to a role to temporarily use the permissions of the role in the console.
> The users give up their original permissions and take on the permissions assigned to the role.
> When the users exit the role, their original permissions are restored.

2. Programmatically with the AWS CLI, Tools for Windows PowerShell, or API.
> An application or a service offered by AWSS (like Amazon EC2) can assume a role by requesting temporary security credentials for a role with which to make programmatic requests to AWs.

> You use a role this way so that you don't have to share or maintain long-term security credential(for example, by creating an IAM user) for each entity that requires access to a resource. 

## IAM Role Delegation
> A user who assumes a role temporarily gives up his or her own permissions and instead takes on the permissions of the role.
- When the user exits, or stops using the role, the original user permissions are restored.

## IAM Role and Resource Based Policies
> How do IAM Roles differ from Resource-based Policies
- Unlike a user-based policy, a resource-based policy specifies who (in the form of a list of AWS account ID numbers) can access that resource.

> Cross-account access with a resource-based policy has an advantage over a role.
- With a resource that is accessed through a resource-based policy, the user still works in the trusted account and does not have to give up his or her user permissions in place of the role permissions.
â¢ In other words, the user continues to have access to resources in the trusted account at the same time as he or she has access to the resource in the trusting account.
â¢ This is useful for tasks such as copying information to or from the shared resource in the other account. 

> The disadvantage is that not all services support resource-based policies. 
=======================================
######### v11

## IAM Role â Service Roles
#Creating a Role to Delegate Permissions to an AWS Service
> Many AWS services require that you use roles to control what that service can access.
 
#### AWS SERVICE ROLE
> IT IS A ROLE THAT A SERVICE ASSUMES TO PERFORM ACTIONS ON YOUR BEHALF.
> When you set up most AWS service environments, you must define a role for the service to assume.
> This service role must include all the permissions required for the service to access the AWS resources that it needs.
> Service roles vary from service to service, but many allow you to choose your permissions, as long as you meet the documented requirements for that seryice.
> you can create, modify, and delete a service role from within IAM.

## IAM Service Roles for EC2 instances
#Using an IAM Role to Grant Permissions to Applications Running on Amazon EC2 Instances
> Applications that run on an EC2 instance must include AWS credentials in their AWS API requests.
> You could have your developers store AWS credentials directly within the EC2 instance and allow applications in that instance to use those credentials.
- Cons:
â¢ Developers would then have to manage the credentials and ensure that they securely pass the credentials to each instance and update each EC2 instance when it's time to rotate the credentials.-

- Alternative:
â¢ You can and should use an IAM role to manage temporary credentials for applications that run on an EC2 instance.
- When you use a role, you don't have to distribute long-term credential(such as a user name and password or access keys) to an EC2 instance. 
- The role would, instead, supply temporary permission that application can use when they make calls to other AWS resources. 


## IAM Role for EC2 instances
> Roles don't have their own permanent set of credentials the way IAM users do.
> When you launch an EC2 instance, you can specify a role for the instance as a launch parameter.
- Applications that run on the EC2 instance can use the role's credentials when they access AWS resources.
> The role's permissions determine what the application is allowed to do.

> In case of Amazon EC2, AWS IAM automatically provides temporary security credentials that are attached to the role and then makes them available for the EC2 instance to use on behalf of its applications._

> The temporary security credentials that are available on the instance are automatically rotated for you, by AWS, before they expire so that a valid set is always available. 
- AWS makes new credential available at least 5min before the expiration of the old credential.

> For cases other than AWS EC2 roles, you need to request the temporary credentials first. 

## IAM Roles â Instance Profiles
Using an IAM Role to Grant Permissions to Applications Running on Amazon EC2 Instances
> Using roles to grant permissions to applications that run on EC2 instances requires a bit of extra configuration.

#Instance Profiles:
> Is required to assign an AwS role and its associated permissions to an EC2 instance, and to make them available to applications running on the EC2 instance

> The instance profile contains the role and can provide the role's temporary credentials to an application that runs on the instance.

> Note that only one role can be assigned to an EC2 instance at a time, and all applications on the instance share the same role and permissions.

## IAM Roles â EC2 instance Profile

> If you use the IAM console, the instance profile is managed for you and is mostly transparent to you.

> If you use the AWS CLI or API to create and manage the role and EC2 instance,
- Then you must create the instance profile and assign the role to it as separate steps.
- When you launch the instance, you must specify the instance profile name instead of the role name.

> Using roles in this way has several benefits.
- You don't have to manage credentials, and you don't have to worry about lang-term security risks, Because role credentials are temporary and rotated automatically.
- If you use a single role for multiple instances, you can make a change to that one role and the change is propagated automatically to all the instances.

> Although a role is usually assigned to an EC2 instance when you launch it, a role can also be attached to an EC2 instance that is already running.

## Review Topic : AWS IAM
#How the EC2 applications access the Temporary Credentials

The applications on the EC2 instance can access the temporary security credentials required to make API calls from the metadata, under the IAM/Security-Credentials/Role-name

- This also includes information about the expiry of the respective temporary security credentials
- Example, if you have a Role named ec2role, the role temporary security credentials can be read
via
curl http://169.254.169.254/latest/meta-data/iam/security-credÃªntias/ec2role

> If the application gets temporary security credentials from the instance metadata and has cached them, it should get a refreshed set of credentials every hour, or at least 15 minutes before the current set expires.
=======================================
######## Directory Service ############

=======================================
##### AWS Single Sign on (AWS SSO) ####
> For additional security, AWS sso with two-step verification can be enabled.
- After two-step verification is enabled, post login with authorized email password, users are prompted for additional verification code which they receive on their registered email address.

> WITH CONTEXT-AWARE 2-step verification, AWS SSO analyzes user sign-in context such as browser, location, and devices.
- If any deviation is observed, only then it asks for the additional second level of verification code.
- with this, a user does not have to perform two-step verification repeatedly from the same device

> WITH ALWAYS-ON 2-step verification, each time the user logs in to any cloud application, it would prompt for two-step verification code.
- This is true even if the user logs in from the same device

=======================================
############ AWS Cognito ##############


## Feature 
> Enhanced Security
> Cross platform consistency 
> Guest & Social Media Logins
> MFA and Password Policies
> Marketing Analytics


> Amazon Cognito Identity Pools can support unauthenticated identities by providing a unique identifier and AWS credentials for users who do not authenticate with an identity provider. 
- Unauthenticated users can be associated with a role that has limited access to resources as compared to a role for authenticated users.


> OpenID Connect (OIDC) identity providers (IdPs) (like Salesforce or Ping Identity) are supported in Cognito, along with social and SAML based identity providers. 
- You can add an OIDC IdP to your user pool in the AWS Management Console, with the AWS CLI, or by using the user pool API method CreateIdentityProvider.

> Sign-in through a third party (federation) is available in Amazon Cognito user pools. This feature is independent of the federation through Amazon Cognito identity pools (federated identities).

> Cognitio supports more than just social identity providers, including OIDC, SAML, and its own identity pools