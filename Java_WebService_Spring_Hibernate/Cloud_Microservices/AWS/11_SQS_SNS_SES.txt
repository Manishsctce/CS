=======================================
####### AWS INTEGRATION SERVICES ######

## AWS SQS (Simple Queue Service)
## AWS SNS (Simple Notification Service)
## AWS SES (Simple Email Service) 
## AWS SWF (Simple Workflow Service)
=======================================
############## AWS SQS ################

> SQS is a fast, reliable, fully managed message queue service
- It is a web service that gives you access to message queues that store messages waiting to be processed

> It ALLOWS DECOUPLING OF APP COMPONENTS such that a failure in one components does not cause a bigger problem to app functionality (like in coupled app)
> Using SQS, we no longer need a highly available message cluster or the burden of building/running it
> SQS enable to decouple and scale microservice, distributed system and serverless application. SQS move data between distributed application component and helps you to decouple these components.

> SQS uses pull based (polling) not push based.
> Messages are 256KB in size
> we can delete all messages in an SQS queue without deleting the SQS queue itself
> we can use app on EC2 instances to read and process the SQS queue messages
> we can USE AUTO SCALING TO SCALE THE EC2 FLEET PROCESSING THE SQS MESSAGES, AS THE QUEUE SIZE INCREASES
> These apps on EC2 instances can process the SQS messages/jobs then post the results to other SQS queues or other AWS services

> SQS support both standard and FIFO queue

> Amazon SQS automatically delete messages that have been in queue for more than maximum messages retention period 
- THE DEFAULT MESSAGE RETENTION PERIOD IS 4 DAYS
- We can set the message retention period to value from 60 second to 1,209,600 seconds (14 days) using the SetQueueAttributes action

> If a job is not processed within the visibility timeout the message will become visible again (could be delivered twice).
- The maximum visibility timeout for SQS message is 12 hours.

> SQS message can contain up to 10 metadata attributes.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Short polling:

Does not wait for messages to appear in the queue.
It queries only a subset of the available servers for messages (based on weighted random execution).
Short polling is the default.
ReceiveMessageWaitTime is set to 0.
More requests are used, which implies higher cost.


Long polling:
Uses fewer requests and reduces cost.
Eliminates false empty responses by querying all servers.
SQS waits until a message is available in the queue before sending a response.
Requests contain at least one of the available messages up to the maximum number of messages specified in the ReceiveMessage action.
Shouldn’t be used if your application expects an immediate response to receive message calls.
ReceiveMessageWaitTime is set to a non-zero value (up to 20 seconds).
Same charge per million requests as short polling.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What Are the Main Benefits of Amazon SQS?

> Security 
– You control who can send messages to and receive messages from SQS queue.
- SSE lets us transmit sensitive data by protecting the contents of messages in queues using keys managed in AWS-KMS.

> Durability 
– To ensure the safety of your messages, Amazon SQS stores them on multiple servers. 
- Standard queues support at-least-once message delivery, and FIFO queues support exactly-once message processing.

> Availability 
– Amazon SQS uses redundant infrastructure to provide highly-concurrent access to messages and high availability for producing and consuming messages.

Scalability – Amazon SQS can process each buffered request independently, scaling transparently to handle any load increases or spikes without any provisioning instructions.

Reliability – Amazon SQS locks your messages during processing, so that multiple producers can send and multiple consumers can receive messages at the same time.

> Customization 
– Your queues don't have to be exactly alike—for example, you can set a default delay on a queue. 
- You can store the contents of messages larger than 256 KB using S3 or DynamoDB, with Amazon SQS holding a pointer to the S3 object, or you can split a large message into smaller messages.

=======================================
########## 1. STANDARD QUEUE ##########

> It is default queue type

> UNLIMITED THROUGHPUT 
– Support unlimited number of transaction per second(TPS) per API action

> AT-LEAST-ONCE MESSAGE DELIVERY. 
- A message is delivered at least once, but occasionally more than one copy of a message is delivered.

> Best-effort ordering 
- Occasionally, messages might be delivered in different order from which they were sent. 
- ORDER IS NOT GUARANTEED

#SCENARIO
> We can use standard message queue in many scenario, as long as your app can process messages at arrived more than once and out of order Ex-
- Decouple leave user request from intensive background work let users upload media while resizing for encoding it
- Allocate task to multiply workout nodes- process a high number of credit card validation request
- Batch messages for future processing - schedule multiple entries to be added to a database 


=======================================
############ 2. FIFO QUEUE ############

> High Throughput 
– By default, with batching, FIFO queues support upto 3,000 MPS, per API action (SendMessage, ReceiveMessage, or DeleteMessage). 
- To request a quota increase, submit a support request. 
- Without batching, FIFO queues support upto 300 MPS, per API action (SendMessage, ReceiveMessage, or DeleteMessage).

> EXACTLY-ONCE PROCESSING 
– A message is delivered once and remains available until a consumer processes and deletes it. DUPLICATES AREN'T INTRODUCED INTO THE QUEUE.

> FIRST-IN-FIRST-OUT DELIVERY 
– The order in which messages are sent and received is strictly preserved.

#SCENARIO
> Send data between applications when the order of events is important, for example:

> Ensure that user-entered commands are executed in the right order.

> Display the correct product price by sending price modifications in the right order.

> Prevent a student from enrolling in a course before registering for an account.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
=======================================
########## QUEUE ATTRIBUTES ###########

## Visibility Timeout 
> The length of time (in seconds) that a message received from a queue will be invisible to other receiving components.

## Message Retention Period
- The amount of time that SQS will retain a message if it does not get deleted.

## Maximum Message Size
> Maximum message size (in bytes) accepted by Amazon SQS

## Delivery Delay
- The amount of time to delay the first delivery of all messages added to this queue.
- Value must be between 0 seconds and 15 minutes

## Receive Message Wait Time
- The maximum amount of time that a long polling receive call will wait for a message to become available before returning an empty response.
- Value must be between 0(default) and 20 seconds.
=======================================
## To calculate the number of API requests (R) per queue

R = B / D * (2 * P + C)

B is the billing period (in seconds).
D is the data key reuse period (in seconds).
P is the number of producing principals that send to the Amazon SQS queue.
C is the number of consuming principals that receive from the Amazon SQS queue.
=======================================
> All requests to queues with SSE enabled must use HTTPS and Signature Version 4

=======================================
###### AWS SQS ####### v40

## AWS SQS – Pricing
> Priced per Million requests
> A request is any SQS action
- It can have 1-10 messages , up to a maximum request payload size of 256KB
- SQs messages can be sent, received, deleted in batches up to 10 messages or 256 KB
- Each 64 KB is a chunk, a chunk is one request
- A SQS message size can be 1KB upto 256KB

> If you use S3 to store queue messages, S3 charges will apply
> DATA TRANSFERRED BETWEEN SQS AND EC2 IN THE SAME REGION IS FREE


===============================
## AWS SQS – Short/Regular Polling

> A request is returned immediately even if the queue is empty.
- It does not wait for messages to appear in the queue
- It queries only a subset of the available servers for messages (based on weighted random distribution)
- Default of SQS
- ReceiveMessageWaitTime is set to 0, if changed to >0 then it will be Long polling
- More requests are used, which implies higher cost
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##### AWS SQS – Long Polling ####
> It is preferred to regular/short polling, it uses fewer requests and reduces cost by:
- Eliminating false empty responses by querying all the servers
- Reduces the number of empty responses, by allowing Amazon SQS to wait until a message available in the queue before sending a response. Unless the connection times out, the response to the ReceiveMessage

> request contains at least one of the available messages, up to the maximum number of messages specified in the ReceiveMessage action. 
> Do not use if your application expects an immediate response to receive message calls
> ReceiveMessageWaitTime is set to a non zero value (up to 20 seconds)
> Same charge per million requests as the regular/short polling

## SQS – Retention Period
> SQS messages can remain in the queue for up to 14 days (SQS retention period)
> Range is 1 min to 14 days (default is 4 days)
> Once the maximum retention period of a message is reached, it will be deleted automatically from the queue

> Messages can be sent to the queue and read from the queue simultaneously
> SQS can be used with :
- Redshift, DynamoDB, EC2, ECS, RDS, s3, Lambda to make distributed/decoupled applications

> You can have multiple SQS queues with different priorities in case you want one SQS queue messages to be handled with higher priority over other SQS queue messages

> You can scale up the send/receive messages by creating more queues for different processes/actions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## SQS Visibility Timeout
> It is the duration of time (length) a message is locked for read by other consumers ( after it has been read by a consumer to process it) so they can not be read again (by another consumer)
- Max is 12 hours
- Consumer is an application processing the SQS queue messages
> A consumer that read a message to process it, can change the message visibility timeout if it needs more time to process the message

> After a message is read, there are the following possibilities:
- An ACK is received that a message is processed, so it must be deleted from the queue to avoid duplicates
- If a FAIL is received or the visibility timeout expires, the message will then be unlocked for read , such that it can be read and processed by another consumer

## Delivery Delay
> SQS provides delivery delay options to postpone the delivery of new messages to a queue, if delivery delay is defined for a queue, any  new messages will not be visible to the server for the duration of delay.
- The default delay for a queue is 0sec. Max is 15min.

## Dead Letter Queue (DLQ)
> The main task of a DLQ is handling message failure.
- it lets you set aside and isolate message that can't be processed correctly to determine why their processing didn't succeed.

> Don't use DLQ with a FIFO Queue. 
- If you don't want to break the exact order of messages or operation.

> DLQ must be of the same type as the source queue (Standand / FIFO)

## AWS SQS - Reliability
> SQS stores all message queues and messages within a single, highly-available AWS region with multiple redundant AZs,
- No single computer, network, or AZ failure can make messages inaccessible.

## AWS SQS - Security
> You can use IAM policies to control who can read/write messages from/to an SQS queue
> Authentication mechanisms ensure that messages stored in SQS message queues are secured against unauthorized access.
- we can control who can send messages to a message queue and who can receive messages from a message queue.
- For additional security, we can build app to encrypt messages before they are placed in a message queue.

> SQS supports HTTPS & supports TLS versions, 1.0, 1.1, 1.2 in all regions
> SQS is PCI DSS (Payment Card Industry Data Security Standard) level 1 compliant
> SQS is HIPAA (US Health Insurance Portability and Accountability Act) Eligible
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#### AWS SQS – SSE ENCRYPTION ###

> SSE lets you transmit sensitive data in encrypted queues.
- SSE protects the contents of messages in SQS queues using KMS managed keys
- SSE encrypts messages as soon as SQS receives them.
- The messages are stored in encrypted form and SQS decrypts messages only when they are sent to an authorized consumer
- It uses AES-256 bits encryption

> AWS KMS combines secure, highly available hardware-management and software to provide a key management system scaled for the cloud.

> Both standard and FIFO queues support SSE.
> SSE for SQS is NOT AVAILABLE IN ALL REGIONS, check the intended region for availability

> SSE encrypts the body of a message in SQS queue, SSE doesn't encrypt the following components:
- Queue metadata (queue name and attributes)
- Message metadata (message ID, timestamp, and attributes)
- Per-queue metrics

> Encrypting a message makes its contents unavailable to unauthorized or anonymous users.
- Encrypting messages doesn't affect the normal functioning of Amazon SQS:

> A message is encrypted only if it is sent after the encryption of a queue is enabled. Amazon SQS doesn't encrypt backlogged messages.

> Any encrypted message remains encrypted even if the encryption of its queue is disabled.

=======================================
############## AWS SNS ################

> It is a fast, flexible, fully managed PUSH NOTIFICATION SERVICE

> It is a webservice that co-ordinates and manages the delivery or sending of messages to subscribing endpoints or clients.

> It allows for sending individual messages or fan-out messages to a large no. fo recipients or tto other distributed AWS services.

- messages published to an SNS topocs will be delivereed to the subscriber immediately

- inexpensive pay-as-you-go model with no upfront cost.

- Reliable - at least 3 copies of the data are store across multiAZ in same region

> It is a way of sending messages when u are using Autoscaling, it triggers an SNS service which will email you that your EC2 insatnce is growing. 

> SNS Topic - Lambda/SQS/HTTPS/email/SMS 

> Publisher - 
publisher are also know as producer that produce and send the message to the SNS which is a logical access pointer

> Subscriber - subscriber such as webservcer email addr, SQS queues, Lambda, recieve the message or notification from the SNS over 1 of the suppoerted protocols (SQS/email/lambda/https/sms) 

=======================================
## AWS SWF (SIMPLE WORKFLOW SERVICE) ##

> It is a web service that makes it easy to coordinate work across distributed application components. 
- it enables apps for a range of use cases, including media processing, web app back ends, business process workflows, and analytics pipelines, to be designed as a coordination of tasks.
- Tasks represent invocations of various processing steps in an app which can be performed by executable code, web service calls, human actions, and scripts.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
######## SWF vs SQS ###########

> SQS has a retention period of up to 14 days; 
- with SWF, workflow executions can last up to 1 year. 

> Amazon SWF presents a task-oriented API, whereas 
- Amazon SQS offers a message-oriented API.

> Amazon SWF ensures that a task is assigned only once and is never duplicated. 
- With Amazon SQS, you need to handle duplicated messages and may also need to ensure that a message is processed only once.

> Amazon SWF keeps track of all the tasks and events in an application. 
- With Amazon SQS, you need to implement your own application-level tracking, especially if your application uses multiple queues.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
######## SWF Actors ###########

> Workflow Starters
- An application that can initiate (start) a workflow. 
- Could | be your e-commerce website following the placement of an order, or a mobile app searching for bus times.

> Deciders 
— Control the flow of activity tasks in a workflow execution. 
- If something has finished (or failed) in a workflow, a Decider decides what to do next.

> Activity Workers 
- Carry out the activity tasks.

=======================================