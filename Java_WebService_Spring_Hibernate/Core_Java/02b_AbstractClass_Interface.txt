############# ABSTRACT ##############
ABSTRACT CLASS - It is a class that is USED AS TEMPLATE for other class. 
> its purpose is to provide an appropriate superclass from which other classes can inherit and thus share a common design.

ABSTRACT METHOD - it is a class method which won't be implemented but is expected to be implemented by the descendants of the class.

> abstract class may have or may not hv abstract method
- We cann't define abstract method without abstract modifier in abstract class
- if subclass class doesnot implement abstract parent method then it should be declare as abstract

> abstract class can implement the interface
> abstract class object cannot be instantiate
> It can have constructor

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## Why do we have constructor if we cannot instantiate the abstract class?

> Constructor is used in abstract class for implementing constructor chaining(calling constructor from another constructor)
> Main purpose of constructor is to initialize variable/data of object.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## If we not defining any abstract method in abstract class then what's the use of abstract class?

> Abstract class is USED TO SHARE A COMMON DESIGN 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## Can abstract class implements interface in Java? does they require to implement all methods?

> Yes, abstract class can implement interface by using implements keyword. 
- Since they are abstract, they dont need to implement all methods
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
### Can abstract class be final in Java?

> ABSTRACT CLASS CANNOT BE FINAL CLASS
> They r opposite of each other, abstract keyword enforces to extend a class, for using it, on the other hand, 
- final keyword prevents a class from being extended
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## Can abstract class contains main method in Java ?

> Yes, abstract class can contain main method, it just another static method and you can execute Abstract class with main method, until you dont create any instance.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## In Which we use Abstract class?

> it is used when IS-A RELATIONSHIP is maintain

Ex - Triangles, squares or rectangles are types of polygons . In that
triangle IS A polygon but it makes no sense to say a triangle IS CAPABLE OF being a polygon

> in interface all members are by default public. cannot use when we need private. But can use abstract class with private member.

> abstract class are slightly faster than interface because interface involves a search before calling any overridden method in Java

=====================================
############# INTERFACE #############

> interface is a blueprint of class.
> Mainly it is USED FOR TYPE DECLARATION.

>> we can mark interface as abstract but we CANT mark an interface as final.
- like public abstract interface MyInterface{...}

> An Interface cannot extend any class but it extend interfaces.

> A Java interface does not extends the Object

#### VARIABLE ####
> It can ONLY DECLARE STATIC CONSTANTS and abstact methods
- methods cannot implement default behavior prior to Java 8

>> variables are BY default PUBLIC, STATIC and FINAL and it must be initialize
> we CANOT use the private and protected specifiers when declaring members of an interface.

>> we CANNOT USE transient, volatile, or synchronized in a member declaration in an interface. 

#### METHOD ####
>> Interface method hv only PUBLIC and ABSTRACT modifier with method; 
- NOT static, final

> In Java8, static methods are allowed in interface

>> java DOESNT allow CONSTRUCTOR in interface

> we cannot extends Class after implements define i.e we cannot write like [class MyClass implements Runnable extends Thread] it should be class MyClass extends Thread implements Runnable

> Implementing class can USE INTERFACE VARIABLE DIRECTLY with interface name as it is implicitly static
>> we can DEFINE A CLASS INSIDE the interface. use of inner class in interface is, we can write default implementation for interface methods. 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## When and Why to use Java Interface?

> It is used to achieve fully abstraction.
> By interface, we can support the functionality of multiple inheritance.
> It can be used to achieve loose coupling.

> It is used when classes of various type SHOWS SAME BEHAVIOUR BUT DOESNOT HAVE RELATIONSHIP 
Ex - Human and Parrot both can Whistle but doesn't have relationship. 
- But abstact class is used when the same behavior is shown by it different class and have IS-A relationship

> it is used when THE CLASS IS CAPABLE TO show some behavior like bouncing, moving
> interface Ex - Bounceable , Moveable, 

=======================================
########## FUNCTIONAL INTERFACE #######

> @FunctionalInterface annotation.
> Since Java8.
> A functional interface is any interface that contains ONLY ONE ABSTRACT METHOD.
- it may contain ONE OR MORE DEFAULT METHODS OR STATIC METHODS.

> it is a facility to avoid accidental addition of abstract methods in the FI.
> These interfaces are also called Single Abstract Method interfaces (SAM Interfaces)

EXAMPLE :

@FunctionalInterface
public interface Interface1 {
     void method1(String str);
    
     default void log(String str){
          System.out.println("I1 logging::"+str);
     }
    
     static void print(String str){
          System.out.println("Printing "+str);
     }
    
     //compile time error as
     // default method cannot override a method from java.lang.Object"
     //     default String toString(){
     //          return "i1";
     //     }
}
- Once you add another abstract method to the interface then the compiler/IDE will flag it as an error

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
> A FI can extend another FI but finally FI should have only 1 abstract method
- if it extending another FI then it should provide default impl otherwise Compiler error.

EXAMPLE :
@FunctionalInterface
interface FunctionalInterface2{
     public abstract void method2();
}

@FunctionalInterface
interface FunctionalInterface23 extends FunctionalInterface2{ // Compiler Error
     public abstract void method23();
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
> MAJOR BENEFITS OF FI is the possibility TO USE LAMBDA EXPRESSIONS to instantiate them.
- We can instantiate an interface with anonymous class but the code looks bulky.

Runnable r = new Runnable(){
               @Override
               public void run() {
                    System.out.println("My Runnable");
               }};

## using lambda expression as:
Runnable r1 = () -> {System.out.println("My Runnable");};

> If you have single statement in method impl, we don’t need curly braces also.
Interface1 i1 = (s) -> System.out.println(s);
i1.method1("abc");
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## is Comparator[i] is the FI?

> Yes, It is FI.
- It contain 2 abstract methods compare() and equals() eventhrough it is FI
- because equals() is part of Object class

=======================================
##### DEFAULT / DEFENDER METHODS ######

- virtual extension methods
> Java8 introduce default implementation of methods inside the interface, 
- but that should be used as exception rather than rule. 
- it is INTRODUCED TO MAINTAIN BACKWARD COMPATIBILITY along with supporting lambda expression. 

> interfaces are not allowed to have Object class default methods
> If any class in the hierarchy has a method with same signature, then default methods become irrelevant

> All evolution of Stream API was possible due to this change.
- It allows developer to add new methods to the interfaces without breaking the existing implementation

public interface oldInterface {
    public void existingMethod();
        default public void newDefaultMethod() {
        System.out.println("New default method"
              " is added in interface");
    }
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## Why Defaut Method?
- Reengineering an existing JDK framework was always very complex. Modify one interface in JDK framework breaks all classes that extends the interface.
- Default methods can be provided to an interface without affecting implementing classes
- For example in Java 8, the JDK collections have been extended and forEach method is added to the entire collection
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##Do default methods introduce multiple inheritance to Java?
No
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What if two interface have a default method with same name and a class implements both interfaces?

- in this case, there will be compiler error i.e "Duplicate default method" for class
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
### Why is “final” not allowed in Java 8 interface default methods?

> It will complicate for multiple inheritance impl.

For Example:-
interface A { 
    default void foo() { ... }
}

interface B { 
}

class C implements A, B { 
}

> Now supposing B is changed to have a foo method, with a default:
interface B { 
    default void foo() { ... }
}

> Now, when we go to recompile C, the compiler will tell us that it doesn't know what behavior to inherit for foo(), 
- so C has to override it (and could choose to delegate to A.super.foo() if it wanted to retain the same behavior.) 
- But what if B had made its default final, and A is not under the control of the author of C? 
- Now C is irretrievably broken; it can't compile without overriding foo(), but it can't override foo() if it was final in B.
=======================================
############ STATIC METHOD ############
> It is part of interface, we can’t use it for impl class objects.
> It is GOOD FOR PROVIDING UTILITY METHODS, for example null check, collection sorting etc.
> It PROVIDE SECURITY BY NOT ALLOWING IMPLEMENTATION CLASSES TO OVERRIDE THEM.
> We can’t define interface static method for Object class methods, 
- we will get compiler error as “This static method cannot hide the instance method from Object”. 
- This is because it’s not allowed in java, since Object is the base class for all the classes and 
- we can’t have one class level static method and another instance method with same signature.

> We can use java interface static methods to remove utility classes such as Collections and 
- move all of it’s static methods to the corresponding interface, that would be easy to find and use.

EX- 
public interface MyData {

	default void print(String str) {
		if (!isNull(str))
			System.out.println("MyData Print::" + str);
	}

	static boolean isNull(String str) {
		System.out.println("Interface Null Check");

		return str == null ? true : "".equals(str) ? true : false;
	}
}

> Use interface static method as 
- boolean result = MyData.isNull("abc");
=======================================
### What is DIFFERENCE BETWEEN ABSTRACT AND INTERFACE?

DIFFERENCE
> multiple abstract class can not inherit in a class
- multiple Interface can . 

> Abstract class are more structured and can have a state associated with them
- Interface doesn't associate state 

> Abstract class can have final, non-final, static and non-static variables.
- Interface has only static and final variables.

> Abstract class can have public, protected, private variables 
- Interface can only have public variables.

> Abstract class can have static methods, main method and constructor.
- Interface can't have static methods, main method or constructor.

> abstract class can have concrete as well as abstract method 
- interface can also have default and abstract method Since Java8.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is similarities between an Abstract class and Interface?

> both cannot be instantiate
> both define abstract method
=====================================
########## RELATIONSHIP #############
Association[weekest] > Aggregation > Composition[strongest] 

############ ASSOCIATION ############ 
> It is Super set of Aggregation

> it isn't a 'HAS-A' relationship, none of the objects are parts or members of another.
- it only means that the objects 'know' each other
- The relationship can be One-to-One, One-to-Many, Many-to-One and Many-to-Many.
- It can be uni-directional, bi-directional 

> Composition and Aggregation are the two forms of association.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
########## AGGREGATION ##########
> It is Super set of Composition

> Aggregation is a special form of association which is a unidirectional one way relationship between classes (or entities)

> It represents Has-A relationship.
> It is a UNIDIRECTIONAL ASSOCIATION i.e. a one way relationship. 
- For example, department can have students but vice versa is not possible and thus unidirectional in nature.

> In Aggregation, both the entries can survive individually which means ending one entity will not effect the other entity

> The whole class plays a more important role than the part class, but unlike the case of composition.
- the part class can meaningfully exist on its own without the whole class

> IMPLEMENTATION - both are separate class 
> EXAMPLE - Employee(Super) having Address(sub)
> SYMBOL - holo rhombus at Container class and tail at the member class


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
########## COMPOSITION ##########

## COMPOSITION - Class A contain Class B
- This means life of Class B is dependent of life of Class A.

> Composition is a restricted form of Aggregation and Association 
- in this, two entities are highly dependent on each other.
- the PART OF CLASS CANNOT MEANINGFULLY EXIST ON ITS OWN without the whole class. 
- IT REPRESENTS 'PART-OF' relationship i.e. a type of 'HAS-A' relationship.

> EXAMPLE : Building[- Rooms] doesn't exist without Room
- we can Room is part of Building

> IMPLEMENTATION : using non-static inner class
class Building{ class Room{..} }

> SYMBOL - dark rhomus at Container class and tail at the part/member  class

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is difference between Aggregation and Composition?

> DEPENDENCY : 
- In Aggregation, child can exist independently of the parent
- In Composition, child cannot exist independent of the parent

> Type of Relationship: 
- Aggregation relation is “has-a” and 
- composition is “part-of” relation.

> Type of association: 
- Aggregation is a weak Association.
- Composition is a strong Association

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is difference between IS-A and HAS-A relationship?

> Inheritance define IS-A relationship
- Composition define Has-A relationship

> In Inheritance, base class defines the state and behavior common for a given type
- In Composition, Container class has member class, member class doesn't meaningfully exist on its own. 

> IS-A relationship example : Orange is a Fruit, Car is a Vehicle etc.
- HAS-A relationship ex : Building has rooms, Car has engine.
=====================================
## What is Cohesion in Java?

> It defines the degree to which the elements of a module belong together. 
- Thus, cohesion measures the strength of relationships between pieces of functionality within a given module. 
- For example, in highly cohesive systems, functionality is strongly related.

- It refers all about how a single class is designed.
- It is most closely associated with making sure that a CLASS IS DESIGNED WITH A SINGLE, WELL-FOCUSED PURPOSE.

> The ADVANTAGES OF HIGH COHESION is that such classes are much easier to maintain (and less frequently changed) and reusable.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is Coupling in Java?

> it is the degree to which one class knows about another class. 
- If one class uses another class, that is coupling. 
- Coupling is everywhere, but the level of coupling varies.

There are two types of coupling:
1. TIGHT COUPLING :
Ex- 
class Subject {
  Topic t = new Topic();
  public void startReading(){
    t.understand();
  }
}
class Topic {
  public void understand(){
    System.out.println("Tight coupling concept");
  }
}
- Here Subject and Topic are tightly couple.

2. LOOSE COUPLING:
> If class A knows class B through its interface only i.e it interacts with class B through its API then class A and class B are said to be loosely coupled.

EXAMPLE: 
public interface Topic{
    void understand();
}
class Topic1 implements Topic {
  public void understand(){
    System.out.println("Got it");
  }
} 
class Topic2 implements Topic {
  public void unserstand(){
    System.out.println("understand");
  }
} 
public class Subject {
  public static void main(String[] args){
    Topic t = new Topic1();
    t.understand();
  }
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is the difference bet Coupling and Cohesion?

> Coupling shows the relationship between modules
- Cohesion shows the relationship within the module.

> Coupling is also called Inter-Module Binding.
- Cohesion is also called Intra-Module Binding.

> While creating, we SHOULD AIM FOR LOW COUPLING, i.e., dependency among modules should be less.	
- While creating we SHOULD AIM FOR HIGH COHESION, i.e., a cohesive component/ module focuses on a single function (i.e., single-mindedness) with little interaction with other modules of the system.