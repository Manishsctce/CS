######### Throwable[c] #########
public class Throwable implements Serializable {
  public String getMessage() {
  	return detailMessage;
  }
  
  //Subclasses may override this method in order to produce a locale-specific message. 
  public String getLocalizedMessage() {
    return getMessage();
  }
  ...
}

> Throwable is a parent class of all Exception classes and Error classes. 
- it implements java.io.Serializable
> Throwable[c] <-- Exception[c], Error[c]
> It must be checked 

> it contain printStackTrace(), getStackTrace(), getMessage() and other.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## Why Throwable is class not Interface?

> Its bcx every Exceptions have state. In particular, message, cause, and stack trace 
- it is possible only with class not interface.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## But could it be made abstract?

> In theory, yes. In practice, no. 
- Too much code depends on being able to create an instance of Throwable in order to call getStackTrace.

=====================================
############### ERROR ###############
## What is Error?

> An Error is an irrecoverable condition occurring at runtime. Such as OutOfMemory error. 
> It is UNCHECKED i.e if we are throwing error then it is not require to check ie (try-catch block)
Ex - throw new Error(); // No try-catch block require

> These JVM errors CANT REPAIR THEM AT RUNTIME. 
> Though ERROR CAN BE CAUGHT IN CATCH BLOCK but the execution of app will come to HALT and is not recoverable.

> Errors are exceptional scenarios that are OUT OF SCOPE OF APP and it’s not possible to anticipate and recover from them, 
EXAMPLE - hardware failure, JVM crash or out of memory error

> ERROR 
- VirtualMachineError <-- OutOfMemoryError,StackOverflowError
- LinkageError <-- NoClassDefFoundError, ClassFormatError, IncompatibleClassChangeError(NoSuchMethodError)
- IOError 
- AWTError
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is OutOfMemoryError in java?

> It is occurs when JVM runs out of memory in the heap or PermGen space.

REASON for such Error
1. While creating an object and there is not enough space on the heap/PermGen to allocate that object/meta data 
- To specify the size of Heap using JVM options "-Xms256m" and  "-Xmx512m" 

- To specify the size of permanent generation using JVM options "-XX:PermSize" and  "-XX:MaxPermSize" 
- in most of JVM default size of Perm Space is around "64MB"

2. Memory leak through Classloaders
> we can use Eclipse Memory Analyzer to examine heap dump OR 
- use any profiler like Netbeans or JProbe.

- Permanent generation is used to store String pool and various Metadata required by JVM related to Class, method and other java primitives.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is StackOverflowError in java?

> This error is thrown to indicate that the application’s stack was exhausted, due to deep recursion.
=====================================
############### EXCEPTION ###########
## What is an Exception?

> Exception is a case that can happen in a program that disrupts the normal flow of the program. 
> The disruption converted into object and thrown whenever an exceptional event occurs in java which signals that something is not correct with the code written and may give unexpected result
> it alters the normal program flow
> it define in java.lang.Exception
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What are important methods of Java Exception Class?

> Exception and all of it’s subclasses doesn’t provide any specific methods and all of the methods are defined in the base class Throwable.

1. String getMessage()
- returns the message String about the exception. The message can be provided through its constructor.

2. String getLocalizedMessage() 

3. synchronized Throwable getCause() 
– returns the cause of the exception or null id as represented by a Throwable object.

4. String toString()
5. void printStackTrace()

6. public StackTraceElement[] getStackTrace() –
- return stack trace where index 0 represents the top of the call stack whereas 
- the last element in the array represents the method at the bottom of the call stack.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-
## What is difference between Error and Exception?

> ERROR - JVM errors can not repair at runtime.
- Though error can be caught in catch block but the execution of application will come to a halt and is not recoverable.
=====================================
########## TYPE OF EXCEPTION ########
## Explain the exception hierarchy in java.

> Exception[C] <-- IOException[C], ClassNotFoundExceptions[C],..., RunTimeException[U]
- except RunTimeException in Exception hierarchy all are checked exception

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
> Two types of Exceptions: Checked exceptions &  UncheckedExceptions

> CHECKED EXCEPTION 
- IOException, ClassNotFoundExceptions, InterruptedException, NoSuchMethodException, SQLException

> RuntimeException (UNCHECKED EXCEPTION) - describe below
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is Runtime Exception or unchecked exception?

> exceptions which occur at run time are called as run time exceptions. 
- These exceptions are unknown to compiler. 

RuntimeException
1. ArithmaticException (Divide By 0)
2. ClassCastException
3. IllegalArumentsException <- NumberFormatException
4. NullPointerException
5. IndexOutOfBoundException <-- ArrayIndexOutOfBoundsException, StringIndexOutOfBoundException
6. ArrayStoreException (attempt has been made to store the wrong type of object into an array of objects)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is Checked exception?

> All exception other than RunTimeException are checked exception

IOException <-- FileNotFoundException
ClassNotFoundException <--
InterruptedException, 
NoSuchMethodException - throw while using Reflection and the method no found
SQLException
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## Can we handle Throwable class exception?

> we can handle throwable class exception but it is NOT GOOD PRACTICE to handle it as it give all error and exception. 
> Here error can be any thing which is irrecoverable condition
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is main difference between RuntimeException/unchecked and checked Exception?

>>  It is MANDATORY TO PROVIDE TRY CATCH OR TRY FINALLY BLOCK TO HANDLE CHECKED EXCEPTION and failure to do so will result in compile time error, while 
- in case of RuntimeException this is not mandatory

> By default Unchecked Exceptions are forwarded in calling chain
- By default, Checked Exceptions are not forwarded in calling chain
- for propagating checked exceptions method must throw exception by using throws keyword
 
>> By extending java.lang.RuntimeException, we can create unchecked exception.
- By extending java.lang.Exception, we can create checked exception.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## When should you use a checked exception and when should you use an unchecked exception?

> Use Checked Exception, when client code can take some useful recovery action based on info in exception
> Use Un-checked Exception, when client code cann't take any action 

https://10kloc.wordpress.com/2013/03/09/runtimeexceptions-try-catch-or-not-to-catch/
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## As RunTimeException extends Exception class, how Java consider that it is checked and it is unchecked ?

> RunTimeException extends Exception class and Exception class extends Throwable.
- so everything here is throwable in nature.
- Java use native library to handle checked / unchecked exception.


> Runtime exception is having all the capabilities which are there in Exception class apart from that 
- it has overridden the exception handling behaviour from its parent and that is its unchecked behaviour.
- that's why it extends Exception class 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
### What is Difference between ClassNotFoundException and NoClassDefFoundError?

> Both are related to missing classes in classpath

1. ClassNotFoundException comes when we try to load a class (using classloader) at runtime but requested class is not present in classpath
- It is runtime exception
- load class by using Class.forName(classname.class) or ClassLoader.loadClass() or ClassLoader.findSystemClass()  like Oracle driver

> NoClassDefFoundError comes when we request a class that was present in compile time but not present at runtime.
- Suppose we create an instance of a class. Class was present at compile time but not at runtime then it throw NoClassDefFoundError

2. ClassNotFoundException is checked Excep derived from Exception class 
- NoClassDefFoundError is an Error derived from LinkageError

3. If we are using ClassLoader in Java and have TWO CLASS LOADERS then if a ClassLoader tries to access a class which is loaded by another classloader will result in ClassNotFoundException.

4. ClassNotFoundException is thrown by the application itself by the methods like Class.forName().
- NoClassDefFoundError is thrown by the Java Runtime System.

5. ClassNotFoundException is exception
- NoClassDefFoundError is error.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is similarity between NullPointerException and ArrayIndexOutOfBoundException in Java?

> both are unchecked exception 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## Can constructor throw exception ?
> Yes it can
=======================================
###### EXCEPTION OVERRIDING RULE ######

> OVERRIDDEN METHOD CAN DECLARE MORE SPECIFIC EXCEPTION NOT GENERIC.

>> If the superclass method does not declare an exception, 
- subclass overridden method CANNOT DECLARE THE CHECKED EXCEPTION but 
- it can declare unchecked exception.

>> If the superclass method declares an exception, 
- subclass overridden method CAN DECLARE SAME, SUBCLASS EXCEPTION OR NO EXCEPTION but 
- CANNOT DECLARE PARENT EXCEPTION EXCEPT IN CASE OF UNCHECKED EXCEPTION


EXAMPLE-
class Test{
  public void display() throws IOException{}
}
public class Demo extends Test{
  public void display() throws Exception{} //throwing super class exception
}
-  does not compile as subclass display() method cannot throw more than IOException
=====================================
########### CUSTOM EXCEPTION ########

> We can make our own exception by extending different Exception classes
> We can make both checked and unchecked exception
- if we extends Exception then it will be checked 
- if we extends RuntimeException then it will be unchecked.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## Things to remember while creating Custom Exception 

> Don’t use Exception to control application behaviour. 
> Exception handling is very expensive as it require native calls to copy stacktrace, each time exception is created.

> If your custom exception is created by passing another exception then 
- always contain original Exception as source; 
- use constructor which takes Exception rather than only message String.
- providing default no argument constructor on your custom Exception class, 
- provide at least two more constructors, one which should ACCEPT A FAILURE MESSAGE and other which can ACCEPT ANOTHER THROWABLE AS CAUSE.

EXAMPLE  - 
class NoSuchProductException extends RuntimeException { 
private int productId; 
	public NoSuchProductException() { super(); } 
	public NoSuchProductException(String message, int productId){
	super(message); this.productId = productId; 
	} 

	public NoSuchProductException(String message, int productId, Throwable cause) { 
		super(message, cause); 
		this.productId = productId; 
	} 
@Override 
public String toString() { return super.toString(); } 

	@Override 
	public String getMessage() { 
		return super.getMessage() + " for productId :" + productId; 
	}
}
=====================================
###### TRY-CATCH-FINALLY BLOCK ######

## How are the exceptions handled in java?(try-catch-finally block)

> try-catch-finally block is used to handle the exception
> code in which the exception may occur is enclosed in a try block, also called as a guarded region.
> catch clause matches a specific exception to a block of code which handles that exception.

> FINALLY BLOCK is use to CLEAN UP CODE which needs to be executed no matter the exception occurs or not.
>> For each try block there can be zero or more catch blocks, but ONLY ONE FINALLY BLOCK
> The finally block will not be executed if program exits(either by calling System.exit() or by causing a fatal error that causes the process to abort).

>> if the any EXCEPTION OCCUR IN FINALLY BLOCK IS IGNORE
> Any code cannot be present in between the try, catch, finally blocks.
> It is possible to have try block without catch block by using finally block
> we can write RETURN statement IN BOTH TRY AND CATCH block

???How to handle any exception occur in finally block??
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##Can we have an empty catch block?

> Yes, we can have an empty catch block
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What will happen when catch and finally block both return value?

> value returned by finally block WIN irrespective of value returned by catch/try block.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is unreachable catch block error?

> When we have multiple catch blocks for a try block, the ORDER OF CATCH BLOCKS MUST BE FROM MOST SPECIFIC TO MOST GENERAL ones. 
- i.e sub classes of Exception must come first and super classes later. 
- If we keep super classes first and sub classes later, compiler will show unreachable catch block error.
=====================================
####### TRY-WITH-MULTIPLE-CATCH #####
> Since Java7

> we can have multi multiple-catch block 
> we cannot have Exception and ArithmaticException together in a catch block 
- 
### USAGE##
> It can be used when difference type exception is to caught like 
- in JDBC code throws checked SQLException, IO related code throws IOException and date formatting throws ParseException, which can't be handled in one catch block prior to Java 7.
> It can be used when two catch block is doing same job, so we can combine them

EXAMPLE:- 
try{
	int i= 10/0;
}catch(NullPointerException  | ArithmeticException ae ){
	
}
=====================================
######### TRY-WITH-RESOURCES ########
> Since Java7

## Explain try-with-resources with an example? 

> A resource is as an object that must be closed after the program is finished with it. 
> The try-with-resources statement ensures that each resource is closed at the end of the statement. 
- it will be closed regardless of whether the try statement completes normally or abruptly

> Any object that implements java.lang.AutoCloseable can be used as a resource.
 which includes all objects which implement java.io.Closeable,

> we can declare one or more resources in a try-with-resources statement, separated by ";"

> A try-with-resources statement can have catch and finally blocks just like an ordinary try statement. 
- In a try-with-resources statement, any catch or finally block is run after the resources declared have been closed.

> if exceptions are thrown from try-with-resources statement then the try block will not execute

EXAMPLE: 
// Prior to Java SE 7
public void tryWithResource() throws FileNotFoundException, IOException {
    FileInputStream fis = null;
    try {
        fis = new FileInputStream("Input.txt"); // Open the resource
        System.out.println(fis.read());
    } finally {
        if (fis != null) {
            fis.close(); // check for null and close the resource
        }
    }
}
	
// From Java SE 7
public  void tryWithResource() throws FileNotFoundException, IOException {
    try (FileInputStream fis = new FileInputStream("Input.txt")) { 
		// try-with-resources manages the open and close of resource - FileInputStream
        System.out.println(fis.read());
    }
}
 
> close methods of resources are called in the opposite order of their creation.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## Why variables defined in try can not be used in catch or finally?

> the string s declared in try block can not be used in catch clause. 
- The code does not pass compilation

> If Multi catch syntax is used to catch subclass and its superclass than compilation error will be thrown.
Example- IOException and Exception in multi catch syntax will cause compilation error “The exception IOException is already caught by the alternative Exception”.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What will happen to the Exception object after exception handling? 

> It will go for Garbage Collector. And frees the memory. 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## why we need not to close file when we are using Try-with-resources in java?

> Because FileInputStream implements java.lang.AutoCloseable interface 
- AutoCloseable interface’s close method automatically closes resources which are no longer needed
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## Which classes can be used inside Try-with-resources in java?

> All the classes which implements AutoCloseable[i] can be used inside Try-with-resources in java.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
> throw keyword can also be used in place of return
=======================================
########### THROW and THROWS ########

## What is difference between throw and throws?

> THROWS keyword is used in method signature only. 
- It suggest that it can throw these type of exception 

> we can declare multiple exception thrown by method in throws keyword by separating them in common e.g. throws IOException, ArrayIndexBoundException etc
> it is use to throw exception raise by method at top of stack for promoting exception propogation 

> THROW keyword can be used inside method body or block to raise an exception and transfer control to caller method by throwing an instance of exception
> we can only throw one instance of exception using throw keyword e.g. throw new IOException("not able to open connection").

> SYNTAX DIFFERENCE - throws is followed by class name and throw is followed by instance

=====================================
############ Stack Trace ############
> Stack Traces Are Not Just for Errors and Exceptions
-  Thread.currentThread().getStackTrace() to access an array of StackTraceElements.

> a stack trace is to recognize that it lists the execution path in REVERSE CHRONOLOGICAL ORDER from most recent operation to earliest operation.

> By default in Oracle's Java SE 6 javac, line numbers and source file names are included in stack traces. 
- It is easy to make disable the printing of this information by setting javac's -g:none option

http://www.javaworld.com/article/2073601/ten-tips-for-using-java-stack-traces.html
=====================================
## READ STACK TRACE

> Java compiler create synthetic methods on nested classes when their attributes specified with the private modifier are accessed by the enclosing class
> Method names such as access$100, access$200, access$300, access$400, access$500, access$600, and access$1000 in the stack trace reflect synthetic methods generated by the compiler.

EXAMPLE:-
public final class DemonstrateSyntheticMethods  
{  
   public static void main(final String[] arguments)  
   {  
      DemonstrateSyntheticMethods.NestedClass nested =  
         new DemonstrateSyntheticMethods.NestedClass();  
      out.println("String: " + nested.highlyConfidential);  
   }  
  
   private static final class NestedClass  
   {  
      private String highlyConfidential = "Don't tell anyone about me";  
      private int highlyConfidentialInt = 42;  
      private Calendar highlyConfidentialCalendar = Calendar.getInstance();  
      private boolean highlyConfidentialBoolean = true;  
   }  
} 

java compiler will create 
 static java.lang.String access$100(DemonstrateSyntheticMethods$NestedClass)
> it can be seen using Java Disassembler (javap.exe)
=======================================
### What is difference bet final, finally, finalize()?

> Final is a modifier that can be use with class, method and variable.
1. final variable that cannot be re-assign. it is const variable.
2. Final method cannot be override 
3. Final class cannot be inherit.

B. Finally is the block that associate with try-catch to perform some activity that is neccessary to perform if any exception occur like close the db connection or cleanup activity

C. Finalize() - it is a method which is always invoked by garbage collector just before destroying an object to perform cleanup activity.

> finally block perform cleanup activity RELATED TO TRY BLOCK but 
- finalize() perform cleanup activity RELATED TO OBJECT.

=======================================
############ BEST PRACTICES #########
## What BEST PRACTICES you follow while doing Exception handling in Java ?

>> Returning boolean instead of returning null to avoid NullPointerException at callers end.
> Non empty catch blocks
> Modify the sqlexception before throwing it to user
> calling close() methods for connections, statements, and streams in finally block.
> Throwable and Error should NOT be caught
> Never use Generic exception class like Error, RuntimeException, Throwable and Exception to handle exception 

>> System.out or System.err should not be used to log exceptions

> avoid printStackTrace() bcz its difficult to route exception in log. 
- Instead of this we can use logger.error() to log

> for arrayindexoutofBound?????

http://howtodoinjava.com/2013/04/04/java-exception-handling-best-practices/
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
http://tutorials.jenkov.com/java-exception-handling/checked-or-unchecked-exceptions.html		
