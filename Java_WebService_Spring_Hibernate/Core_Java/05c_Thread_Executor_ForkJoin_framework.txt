=======================================
##What is Thread Pool?

> A thread pool is a collection of pre-initialized threads
- it contains a queue that keeps tasks waiting to get executed.

> It represents a GROUP OF WORKER THREADS that are waiting for the job and reuse many times.
> USEFUL WHEN NEED TO LIMIT NO. OF THREADS RUNNING IN APP at same time.

> it offers a solution to both the problem of thread 
- 1. life-cycle overhead and 
- 2. the problem of resource thrashing.

> java.util.concurrent.Executors provide implementation of java.util.concurrent.Executor[i] to create the thread pool in java.
- ExecutorService executor = Executors.newFixedThreadPool(5);//creating a pool of 5 threads 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## How thread pool works in java?

> A thread pool is a collection of pre-initialized threads

> Tasks are submitted to a thread pool via an internal queue called the Blocking Queue. 
- If there are more tasks than the number of active threads, they are inserted into the blocking queue for waiting until any thread becomes available. 
- IF THE BLOCKING QUEUE IS FULL THAN NEW TASKS ARE REJECTED.

> Thread Pool life cycle as follows:
1. Get a new task to execute
2. Execute it
3. Go back to waiting for next task
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## Why Thread Pools?

> In many server app, we may want to process each client request in parallel. 
> For this, we choose traditional approach of creating one thread per request.
> CREATING LOTS OF THREAD WITH NO BOUNDS TO THE MAXIMUM THRESHOLD CAN CAUSE APP TO RUN OUT OF HEAP MEMORY. 
- So, creating a ThreadPool is a better solution as a finite number of threads can be pooled and reused. 

DISADVANTAGE of one thread per task approach
> The overhead of creating a new thread for each request is significant. 
- Server that processing requests can spend more time and 
- consume more system resources in creating and destroying threads than it would processing actual client requests.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

=======================================
############# HIERARCHY ###############

Executor[i] <--- ExecutorService[i]
ExecutorService[i] <--- AbstractExecutorService[ac]
AbstractExecutorService[ac] <--- ThreadPoolExecutor[c]
ScheduledExecutorService[i] <--- ThreadPoolExecutor[c] <--- ScheduledThreadPoolExecutor[c]
					  
> ExecutorService[i] extends Executor[i] 
> AbstractExecutorService[ac] implements ExecutorService[i]
> ThreadPoolExecutor[c] extends AbstractExecutorService[ac]
> ScheduledThreadPoolExecutor[c] extends ThreadPoolExecutor[c] impl ScheduledExecutorService[i]
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is Executor[i]?

> Executor[i] hv only 1 method 
- void execute(Runnable).

> ExecutorService[i] extends Executor[i], which is a more extensive interface. 
> The ThreadPoolExecutor class provides an extensible thread pool implementation. 
> The Executors[c] provides convenient factory methods for these Executors.
=======================================
########## ExecutorService[i] #########
> java.util.concurrent.ExecutorService[i] extends Executor[i] 
 
## What is ExecutorService?

> It is an interface that extends the behaviour of Executor[i]
- USED TO EXECUTE A RUNNABLE OR CALLABLE TASK IN ASYNCHRONOUS WAY 

- It adds features to manage the lifecycle, both of the individual tasks and of the executor itself.

> It provides us mechanisms to manage the end and detect progress of the asynchronous tasks
- run in background. 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## How to create instance of ExecutorService?

> create an ExecutorService depends on the impl we use.
1. ExecutorService es = Executors.newSingleThreadExecutor();//Executes only one thread
 
2. ExecutorService es = Executors.newFixedThreadPool(2);
 
//Internally manages thread pool of 10 threads to run scheduled tasks
3. ExecutorService es = Executors.newScheduledThreadPool(10);

4. ExecutorService es = 
new ThreadPoolExecutor(10, 100, 5L, TimeUnit.MILLISECONDS,new LinkedBlockingQueue<Runnable>());
- creates a thread pool executor with minimum thread count 10, maximum threads count 100, 5 milliseconds keep alive time and a blocking queue to watch for tasks in future.


#### ExecutorService[i] METHODS ####
1. void execute(Runnable obj) 

- execute asynchronously
- no way to obtain result of Runnable
~~~~~~~~~~~~~~~~~~~~~~~~
2. Future<?> submit(Runnable task)

- submit runnable task for execution and  
- return Future obj that can be used to check Runnable finished successfully
- Future’s get() will return null upon successful completion.
~~~~~~~~~~~~~~~~~~~~~~~~
3. <T> Future<T> submit(Runnable task, T result)

- Submits a runnable task for execution and returns a Future representing that task. 
- The Future’s get() will return the given result upon successful completion.
~~~~~~~~~~~~~~~~~~~~~~~~
3. <T> Future<T> submit(Callable<T> task) 

- similar to submit(Runnable) 
- submits a value-returning task for execution and returns a Future representing pending results of the task. 
- her Callable make use of call() that return result
~~~~~~~~~~~~~~~~~~~~~~~~
4. List<Future<T>> invokeAny() 

- take collection of Callable obj or subinterface
- does not return Future obj, but return result of Callable obj
- No guarantee abt which Callable result we get.
~~~~~~~~~~~~~~~~~~~~~~~~
5. List<Future<T>> invokeAll(Collection tasks):

- invokes all of the Callable obj we pass
> return list of Future obj for result of each Callable.
> task might finish due to an exception

> task wait for other tasks to complete in the list and then we can get the result using future.get()
~~~~~~~~~~~~~~~~~~~~~~~~
List<Future> invokeAll(Collection tasks, timeOut, timeUnit) 
– executes the given tasks, returning a list of Futures holding their status and results when all complete or the timeout expires.
~~~~~~~~~~~~~~~~~~~~~~~~
6. void shutdown(): 

- allow previously submitted tasks to execute before terminating
- it will not shutdown immediately but NO LONGER ACCEPT NEW TASKS
~~~~~~~~~~~~~~~~~~~~~~~~
7. List<Runnable> shutdownNow() 
- it interrupts the running task and shuts down the executor immediately
- Note that if your tasks ignore the interruption, shutdownNow will behave exactly the same way as shutdown

> prevents waiting tasks from starting and attempts to stop currently executing tasks.

> Upon termination, an executor has no tasks actively executing, no tasks awaiting execution, and no new tasks can be submitted. 
> An unused ExecutorService should be shut down to allow reclamation of its resources.
~~~~~~~~~~~~~~~~~~~~~~~~
8. boolean awaitTermination(long timeout, TimeUnit unit);

- it is used in order to wait i.e. block until 
- all tasks/threads have completed execution after a shutdown request, OR 
- the timeout occurs, OR 
- the current thread is interrupted, whichever happens first
~~~~~~~~~~~~~~~~~~~~~~~~
9 boolean isShutdown();

> These methods define in AbstractExecutorService[C]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is Executor framework?

> it is a framework for standardizing invocation, scheduling, execution, and control of asynchronous tasks according to a set of execution policies.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is the benefits of Executor framework?

> The framework mainly separates task creation and execution. 
- Task creation is mainly boiler plate code and is easily replaceable.

> With an executor, we have to create tasks which implement either Runnable[i] or Callable[i] and send them to the executor.

> EXECUTOR INTERNALLY MAINTAIN a (configurable) THREAD POOL TO IMPROVE APP PERFORMANCE by avoiding the continuous spawning of threads.

> Executor is responsible for executing the tasks, running them with the necessary threads from the pool.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
### What is diff bet Executor.submit() and Executor.execute()?

> submit() can be used to invoke runnable/callable thread and return object in the form of Future object.
- execute() is used to invoke only Runnable task and it doesn't return anything.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is a ScheduledExecutorService[i] ?

> it extends ExecutorService[i]
> It is used to execute a task either periodically or after a specified delay
> it have below methods
- ScheduledFuture<V> schedule(Callable<V> c,long delay, TimeUnit);


> it adds method that allow to submit new tasks to the underlying impl that should be executed a given point in time.

> There are two methods to schedule one-shot tasks and two methods to create and execute periodic tasks.
=======================================
######## ThreadPoolExecutor[c] ########
> It provide multiple constructors to create Thread pool.

#### CONSTRUCTORS ####
1. ThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime,
 TimeUnit unit, BlockingQueue<Runnable> workQueue) 

2. ThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime,
 TimeUnit unit, BlockingQueue<Runnable> workQueue, RejectedExecutionHandler handler) 

3. ThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime,
 TimeUnit unit, BlockingQueue<Runnable> workQueue, ThreadFactory threadFactory) 

4. ThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, 
TimeUnit unit, BlockingQueue<Runnable> workQueue, ThreadFactory threadFactory, 
RejectedExecutionHandler handler) 

#### Number of threads(N) #### 
- thread instances currently in the pool. This number gradually increases as more task are submitted to the pool.

#### corePoolSize (C)  ####
> defines HOW MANY THREADS CAN AT MOST BE CREATED PER POOL for the incoming tasks before the new tasks go to the queue.
- This value can be changed dynamically by using setMaximumPoolSize(int corePoolSize)

1. If N<= C then create a new Thread to run a new task.
- idle threads are not assigned to the new incoming task.

2. If N >= C, if there are some idle threads then new task is assigned there, otherwise they are put into the queue.

3. If the queue is full and N < M , create a new thread to run tasks in.

4. If the queue is full, and N >= M then reject the task.

#### maximumPoolSize (M) ####
- maximum size of the pool

#### keepAliveTime ####
> When N > C (corePoolSize) then idle threads are monitored for how long they have been idle. 
- ON CROSSING keepAliveTime, IDLE THREADS ARE TERMINATED (removed from the pool).

> EXAMPLE : Starting thread pool size is 1, corePoolSize=5,maximumPoolSize=10 and the queue is 100 like new ArrayBlockingQueue<Runnable>(100):
- as requests come in threads will be created up to 5, 
- then tasks will be added to the queue until it reaches 100. 
- When the queue is full new threads will be created up to maxPoolSize. 
- Once all the threads are in use and the queue is full tasks will be rejected. 
- As the queue reduces so does the number of active threads.

#### workQueue ####
> queues can be bounded (e.g. ArrayBlockingQueue) or 
- it can be unbounded (e.g. LinkedBlockingQueue).

#### handler ####
> An instance of RejectedExecutionHandler to use when the tasks are submitted beyond the pool maximum size. 
- This handler takes care of what action needs to be taken for new tasks submissions at this point.

ThreadPoolExecutor provides four out of the box nested implementation to be used:

1. ThreadPoolExecutor.AbortPolicy: 
- This is the default rejection policy. It throws RejectedExecutionException:

        public static class AbortPolicy implements RejectedExecutionHandler {

          public void rejectedExecution(Runnable r, ThreadPoolExecutor e) {
            throw new RejectedExecutionException("Task " + r.toString() +
                                                 " rejected from " +
                                                 e.toString());
          }
        }

2. ThreadPoolExecutor.CallerRunsPolicy: 
- Instead of rejecting the task, it is attempted to run in the caller thread:

 public static class CallerRunsPolicy implements RejectedExecutionHandler {

        public void rejectedExecution(Runnable r, ThreadPoolExecutor e) {
            if (!e.isShutdown()) {
                r.run();
            }
        }
    }
Using this will obviously slow down the rate that new tasks are submitted.


3. ThreadPoolExecutor.DiscardPolicy: The task is quietly rejected:
        public static class DiscardPolicy implements RejectedExecutionHandler {

          public void rejectedExecution(Runnable r, ThreadPoolExecutor e) {

          }
        }
ThreadPoolExecutor.DiscardOldestPolicy: It removes the oldest task in the queue and executes the new one right away instead of rejecting it:
        public static class DiscardOldestPolicy implements RejectedExecutionHandler {

           public void rejectedExecution(Runnable r, ThreadPoolExecutor e) {
             if (!e.isShutdown()) {
                e.getQueue().poll();
                e.execute(r);
           }
          }
        }

> It provides a lot of methods to obtain information about its status. 
EXAMPLE : getPoolSize(), getActiveCount(), and getCompletedTaskCount() 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## How to create ThreadPoolExecutor[c]?

> ThreadPoolExecutor[c] has 4 different constructors with adjustable parameters 
- but, due to their complexity, the Java concurrency API provides the Executors[c] to construct executors and other related objects. 
- IT’S RECOMMENDED TO USE THE Executors[c]

> 5 types of ThreadPoolExecutor

1. Fixed thread pool executor 
ThreadPoolExecutor executor = (ThreadPoolExecutor) Executors.newFixedThreadPool(10);

2. Cached thread pool executor 
ThreadPoolExecutor executor = (ThreadPoolExecutor) Executors.newCachedThreadPool();

3. Scheduled thread pool executor 
ThreadPoolExecutor executor = (ThreadPoolExecutor) Executors.newScheduledThreadPool(10);

4. Single thread pool executor 
ThreadPoolExecutor executor = (ThreadPoolExecutor) Executors.newSingleThreadExecutor();

5. Work stealing thread pool executor 
ThreadPoolExecutor executor = (ThreadPoolExecutor) Executors.newWorkStealingPool(4);
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

=======================================
############# EXECUTORS ############
## What is Executors[c]?

> Since Java5 under "java.util.concurrent" package.

> Executors is a utility class that provides factory methods for creating the implementations of the ExecutorService[i]

> It is FACTORY CLASS that PROVIDE METHODS FOR CREATING THREAD POOLS. 

>> it PROVIDE UTILITY METHODS for Executor[i], ExecutorService[i], ScheduledExecutorService[i], ThreadFactory, and Callable classes.

> We can create following 5 types of thread pool executors with pre-built methods in java.util.concurrent.Executors[i]
> it is only class that support execution of Callable impl.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
########### METHODS #############
> It contains below public static methods 

=======================================
####### 1. Fixed ThreadPool ###########

> Creates a thread pool that REUSES A FIXED NUMBER OF THREADS operating off a shared unbounded queue. 
- If additional tasks are submitted when all threads are active, TASKS WILL WAIT IN THE QUEUE UNTIL A THREAD IS AVAILABLE. 

> If any thread terminates due to a failure during execution prior to shutdown, a new one will take its place if needed to execute subsequent tasks. 
> The threads in the pool will exist until it is explicitly shutdown.

EXAMPLE:
ExecutorService es = Executors.newFixedThreadPool(int);
=======================================
####### 2. Single ThreadPool ##########

> Creates an Executor that USE A SINGLE WORKER THREAD operating off an unbounded queue.
- if this single thread terminates due to a failure during execution prior to shutdown, a new one will take its place if needed to execute subsequent tasks.

> TASKS ARE GUARANTEED TO EXECUTE SEQUENTIALLY, AND NO MORE THAN ONE TASK WILL BE ACTIVE AT ANY GIVEN TIME. 
- newFixedThreadPool(1) is equivalent to newSingleThreadExecutor but 
- newSingleThreadExecutor give guarantee it cannot be reconfigurable to use additional thread 

EXAMPLE:
ExecutorService es = Executors.newSingleThreadExecutor();
=======================================
####### 4. Scheduled ThreadPool #######

> It creates a thread pool that can schedule commands TO RUN AFTER A GIVEN DELAY, OR TO EXECUTE PERIODICALLY
- execute a task, REPEATEDLY N TIMES, EITHER N FIXED NUMBER OF TIMES OR INFINITIVELY AFTER FIXED DELAY.

ScheduledExecutorService ses = Executors.newScheduledThreadPool(int corePoolSize);
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
########### METHODS #############
> It provides 4 methods which provide different capabilities to execute the tasks in repeated manner.

1. ScheduledFuture schedule(Runnable command, long delay, TimeUnit unit) 
– Creates and executes a task that becomes enabled after the given delay.

2. ScheduledFuture schedule(Callable callable, long delay, TimeUnit unit) 
– Creates and executes a ScheduledFuture that becomes enabled after the given delay.

3. ScheduledFuture scheduleAtFixedRate(Runnable command, long initialDelay, long delay, TimeUnit unit) 
– Creates and executes a periodic action that becomes enabled first after the given initial delay, and subsequently with the given delay period. 
- If any execution of this task takes longer than its period, then SUBSEQUENT EXECUTIONS MAY START LATE, but will not concurrently execute.

4. ScheduledFuture scheduleWithFixedDelay(Runnable command, long initialDelay, long delay, TimeUnit unit) – 
- Creates and executes a periodic action that becomes enabled first after the given initial delay, and subsequently with the given delay period. 
- No matter how much time a long running task takes, there will be a FIXED DELAY TIME GAP BETWEEN TWO EXECUTIONS.

=======================================
####### 4. Cached ThreadPool ##########

– Creates a thread pool that CREATES NEW THREADS AS NEEDED, BUT WILL REUSE PREVIOUSLY CONSTRUCTED THREADS WHEN THEY ARE AVAILABLE. 
- DO NOT use this thread pool if tasks are long running. It can bring down the system if number of threads goes beyond what system can handle.

ExecutorService es = Executors.newCachedThreadPool();
- Callable<Object> callable(Runnable)
- Callable<T> callable(Runnable, Object)
=======================================
####### 5. Work stealing ThreadPool ###

– Creates a thread pool that maintains enough threads to support the given parallelism level. 
- Here parallelism level means the maximum number of threads which will be used to execute a given task, at single point of time, in multi-processor machines.

ThreadPoolExecutor executor = (ThreadPoolExecutor) Executors.newWorkStealingPool(4);
=======================================
############ FORK / JOIN ##############
> Since Java7

> FORK/JOIN framework is an implementation of the ExecutorService[i] that helps to take advantage of multiple processors.
> It is designed for work that can be broken into smaller pieces recursively. 
> It distributes tasks to worker threads in a thread pool
> fork/join framework is distinct because it uses a WORK-STEALING ALGORITHM.
> Worker threads that run out of things to do can steal tasks from other threads that are still busy.

> core classes supporting the Fork-Join mechanism are ForkJoinPool and ForkJoinTask

## FORK AND JOIN PRINCIPLE ##
fork and join principle consists of 2 steps i.e fork and join steps which are performed recursively.

1. FORK - A task that uses the fork and join principle can fork (split) itself into smaller subtasks which can be executed concurrently.
2. JOIN - When a task has split itself up into subtasks, the task waits until the subtasks have finished executing.

############ ForkJoinPool ###########
- ForkJoinPool extends AbstractExecutorService

## What is ForkJoinPool?

> It is a special thread pool which is designed to work well with ForkJoinTask
> It is basically a specialized implementation of ExecutorService IMPLEMENTING THE WORK-STEALING ALGORITHM
> It maintains a number of threads, which number is typically based on the number of CPUs available

> we can submit two types of tasks. 
- RecursiveAction[c] - A task that does not return any result (an "action"), and 
- RecursiveTask[c] - a task which does return a result (a "task"). 

EXAMPLE:
int numberOfProcessors = Runtime.getRunTime().availableProcessors();//indicate level of parallelism
ForkJoinPool pool = new ForkJoinPool(numberOfProcessors);

- If no-argument pass then by default, it creates a pool of size that equals the number of available processors obtained.
- pool adjusts its size dynamically in an attempt to maintain enough active threads 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## How ForkJoinPool work?

> Each thread has a special kind of queue, Deques, where all its tasks are placed
- threads do not share a common queue, but each thread has its own queue 

> threads put aside a task which are blocked/waiting for someother task
In other words, if the current task cannot proceed (as it performs a join on a subtask), then it is placed on this queue until all of its dependencies are ready.

> tasks are added to the thread’s queue (using the fork operation) and each thread always processes the last task added to its queue (i.e LIFO maner)

> Any idle threads can take tasks from the other threads queues if available, that is, work-stealing
- A thread will always steal oldest tasks from some other thread’s queue

http://www.javacreed.com/java-fork-join-example/
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is difference between ForkJoinPool and other ExecutorService?

> main difference between Fork/Join and Executor frameworks is the work-stealing algorithm. 

> In Fork-Join, pool need NOT be EXPLICITLY SHUTDOWN upon program exit because all its THREADS ARE IN DAEMON MODE.

three different ways of submitting a task to the ForkJoinPool.

1) execute() method //Desired asynchronous execution; call its fork method to split the work between multiple threads.
2) invoke() method: //Await to obtain the result; call the invoke method on the pool.
3) submit() method: //Returns a Future object that you can use for checking status and obtaining the result on its completion.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## Is there existing Implementations in JDK which use Fork-Join framework?

> In Java8, for parallelSort() of java.util.Arrays[c]
- Parallel sorting of large arrays is faster than sequential sorting when run on multiprocessor systems.

> Parallelism used in Stream.parallel()
========================================