=======================================
## What are the Different ways to make any application thread safe?

> We can make any app thread safe using :-
1. Re-entrancy
2. Mutual Exclusion (synchronization)
3. Thread Local
4. Atomic operation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What do you mean by thread-safety?

> A class is thread-safe if it behaves correctly when accessed from multiple threads, 
- regardless of the scheduling or interleaving of the execution of those threads by the runtime environment, and 
- with no additional synchronization or other coordination on the part of the calling code.
=======================================
########### SYNCHRONIZATION ###########

##What is Synchronization?

> Synchronization is the process to control the access any shared resource by multiple threads
> Synchronization in Java is possible by using Java keywords "synchronized" and "volatile”
> synchronization is BASED ON OBJECT MONITOR.
- TWO KINDS OF MONITOR REGIONS: synchronized statements and synchronized methods. 

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## Why do we need Synchronization?

> we need synchronization for objects, which are shared among multiple threads, 
- to avoid any corruption of state or 
- any kind of unexpected behavior. 

> Synchronization will only be needed if shared object is mutable. 
- if your shared object is either read-only or immutable object, then we don't need synchronization, despite running multiple threads

> CANNOT USE SYNCHRONIZED WITH CONSTRUCTOR it’s illegal and result in compilation error.

The synchronization is mainly used to
> To prevent thread interference.
> To prevent memory consistency problem.

http://javarevisited.blogspot.in/2011/04/synchronization-in-java-synchronized.html#axzz4sZOoYUxv
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
There are two types of synchronization
> Process Synchronization 
> Thread Synchronization

> Java's monitor supports TWO KINDS OF THREAD SYNCHRONIZATION: mutual exclusion and cooperation. 
1. MUTUAL EXCLUSION : 
- it is SUPPORTED USING OBJECT LOCKS in the JVM , 
- it enables multiple threads to independently work on shared data without interfering with each other. 
- 3 ways to do -
	a. Synchronized method.
	b. Synchronized block.
	c. static synchronization.
	
2. COOPERATION (Inter-thread communication in java): 
- it is supported using wait() and notify() of class Object in the JVM.
- it enables threads to work together towards a common goal.

https://www.artima.com/insidejvm/ed2/threadsynch.html
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is the difference between a synchronized method and a synchronized block ?

> Scope of synchronized block is smaller than the method

> Using Synchronized method : thread acquire locks on current object (this)
- Using Synchronized block : thread acquire locks on an object by using the synchronized keyword. 

> The synchronized keyword can be applied in a method level (coarse grained lock) or block level of code (fine grained lock).

> CAN NOT HAVE SYNCHRONIZED VARIABLE. 
- Using synchronized keyword with a variable is illegal and will result in compilation error. 

SYNCHRONIZED METHOD
public synchronized void demoMethod(){}

SYNCHRONIZED BLOCK
public void demoMethod(){
  synchronized (this){
  	//other thread safe code
  }
}
- here if "this" can be any object and if object is null then NPE.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## Where does object lock store in memory?

> synchronized keyword involve locking and unlocking. 
- before entering into synchronized method or block thread needs to acquire the lock,
- at this point it READS DATA FROM MAIN MEMORY THAN CACHE AND WHEN IT RELEASE THE LOCK, IT FLUSHES WRITE OPERATION INTO MAIN MEMORY which eliminates memory inconsistency errors.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## Can a thread hold multiple locks at the same time?

> YES. A THREAD CAN HOLD MULTIPLE LOCKS AT THE SAME TIME. 
> Once a thread acquires a lock and enters into the synchronized method/block, it may call another synchronized method and acquire a lock on another object.
- each time when thread aquire lock, lock count increase and decrease when the lock release. 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##Can a thread call multiple synchronized methods on the object of which it hold the lock?

> Yes. Once a thread acquires a lock in some object, it may call any other synchronized method of that same object using the lock that it already holds.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##What happens when I make a static method as synchronized?

> If you make any static method as synchronized, the lock will be on the class not on object
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##Can two threads call two different static synchronized methods of the same class?

> No. The static synchronized methods of the same class always block each other as only one lock per class exists. 
> So 2 STATIC SYNCHRONIZED METHODS CANN'T EXECUTE AT THE SAME TIME.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## Does a static synchronized method block a non-static synchronized method?
## Can both static and nonstatic java synchronized method running in parallel?

> No, As the thread executing the static synchronized method holds a lock on the class and 
- the thread executing the non-satic synchronized method holds the lock on the object on which the method has been called, 
- these two locks are different and these threads do not block each other.

EXAMPLE: 
public class Counter{
  private static int count = 0;

  public static synchronized int getCount(){
    return count;
  }

  public synchoronized setCount(int count){
     this.count = count;
  }
}
- here 2 THREADS CAN RUN IN PARALLEL and can access getCount and setCount	
=======================================
######### JAVA SYNCHRONIZERS ##########

> Java also provide five classes for common special-purpose synchronization.
1. CountDownLatch
2. CyclicBarrier
3. Semaphore
4. Exchanger
5. Phaser
=======================================
########## CountDownLatch[c] ##########
> Since Java5
## What is CountDownLatch class?

> It is a KIND OF SYNCHRONIZER which ALLOWS ONE THREAD TO WAIT FOR ONE OR MORE THREADS BEFORE STARTS PROCESSING. 
- it is used when threads hv to wait for some other threads that reached to some state then only waiting thread starts

> it PROVIDE SYNCHR. COUNTER THAT DECREASE TILL 0 then only it instance proceed other thread

> It is MAINLY USED IN SERVER SIDE CORE JAVA APPLICATION WHICH USES SERVICES ARCHITECTURE 
- where multiple services is provided by multiple threads and application can not start processing until all services have started successfully 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## How CountDownLatch works?

> defines one constructor : CountDownLatch(int count) 
- Here count : number of threads, for which latch should wait. 
- This value can be SET ONLY ONCE, and it DOESN'T PROVIDES ANY OTHER MECHANISM TO RESET THIS COUNT

> first interaction with CountDownLatch is with main thread which is goind to wait for other threads. 
- This main thread must call, CountDownLatch.await() method immediately after starting other threads. 
- The execution will stop on await() method till the time, other threads complete their execution.

> Other N threads must have reference of latch object, because they will need to notify the CountDownLatch object that they have completed their task.
- This notification is done by method : CountDownLatch.countDown();

EXAMPLE:
public static void main(String args[]) {
  final CountDownLatch latch = new CountDownLatch(3);
    
  Thread cacheService = new Thread(new Service("CacheService", 1000, latch));
  Thread alertService = new Thread(new Service("AlertService", 1000, latch));
  Thread validationService = new Thread(new Service("ValidationService", 1000, latch));
    
  cacheService.start(); //separate thread will initialize CacheService
  alertService.start(); //another thread for AlertService initialization
  validationService.start();
    
  // application should not start processing any thread until all service is up
  //each thread once up and read will do a count down. 
    
  try{
    latch.await();  //main thread is waiting on CountDownLatch to finish
    System.out.println("All services are up, Application is starting now");
  }catch(InterruptedException ie){
    ie.printStackTrace();
  }      
}

class Service implements Runnable{
  private final String name;
  private final int timeToStart;
  private final CountDownLatch latch;
  
  public Service(String name, int timeToStart, CountDownLatch latch){
    this.name = name;
    this.timeToStart = timeToStart;
    this.latch = latch;
  }

  public void run() {
    try {
      Thread.sleep(timeToStart);
    } catch (InterruptedException ex) {
      Logger.getLogger(Service.class.getName()).log(Level.SEVERE, null, ex);
    }
    System.out.println( name + " is Up");
    latch.countDown(); //reduce count of CountDownLatch by 1
  }
}
=======================================
########### CyclicBarrier #############
> java.util.Concurrent package
 
> It is USED WHEN MULTIPLE THREAD CARRY OUT DIFFERENT SUB-TASKS AND OUTPUT OF THESE SUB-TASKS NEED TO BE COMBINED TO FORM THE FINAL OUTPUT. 
- After completing its execution, threads call await() and wait for other threads to reach the barrier. 
- Once all the threads have reached, the barriers then give the way for threads to proceed.

CyclicBarrier newBarrier = new CyclicBarrier(numberOfThreads);

#### METHODS ####
1. public int getParties() 
- returns the number of parties required to trip this barrier

2. public void reset()
- resets the barrier to its initial state. 
- If any parties are currently waiting at the barrier, they will return with a BrokenBarrierException.

3. boolean isBroken() 
- queries if this barrier is in broken state. 

4. int getNumberWaiting()
 - return the number of parites currently waiting at the barrier. 
 
5. public int await() throws InterruptedException, BrokenBarrierException
- waits until all parties have invoked await on this barrier. 
- it returns the arrival index of the current thread 
- Here 1 indicates the first to arrive and zero indicates the last to arrive. 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## BrokenBarrierException

> A barrier breaks when any of the waiting thread leaves the barrier. 
- This happens when one or more waiting thread is interrupted or when the waiting time is completed because the thread called the await() methods with a timeout as follows:

newBarrier.await(1000, TimeUnit.MILLISECONDS);
// thread calling this await() 
// methods waits for only 1000 milliseconds.

When the barrier breaks due to one of more participating threads, the await() of all the other threads throws a BrokenThreadException. Whereas, the threads that are already waiting in the barriers have their await() call terminated.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is the difference bet CountDownLatch and CyclicBarrier?

SIMILARITY
> Both classes maintain INTERNAL COUNTER that is decremented by different threads
>
DIFFERENCE
> CountDownLatch class DOESNOT RESET ITS COUNTER
- CyclicBarrier RESETS THE INTERNAL VALUE back to the initial value once the value reaches zero

> CountDownLatch can be used by the Main Thread to wait on the Child Threads. 
- CyclicBarrier can be used to enable waiting on Threads until each other finish.

> CountDownLatch is a top down waiting where as 
- CyclicBarrier is across waiting.

=======================================
############# SEMAPHORE ###############
> Since Java5 in the java.util.concurrent package

## What is Semaphore?

> It is a thread synchronization.
> It maintains a set of permits (tickets), 
- each acquire() will take a permit (ticket) from semaphore, 
- each release() will return back the permit (ticket) back to the semaphore. 
- If permits (tickets) are not available, acquire() will block until one is available.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## Scenerio where we can use Semaphore?

> It is used to limit the number of concurrent threads accessing a specific resource.

) To implement better Database connection pool which will block if no more connection is available instead of failing and handover Connection as soon as its available.

2) To put a bound on collection classes. by using semaphore you can implement bounded collection whose bound is specified by counting semaphore.


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is difference bet Semaphore and Mutex?

> Semaphores – Restrict the number of threads that can access a resource. Example, limit max 10 connections to access a file simultaneously.

> Mutex – Only one thread to access a resource at once. Example, when a client is accessing a file, no one else should have access the same file at the same time.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
=======================================
############## ATOMIC #################
## What is atomic operation? What are atomic classes in Java Concurrency API?

> an operation which is performed as a single unit of work without the possibility of interference from other operations.

> Java language specification guarantees that reading or writing a variable is an atomic operation(unless the variable is of type long or double ). 
- Operations variables of type long or double are only atomic if they declared with the volatile keyword.

> int++ is not an atomic operation. 
- So by the time 1 threads read value and increment by 1, other thread read old value leads to wrong result.

> it come under java.util.concurrent.atomic package
> it performed in a single unit of task 
- it perform to avoid data inconsistency.



> To solve this issue, we can use Synchronization 
- but Java 5 java.util.concurrent.atomic provides wrapper classes for int and long that achieve this atomically without usage of Synchronization. 
- count.incrementAndGet() is atomic operation and equal to count++;
=====================================
############### LOCKS ###############
> it come under java.util.concurrent.locks package

## What is Lock[i] in Java Concurrency API? What are it’s benefits over synchronization?

> Lock[i] PROVIDE MORE EXTENSIVE LOCKING OPERATIONS
> The ADVANTAGES of a lock are
- to make them fair
- to make a thread responsive to interruption while waiting on a Lock object.
- to try to acquire the lock, but return immediately or after a timeout if the lock can’t be acquired
- to acquire and release locks in different scopes, and in different orders

######## METHODS ########
## void lock() 
– acquire the lock if it's available; if the lock isn't available a thread gets blocked until the lock is released

## void lockInterruptibly() 
– this is similar to the lock(), but it allows the blocked thread to be interrupted and resume the execution through a thrown java.lang.InterruptedException

## boolean tryLock() 
– this is a non-blocking version of lock() method; it attempts to acquire the lock immediately, return true if locking succeeds

## boolean tryLock(long timeout, TimeUnit timeUnit) 
– this is similar to tryLock(), except it waits up the given timeout before giving up trying to acquire the Lock

## void unlock() 
– unlocks the Lock instance
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

=======================================
########### ReadWriteLock[i] ###########
> It contains pair of associated locks, one for read-only operations and another one for writing. 
- READ LOCK: multiple threads can be acquired read lock simultaneously if there is no write lock request
- WRITE LOCK: If a thread acquires write lock on a resource, then no other read or writes lock by any thread 
- The write lock is exclusive.

> STARVATION - it occur If new threads were constantly granted read access and the thread waiting for write access would remain blocked indefinately, resulting starvation
 
=======================================
########### ReentrantLock[c] ###########
## What is ReentrantLock ?

> it is concrete impl of Lock[i]. 
> Since Java5
> it is mutual exclusive lock similar to synchr 
> it include additional features of FAIRNESS of long waiting thread.
> Lock is acquired by lock() tht can be held by Thread until it call unlock() 

> SYNCHRONIZED BLOCK ARE REENTRANT IN NATURE i.e. 
- if a thread has lock on the monitor object and if another synchronized block requires to have the lock on the same monitor object then 
- thread can enter that code block

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is difference between ReentrantLock and Synchronized block(SB) ?

> The main difference is ability to trying for lock interruptibly, and with timeout. 
- Thread doesn’t need to block infinitely, which was the case with synchronized

## FAIRNESS
> Synchronized block doesn't support fairness. Any thread can acquire lock once released, no preference can be specified, 
- ReentrantLock can be fair by specifying fairness property, while creating instance of ReentrantLock. 
- Fairness property provides lock to longest waiting thread, in case of contention.

## TryLock
> In Synchronized block, A thread gets blocked if it can't get an access to SB. 
> ReentrantLock provides tryLock() which acquires lock only if its available or not held by any other thread
- This reduce blocking of thread waiting for lock

## lockInterruptibly
> For Synchronized block, thread can't be interrupted, it will be in “waiting” state to acquire the access of SB
> ReentrantLock introduce the ability to interrupt Thread while waiting for Lock.
- it provide lockInterruptibly(), used to interrupt thread when it is waiting for lock.
- tryLock() with timeout can also be use

> it provide methods to get List of all thread waiting for lock.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What are the DISADVANTAGE OF REENTRANTLOCK?

> wrapping method body inside try-finally block make code unreadable and hide business logic.

> Aquiring and releasing lock is in hand of prgmr, it need to be use efficiently otherwise may cause bug.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~--
> Synchronized use intrinsic locks or monitor of obj
LIMITATIONS of intrinsic locking mechanism:

1 It is not possible to interrupt a thread waiting to acquire a lock (lock Interruptibly).
2 It is not possible to attempt to acquire a lock without being willing to wait for it forever (try lock).
3 Cannot implement non-block-structured locking disciplines, as intrinsic locks must be released in the same block in which they are acquired.
=======================================
###### ReentrantReadWriteLock[c] ######

> ReentrantReadWriteLock is the implementation of ReadWriteLock[i] and ReadWriteLock extends Lock[i]
> Similar to ReentrantLock, it also allows a thread to acquire the read lock or write lock multiple times recursively, thus the word “Reentrant”.

> It maintains two separate locks, one for reading and one for writing:
- Lock readLock = rwLock.readLock();
- Lock writeLock = rwLock.writeLock();

> ReentrantReadWriteLock CAN BEHAVE AS FAIR AND NON-FAIR MODE BOTH. 
- The default behavior is non-fair. 
- The performance of non-fair lock is better though it is possible that a READER OR WRITER LOCK CAN BE POSTPONED MANY TIMES which are continuously trying to lock.
- In case of FAIR LOCK the locking request is fulfilled in the order that either the longest waiting single writer lock or the group of read locks request, whosoever has longest waiting time will acquire lock on the shared resource. 

> Then you can use the read lock to safeguard a code block that performs read operation like this:
readLock.lock(); 
try {
    // reading data
} finally {
    readLock.unlock();
}

> And use the write lock to safeguard a code block that performs update operation like this:
writeLock.lock();
try {
    // update data
} finally { 
    writeLock.unlock();
}

> A ReadWriteLock implementation guarantees the following behaviors:
1. Multiple threads can read the data at the same time, as long as there’s no thread is updating the data.
2. Only one thread can update the data at a time, causing other threads (both readers and writers) block until the write lock is released.
3. If a thread attempts to update the data while other threads are reading, the write thread also blocks until the read lock is released.

- It can be used to add concurrency features to a data structure, but it doesn’t guarantee the performance because 
- it depends on various factors: how the data structure is designed, the contention of reader and writer threads at real time, CPU architecture (single core  or multicores), etc.
=======================================
############# CONDITION ###############

1 Condition: 
it objs similar to Obj wait-notify model 
- A Condition object is always created by Lock object. 
- it methods are await() ~ wait() ,
 - signal(), signalAll() ~ notify(), notifyAll().
=======================================
############ StampedLock ##############
## What is StampedLock?
=======================================
##How to find a deadlock has occurred in Java? How to detect a Deadlock in Java?

> Earlier versions of Java had no mechanism to handle/detect deadlock. 
> Since JDK 1.5 there are some powerful methods added in the java.lang.management package to diagnose and detect deadlocks. 
> The java.lang.management.ThreadMXBean interface is management interface for the thread system of the Java virtual machine. 
- It has two methods which can leveraged to detect deadlock in a Java application.

1. findMonitorDeadlockedThreads() 
- This method can be used to detect cycles of threads that are in deadlock waiting to acquire object monitors. 
- It returns an array of thread IDs that are deadlocked waiting on monitor.

2. findDeadlockedThreads() - It returns an array of thread IDs that are deadlocked waiting on monitor or ownable synchronizers.

 import java.lang.management.ThreadMXBean;        
      {...
        ThreadMXBean bean = ManagementFactory.getThreadMXBean();
        System.out.println("Bean: " + bean);
            ...
        System.out.println("Monitor deadlocked threads: " + bean.findMonitorDeadlockedThreads());
       long[] ids = bean.getAllThreadIds();
	   
================================

##What is Scheduler?

> it is process that implemented with scheduler algo. used to manage process and thread to access critical resource.
> it provide load balancing bet avail process and thread
