##What is Functional Programming?
> It is programming style that treat computation as the evaluation 
> its a style of programming where you FOCUS ON TRANSFORMING DATA THROUGH THE USE OF SMALL EXPRESSIONS THAT IDEALLY DON’T CONTAIN SIDE EFFECTS.

EXAMPLE = 
f(x) = x^2
f(a,b) = a2 +b2 +2ab
f(a,b)= f(a)+f(b)+2ab 

Similarly in programming lang., we have use function that doesn't have any side effect. as a building block of another function.
> In Functional programming, pass immutable data would not lead to concurrency issue 
> function should not involve in modifying the scope of it.
----------------------------------------
> Functions should be stateless in Functional style programming.  
- That means, they should not using any state of the objects data or maintain some state outside its scope for its execution.
- By maintaining state, it could possibly lead to concurrency issue 

##Where should we use Functional programming?
> When there is continous changes in data require like a stream of data to modify.
=======================================
########### LAMBDA EXPRESSION #########
> Since Java8

## What is Lambda expression?
> It is an anonymous function that can be referenced and passed around as an object
- It comprises of a set of parameters, a lambda operator (->) and a function body.
- the lambda expressions are represented as objects, and so they must be bound to a particular object type known as a Functional Interface. This is called the target type.

## The Parameters ##
- A lambda expression can receive zero, one or more parameters.
- The type of the parameters can be explicitly declared or it can be inferred from the context.
- Parameters are enclosed in parentheses and separated by commas.
- Empty parentheses are used to represent an empty set of parameters.
- When there is a single parameter, if its type is inferred, it is not mandatory to use parentheses.

## The Body ##
- The body of the lambda expression can contain zero, one or more statements.
- When there is a single statement curly brackets are not mandatory and the return type of the anonymous function is the same as that of the body expression.
- When there is more than one statement then these must be enclosed in curly brackets (a code block) and the return type of the anonymous function is the same as the type of the value returned within the code block, or void if nothing is returned.


EXAMPLE - 
n -> n % 2 != 0;
- Given a number n returns a boolean indicating if it is odd.

(char c) -> c == 'y';
Given a character c returns a boolean indicating if it is equal to ‘y’.

(x, y) -> x + y;
- Given two numbers x and y returns another number with their summation.

(int a, int b) -> a * a + b * b;
- Given two integers a and b returns another integer with the sum of their squares.

() -> 42
- Given no parameters returns the integer 42.

() -> { return 3.14 };
Given no parameters returns the double 3.14.

(String s) -> { System.out.println(s); };
Given a string s prints the string to the main output and returns void.

() -> { System.out.println("Hello World!"); };
Give no parameters prints Hello World! to the main output and returns void.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
> It is replacement for anonymous classes as method arguments
> One issue with anonymous classes is that if the implementation of your anonymous class is very simple, such as an interface that contains only one method, 
- then the syntax of anonymous classes may seem unwieldy and unclear. 
- In these cases, We're usually trying to pass functionality as an argument to another method.
- Lambda expressions enable us to do this, to treat functionality as method argument, or code as data.


> lambda expressions are Java's first step into functional programming.
- Functional programming is very often used to implement event listeners
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## Why use Lambda expression?

> It is used to define inline implementation of Functional interface.
> It  eliminates the need of anonymous class
> Less coding.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## Explain the syntax and characteristics of a Lambda Expression?

> A lambda expression consists of two parts: 
- the parameter part and the expressions part separated by a forward arrow as below:
params -> expressions

Any lambda expression has the following characteristics:
1. OPTIONAL TYPE DECLARATION
> parameters type declaration is optional.
> compiler can infer them from their values

2. OPTIONAL PARENTHESES 
> when only a single parameter is declared, we don’t need to place it in parentheses. 
- This means param -> … and (param) -> … are all valid. 

> But when more than one parameter is declared, parentheses are required

3. OPTIONAL CURLY BRACES 
> when the expressions part only has a single statement, there is no need for curly braces. 
- This means that param – > statement and param – > {statement;} are all valid. 

> But curly braces are required when there is more than one statement

4. OPTIONAL RETURN STATEMENT 
> when the expression returns a value and it is wrapped inside curly braces, then we don’t need a return statement. 
- That means (a, b) – > {return a+b;} and (a, b) – > {a+b;} are both valid
=======================================
######### METHOD REFERENCE ############

## What is a method reference?
> it can be used for referencing a method of Functional Interface without invoking it. 
- It is USED FOR TREATING METHODS AS LAMBDA EXPRESSIONS.
- It is compact and easy form of lambda expression

> it can be identified by a double colon separating a class or object name and the name of the method
(o) -> o.toString(); 
Object::toString();

numbers.forEach(value -> System.out.println(value));
numbers.forEach(System.out::println);

## Kinds of Method References
There are FOUR KINDS OF METHOD REFERENCES:

1. Reference to a static method	
Ex - ContainingClass::staticMethodName

2. Reference to an instance method of a particular object	
Ex - containingObject::instanceMethodName

3. Reference to an instance method of an arbitrary object of a particular type	
Ex - ContainingType::methodName

4. Reference to a constructor	
Ex - ClassName::new

## When to use method reference :
- When a Lambda expression is invoking already defined method, you can replace it with reference to that method.

## When you can not use Method reference :
- You CAN NOT PASS ARGUMENTS TO THE METHOD REFERENCE.

> In general, we don't have to pass arguments to method references. However, arguments are treated depending on the type of method reference.
- In this case, any arguments (if any) taken by the method are passed automatically behind the curtains.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
EXAMPLE :

interface IsReferable {
   public void referenceDemo();
}

class ReferenceDemo {

   public static void commonMethod() {
      System.out.println("This method is already defined.");
   }

   public void implement() {

      //1. Anonymous class.
      IsReferable demoOne = new IsReferable() {
         @Override
         public void referenceDemo() {
            ReferenceDemo.commonMethod();
         }
      };
      demoOne.referenceDemo();

      //2. Lambda implementaion.
      IsReferable demo = () -> ReferenceDemo.commonMethod();
      demo.referenceDemo();

      //3. Method reference.
      IsReferable demoTwo = ReferenceDemo::commonMethod;
      demoTwo.referenceDemo();
   }
}
In above example, all three implementations, 1) using anonymous class 2) Lambda Expression and 3)Method reference will give same results. Anonymous class implementation is added to provide readability.

=======================================
############# Stream ##################

Stream provides following features:
> Stream does not store elements. 
- It simply conveys elements from a source such as a data structure, an array, or an I/O channel, through a pipeline of computational operations.

> Stream is functional in nature. 
- Operations performed on a stream does not modify it's source. 
- For example, filtering a Stream obtained from a collection produces a new Stream without the filtered elements, rather than removing elements from the source collection.

> Stream is lazy and evaluates code only when required.

> The elements of a stream are only visited once during the life of a stream. 
- Like an Iterator, a new stream must be generated to revisit the same elements of the source.

##EMPTY STREAM
Stream<String> streamEmpty = Stream.empty();

##STREAM OF COLLECTION
Collection<String> collection = Arrays.asList("a", "b", "c");
Stream<String> streamOfCollection = collection.stream();

##STREAM OF ARRAY
Stream<String> streamOfArray = Stream.of("a", "b", "c");

String[] arr = new String[]{"a", "b", "c"};
Stream<String> streamOfArrayFull = Arrays.stream(arr);

##Stream of any type
Stream<String> strStream = Stream.of("a", "b", "c");
strStream.foreach(System.out::print());

##Stream iterate
Stream<Integer> streamIterated = Stream.iterate(40, n -> n + 2).limit(20);
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##Stream of Primitives
> As Stream<T> is a generic interface and there is no way to use primitives as a type parameter with generics, 
- three new special interfaces were created: IntStream, LongStream, DoubleStream.

IntStream intStream = IntStream.range(1, 3);
LongStream longStream = LongStream.rangeClosed(1, 3);
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#### PARALLEL STREAMS ####
=======================================
######## FI used in Stream API ########


####1. Function and BiFunction: 
> Function represents a function that takes one type of argument and returns another type of argument. 
- Function<T, R> is the generic form where T is the type of the input to the function and R is the type of the result of the function.

> For handling primitive types, there are specific Function interfaces 
– ToIntFunction, ToLongFunction, ToDoubleFunction, ToIntBiFunction, ToLongBiFunction, ToDoubleBiFunction, LongToIntFunction, LongToDoubleFunction, IntToLongFunction, IntToDoubleFunction etc.

##Stream methods where Function or it’s primitive specialization is used are:

1. <R> Stream<R> map(Function<? super T, ? extends R> mapper)
2. IntStream mapToInt(ToIntFunction<? super T> mapper) 
– similarly for long and double returning primitive specific stream.

3. IntStream flatMapToInt(Function<? super T, ? extends IntStream> mapper) 
– similarly for long and double

4. <A> A[] toArray(IntFunction<A[]> generator)

5. <U> U reduce(U identity, BiFunction<U, ? super T, U> accumulator, BinaryOperator<U> combiner)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
####2. Predicate and BiPredicate ####
> It represents a predicate against which elements of the stream are tested. 
- This is used to filter elements from the java stream. 
- Just like Function, there are primitive specific interfaces for int, long and double.

## Stream methods 
Stream<T> filter(Predicate<? super T> predicate)
boolean anyMatch(Predicate<? super T> predicate)
boolean allMatch(Predicate<? super T> predicate)
boolean noneMatch(Predicate<? super T> predicate)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
3. Consumer and BiConsumer: 
> It represents an operation that accepts a single input argument and returns no result. 
- It can be used to perform some action on all the elements of the java stream.

## Stream methods
Stream<T> peek(Consumer<? super T> action)
void forEach(Consumer<? super T> action)
void forEachOrdered(Consumer<? super T> action)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
4. Supplier: 
> Supplier represent an operation through which we can generate new values in the stream. 

## Stream methods
public static<T> Stream<T> generate(Supplier<T> s)
<R> R collect(Supplier<R> supplier,BiConsumer<R, ? super T> accumulator,BiConsumer<R, R> combiner)