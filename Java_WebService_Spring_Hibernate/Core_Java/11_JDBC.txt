##What is JDBC?
> Java Database Connectivity is a java API that allow us to work with relational database.
> JDBC API having interfaces and classes that are part of java.sql and javax.sql
> jdbc api are used to connect, execute query and stored procedure on the db and process result.
> JDBC API uses jdbc drivers to connects to the db.
 java appl(->JDBC API)-> jdbc driver -> db
----------------------------------
##what is API?
> API (Application programming interface) is a document that contains description of all the features of a product or software. 
> It represents classes and interfaces that software programs can follow to communicate with each other. 
> An API can be created for applications, libraries, operating systems, etc

---------------------------------
##What is JDBC driver?
> JDBC Driver is a software component that enables java application to interact with the database.
There are 4 types of JDBC drivers:
1. JDBC-ODBC bridge driver
JDBC Api -> Java Appl -> JDBC-ODBC bridge driver -> ODBC Driver -> Vendor Lib db

2. Native-API driver (partially java driver)

3. Network Protocol driver (fully java driver)
> it uses middleware (application server) that converts JDBC calls directly or indirectly into the vendor-specific database protocol
> Disadv - Network support is required on client machine.

 4. Thin driver (fully java driver)
----------------------------------
##How to make database connection?
> There are 5 steps to connect any java application with the database in java using JDBC. They are as follows:
1. Register the driver class - Class.forName("oracle.jdbc.driver.OracleDriver");  

2. Creating Connection - 
Connection con=DriverManager.getConnection(  
"jdbc:oracle:thin:@localhost:1521:orcl","system","password");  

3. Create Statement - 
Statement stmt=con.createStatement();  

4. Executing Queries
ResultSet rs=stmt.executeQuery("select * from emp");  

5. Closing connection
con.close();  
-----------------------------------
## What is statement?
> The Statement interface provides methods to execute queries with the database. 
> The statement interface is a factory of ResultSet i.e. it provides factory method to get the object of ResultSet.

The important methods of Statement interface are as follows:

1) public ResultSet executeQuery(String sql): is used to execute SELECT query. It returns the object of ResultSet.

2) public int executeUpdate(String sql): is used to execute specified query, it may be create, drop, insert, update, delete etc.

3) public boolean execute(String sql): is used to execute queries that may return multiple results.
> it can execute any type of query that can be use with abv 2.

4) public int[] executeBatch(): is used to execute batch of commands.
-----------------------------------
Select query give ResultSet
-----------------------------------
## Explain different type of statments in Jdbc?
C. STATEMENT INTERFACE
> JDBC Statement, CallableStatement, and PreparedStatement interfaces define the methods and properties that enable you to send SQL or PL/SQL commands and receive data from your database.

1. Statement - 
>used to run simple sql statement like select, create, drop, insert, update, delete etc.
>Use for general-purpose access and for static SQL statements at runtime. 
>The Statement interface cannot accept parameters.
--------------------
2. PreparedStatement - 
> Here sql statement is pre-compiled and stored in a Prepared stmt object
> the object can be reuse to excute sql stmt multiple time efficiently
> PreparedStatement interface accepts input parameters at runtime.
> PreparedStatement interface extends the Statement interface 
> The object of prepared stmt class can be created as Connection.prepareStatement() 
Ex - 
	|String SQL = "Update Employees SET age = ? WHERE id = ?";
	|pstmt = conn.prepareStatement(SQL);
	|ResultSet rs = pstmt.executeQuery();
	
Methods
1. public void setInt(int paramIndex, int value)
2. public void setString(int paramIndex, String value)
3. public void setFloat(int paramIndex, float value)
4. public void setDouble(int paramIndex, double value)
5. public int executeUpdate() - executes the query. It is used for create, drop, insert, update, delete etc.
6. public ResultSet executeQuery()	executes the select query. It returns an instance of ResultSet.	
--------------------
3. CallableStatement interface- 
> it is used to execute Stored procedure
> it extends preparedStatment interface 
> it also accept runtime input parameters
> its object can be created as Connection.prepareCall() method
|CallableStatement cstmt = conn.prepareCall("{ call stored_proc_name(?,?) }");
|cstmt.setString(1,depName);
|cstmt.setDouble(2,incrementAmount);
|cstmt.execute();
---------------------------------
##How to use CallableStatement For (in,out)parameter stored procedure?
|CallableStatement cstmt = conn.prepareCall("{ call stored_proc_name(?,?) }");
|cstmt.setString(1,depName);
|cstmt.registerOutParameter(2,Types.INTEGER);
| cstmt.execute()
|int count = cstmt.getInt(2);
---------------------------------
##If my stored procedure is having select stmt that give n number of record then how to display that record ?

|CallableStatement cstmt = conn.prepareCall("{ call stored_proc_name(?,?) }");
|cstmt.setString(1,depName);
|cstmt.execute();
|ResultSet rs = cstmt.getResultSet();

---------------------------------
##What causes "No suitable driver" error?
"No suitable driver" is occurs during DriverManager.getConnection method, may be of any of the following reason:

> Due to failing to load the appropriate JDBC drivers before calling the getConnection method.
> It can be specifying an invalid JDBC URL, one that is not recognized by JDBC driver.
> if one or more the shared libraries needed by the bridge cannot be loaded
---------------------------------
##What does setAutoCommit() do?
> it is method of Connection interface
> setAutoCommit() autocommit queries 
> it is used to perform batch updation 
> we can set it to false to turn-off auto-commit
con.setAutoCommit(false);

> we cn control it using con.commit() or con.rollback();
---------------------------------
##Can we use multiple db in java appl?
> yes it is possible to connect multiple db simultaneously but it depends upon the capability of the driver.
> 1 driver used to handle commit txn for multiple connection
> to select and update data from different db using single statement we need special middleware that deal with different db in a single stmt or to treat them as 1 db.
---------------------------------
##What are the differences between setMaxRows(int) and setFetchSize(int)?
> setMaxRows() of ResultSet use to set number of rows a ResultSet can contain at a time
> setFetchSize() use to specify the no. of rows that will be read from db

> define in java.sql.Statement.setFetchSize() 
> setMaxRows() default value is 0  i.e. all rows will be included in the ResultSet.

---------------------------------
## What is DriverManager?

> DriverManager class acts as an interface between user and drivers. 
It keeps track of the drivers that are available and handles establishing a connection between a database and the appropriate driver. 
> it maintains a list of Driver classes that have registered themselves by calling the method DriverManager.registerDriver().

Commonly used methods of DriverManager class:
1) public static void registerDriver(Driver driver):	is used to register the given driver with DriverManager.
2) public static void deregisterDriver(Driver driver):	is used to deregister the given driver (drop the driver from the list) with DriverManager.
3) public static Connection getConnection(String url):	is used to establish the connection with the specified url.
4) public static Connection getConnection(String url,String userName,String password):	is used to establish the connection with the specified url, username and password.
---------------------------------
## What is Connection?
> A Connection is the session between java application and database. 
> The Connection interface is a factory of Statement, PreparedStatement, and DatabaseMetaData i.e. object of Connection can be used to get the object of Statement and DatabaseMetaData. 
> The Connection interface provide many methods for transaction management like commit(),rollback() etc.

> By default, connection commits the changes after executing queries.

Commonly used methods of Connection interface:

1. public Statement createStatement()
> creates a statement object that can be used to execute SQL queries.

2. public Statement createStatement(int resultSetType,int resultSetConcurrency)
> Creates a Statement object that will generate ResultSet objects with the given type and concurrency.

3. public void setAutoCommit(boolean status)
> is used to set the commit status.By default it is true.

4. public void commit()
> saves the changes made since the previous commit/rollback permanent.

5. public void rollback(): Drops all changes made since the previous commit/rollback.
6. public void close(): closes the connection and Releases a JDBC resources immediately.
---------------------------------
## What is ResultSet interface?
> object of ResultSet maintains a cursor pointing to a particular row of data. 
> Initially, cursor points to before the first row
> By default, ResultSet object can be moved forward only and it is not updatable.

> But we can make this object to move forward and backward direction by passing either TYPE_SCROLL_INSENSITIVE or TYPE_SCROLL_SENSITIVE in createStatement(int,int) method as well as we can make this object as updatable by

Statement stmt = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,  
                 ResultSet.CONCUR_UPDATABLE);  
					 
1. public boolean next() - move cursor to the one row next from current position.
2. public boolean previous() - move cursor to the one row previous from the current position.
3. public boolean first(): move the cursor to the first row in result set object.
4. public boolean last(): move the cursor to the last row in result set object.
5. public boolean absolute(int row): move the cursor to the specified row number in the ResultSet object.

6. public boolean relative(int row): move the cursor to the relative row number in the ResultSet object, it may be positive or negative.
7. public int getInt(int columnIndex):	is used to return the data of specified column index of the current row as int.
8) public int getInt(String columnName):	is used to return the data of specified column name of the current row as int.
9) public String getString(int columnIndex):	is used to return the data of specified column index of the current row as String.
10) public String getString(String columnName):	is us
---------------------------------
##How to Use Updatable ResultSet in JDBC?
> By default, ResultSet is not scrollable and updatable but by making statement as below it give update updatable ResultSet
Statement stmt = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,  
                 ResultSet.CONCUR_UPDATABLE);  
Resultset rs = stmt.executeQuery(query);

- To Update a col let say 5 row empOffice col.
	rs.absolute(5);//move cursor to 5th row
	rs.updateString("empOffice","Pune");
	rs.updateRow();//update row in db

- To Insert column values into the insert row.
	//Check the result set is an updatable result set
    int concurrency = rs.getConcurrency();
    if (concurrency == ResultSet.CONCUR_UPDATABLE) {
		rs.moveToInsertRow();// move cursor to insert row
		rs.updateInt("empId",1001);
		rs.updateString("empName","Manish Agrawal");
		rs.updateString("empOffice","Pune");
		rs.insertRow();
		rs.moveToCurrentRow();
	}
- To delete a row
	rs.first();//move cursor to the deleting row
	rs.deleteRow();
---------------------------------
##Can we execute trigger using JDBC?
> Triggers have got nothing to do with JDBC, they are database specific. 
> A trigger is executed when a condition predetermined in the trigger is encountered. 
> Triggers are written on tables to act before or after the action specified.

---------------------------------
##How to Retrieve Multiple Result Sets from a Stored Procedure in JDBC?
>  Java JDBC Statement provide the getResultSet method to retrieve each result set.
>  To determine if more result sets are available, call the getMoreResults() in Statement, which returns a boolean value of true if more result sets are available

CallableStatement stmt = con.prepareCall(...);
      .....  //Set call parameters, if you have IN,OUT, or IN/OUT parameters

      boolean results = stmt.execute();
      int rsCount = 0;

      //Loop through the available result sets.
     while (results) {
           ResultSet rs = stmt.getResultSet();
		   //Retrieve data from the result set.
           while (rs.next()) {
				....// using rs.getxxx() method to retieve data
           }
           rs.close();

        //Check for next result set
        results = stmt.getMoreResults();
      } 
      stmt.close();
---------------------------------
##
---------------------------------
##
---------------------------------
##
---------------------------------
##
---------------------------------
##
---------------------------------
##

https://www.packtpub.com/books/content/interacting-databases-through-java-persistence-api