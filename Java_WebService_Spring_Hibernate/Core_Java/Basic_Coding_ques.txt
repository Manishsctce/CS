######## 1. FIBONACCI SERIES #########
> It is sum of previous two Fibonacci numbers fn= fn-1+ fn-2
Ex- 1 1 2 3 5 8 13 ... . up to a given number. 
- using iteration over recursion and how to optimize the solution using caching and memoization.

PSUEDO CODE
//USING RECURSION 
public static int fibonacci(int number){ 
 if(number == 1 || number == 2){ 
	return 1; 
 }
return fibonacci(number-1) + fibonacci(number -2); //tail recursion 
}

//USING ITERATION
public static int fibonacci2(int number){ 
	if(number == 1 || number == 2) 
	    return 1; 
	 
	int fibo1=1, fibo2=1, fibonacci=1; 
	for(int i= 3; i<= number; i++){
		//Fibonacci number is sum of previous two Fibonacci number 
		fibonacci = fibo1 + fibo2; 
		fibo1 = fibo2; 
		fibo2 = fibonacci; 
	} 
return fibonacci; //Fibonacci number 
}
=======================================
########## 2. PRIME NUMBER ############
> It is a number which is not divisible by any other number 
- Ex- 2, 3, 5, 7, 11, 13, 17 etc. 
- 1 is not a prime number
Be prepared for cross e.g. checking till the square root of a number etc.

boolean isPrimeNumber(int number) { 
	if (number == 2 || number == 3) { 
		return true; } 
		
	if (number % 2 == 0) { 
		return false; } 
		
	int sqrt = (int) Math.sqrt(number) + 1; //sqrt of 144 is 12
	for (int i = 3; i < sqrt; i += 2) { 
		if (number % i == 0)
			return false; 
	} 
return true; 
}
=======================================
3. STRING PALINDROME
> it is a String which is equal to the reverse of itself 
- Ex- "Bob" is a palindrome because of the reverse of "Bob" is also "Bob".


=======================================
######### 4. ARMSTRONG NUMBER #########
> A number is called an Armstrong number if it is equal to the cube of its each digit. 
- for example, 153 is an Armstrong number because 153= 1+ 125+27

private static boolean isArmStrong(int number) { 
	int result = 0; 
	int orig = number; 
	
	while(number != 0){ 
		int remainder = number%10; 
		result = result + remainder*remainder*remainder; 
		number = number/10; 
	} 
	//number is Armstrong return true 
	if(orig == result){ return true; } 
	
return false; 
} 
=======================================
## How to remove duplicate elem from an array?
> 
int no_unique_elements = my_array.length;

//Comparing each element with all other elements
for (int i = 0; i < no_unique_elements; i++) 
{
  for (int j = i+1; j < no_unique_elements; j++){
  
  	//If any two elements are found equal
  	if(my_array[i] == my_array[j])
  	{
  	  //Replace duplicate element with last unique element
  	  my_array[j] = my_array[no_unique_elements-1];
  	  no_unique_elements--;
  	  j--;
  	}
  }
}
=======================================
## 1 to 100 elem in unsorted order in an array and 1 elem is missing. 
How to find the missing element?

METHOD 1: (Use sum formula)
1. Get the sum of numbers 
       total = n*(n+1)/2
2  Subtract all the numbers from sum and
   you will get the missing number.
   
static int getMissingNo (int a[], int n)
{
 int total = (n+1)*(n+2)/2; 
 
 for (int i = 0; i< n; i++)
    total = total - a[i];
 
 return total;
}   

int a[] = {3, 8, 7,13,15,9,1,2,4,5,6,12,10,11 };
int miss = getMissingNo(a,a.length); //14

=======================================