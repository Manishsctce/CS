=======================================
## What is Design Pattern(DP)?

> It is an idea to solve specific problem/task in a simple way.
- By using it make our code more flexible, reusable and maintainable.
- It is not specific to any lang. 

> We use DP during the analysis and requirement phase of SDLC(Software Development Life Cycle).

> DP are categorized into two parts:
1. Core java (or JSE) Design Patterns.
2. JEE Design Patterns.
- These DP are specifically concerned with the presentation tier. These patterns are identified by Sun Java Center.
---------------------------------------
## What Is Gang Of Four (gof)?

> In 1994, four authors 
- Erich Gamma, Richard Helm, Ralph Johnson and John Vlissides 
- published a book titled "Design Patterns - Elements of Reusable Object-Oriented Software" which initiated the concept of DP in Software development. 
- These authors are collectively known as Gang of Four (GoF).


> That's why all the below 23 Design Patterns are known as Gang of Four (GoF) Design Patterns.
=======================================
####### 23 Gang of Four(GoF) DP #######

> There are 3 types of design patterns as 

1. CREATIONAL PATTERNS ARE FOLLOW
> It is concerned with the way of creating objects. 
- It is used when a decision must be made at the time of instantiation of a class
- It is used when object can change according to the nature of the program

  a. Singleton,  
  b. Factory Method, 
  c. Abstract Factory, 
  d. Builder, 
  e. Prototype, 
  Object Pool

2. STRUCTURAL DESIGN PATTERN
> It help you guarantee that when one of the parts of the code changes, the entire structure does not need to change. 
> It SERVES AS A BLUEPRINT FOR HOW DIFFERENT CLASSES AND OBJECTS ARE COMBINED TO FORM LARGER STRUCTURES.

  a. Adapter pattern - Adapts one interface for a class into one that a client expects
  b. Bridge pattern - 
  c. Composite pattern
  d. Decorator Pattern
  e. Facade Pattern
  f. Flyweight Pattern
  g. Proxy Pattern

3. BEHAVIORAL PATTERNS
> This DP is CONCERNED WITH THE INTERACTION AND RESPONSIBILITY OF OBJECTS. 
- the interaction between the objects should be in such a way that they can easily talk to each other and still should be loosely coupled.

  a. Template Method Pattern 
  b. Mediator Pattern
  c. Chain of Responsibility Pattern
  d. Observer Pattern
  e. Strategy Pattern
  f. Command Pattern
  g. State Pattern
  h. Visitor Pattern
  i. Interpreter Pattern
  j. Iterator Pattern
  k. Memento Pattern


=======================================
##### SOFTWARE DESIGN PRINCIPLES ######

## What are Software Design Principles?

> it means to handle the complexity of the design process effectively.
- It reduce the effort needed for design but can also reduce the scope of introducing errors during design.

Following are the principles of Software Design
1. Problem partitioning
2. Abstraction
3. Modularity
4. Top-Down and Bottom-up strategy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is a DRY principle?

DRY stand for "Don't Repeat Yourself," a basic principle of software development aimed at reducing repetition of information. The DRY principle is stated as, "Every piece of knowledge or logic must have a single, unambiguous representation within a system."

Divide your code and logic into smaller reusable units and use that code by calling it where you want. 

It saves time and effort, is easy to maintain, and also reduces the chances of bugs.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is a KISS principle?

> It stand for "Keep It Simple, Stupid"
> It says keep the code simple and clear, making it easy to understand.
- Each method should never be more than 40-50 lines.
- Each method should only solve one small problem, not many use cases.

> To Achieve, Think of many solutions for your problem, then choose the best, simplest one and transform that into your code.

EXAMPLE:
public String weekday1(int day) {
    switch (day) {
        case 1:
            return "Monday";
        case 2:
            return "Tuesday";
        case 3:
            return "Wednesday";
        case 4:
            return "Thursday";
        case 5:
            return "Friday";
        case 6:
            return "Saturday";
        case 7:
            return "Sunday";
        default:
            throw new InvalidOperationException("day must be in range 1 to 7");
    }
}
public String weekday2(int day) {
    if ((day < 1) || (day > 7)) throw new InvalidOperationException("day must be in range 1 to 7");
    string[] days = {
        "Monday",
        "Tuesday",
        "Wednesday",
        "Thursday",
        "Friday",
        "Saturday",
        "Sunday"
    };
    return days[day - 1];
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is an ACID?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is a CAP theorem?

> It is a tool used to makes system designers aware of the trade-offs while designing networked shared-data systems.
> The theorem states that networked shared-data systems can only guarantee/strongly support two of the following three properties:

1. CONSISTENCY 
- A guarantee that every node in a distributed cluster returns the same, most recent, successful write. 
- Consistency refers to every client having the same view of the data. 
- There are various types of consistency models. Consistency in CAP (used to prove the theorem) refers to linearizability or sequential consistency, a very strong form of consistency.

2. AVAILABILITY 
- Every non-failing node returns a response for all read and write requests in a reasonable amount of time. The key word here is every. 
- To be available, every node on (either side of a network partition) must be able to respond in a reasonable amount of time.

3. PARTITION TOLERANT 
- The system continues to function and upholds its consistency guarantees in spite of network partitions. 
- Network partitions are a fact of life. Distributed systems guaranteeing partition tolerance can gracefully recover from partitions once the partition heals.

The CAP theorem categorizes systems into three categories:

CP (Consistent and Partition Tolerant) — At first glance, the CP category is confusing, i.e., a system that is consistent and partition tolerant but never available. CP is referring to a category of systems where availability is sacrificed only in the case of a network partition.
CA (Consistent and Available) — CA systems are consistent and available systems in the absence of any network partition. Often a single node's DB servers are categorized as CA systems. Single node DB servers do not need to deal with partition tolerance and are thus considered CA systems. The only hole in this theory is that single node DB systems are not a network of shared data systems and thus do not fall under the preview of CAP. [^11]
AP (Available and Partition Tolerant) — These are systems that are available and partition tolerant but cannot guarantee consistency.
=======================================
######## SOLID DESIGN Principal #######
1. S - SRP – Single Responsibility Principle.
2. O - OCP – Open/Closed Principle.
3. L - LSP – Liskov Substitution Principle.
4. I - ISP – Interface Segregation Principle.
5. D - DIP – Dependency Inversion Principle.

## Single Responsibility Principle
> there should not be more than one reason for a class to change, or a class should always handle single functionality.
Example: JPA

## Open and Close Principal
> it states that the design and writing of the code should be done in a way that 
- new functionality should be added with minimum changes in the existing code (by adding new classes & method not changing the existing one)

> One of the key examples of this is State and Strategy design pattern, where 
- Context class is closed for modification and new functionality is provided by writing new code by implementing a new state of strategy

## Liskov Substitution Principle (LSP):
> It says derived class or subclass must enhance functionality, but not reduce them.
- we could replace the existing implement with its subtype which has enhanced features.

## Interface Segregation Principle (ISP)
> It states that no client should be forced to depend on methods it does not use.

## Dependency Inversion Principle.
> do not hard code the dependent obj 
- inject it from outside
=======================================
###### OPEN AND CLOSE PRINCIPAL #######
> it states that the design and writing of the code should be done in a way that 
- new functionality should be added with minimum changes in the existing code.

- design should be done in a way to ALLOW ADDING NEW FUNCTIONALITY AS NEW CLASSES, 
- keeping as much as possible existing code unchanged to avoid tested code.


Ex - 
class Shape{
	int type
}
class Rectangle extends Shape{ 
  Rectangle(){ super.type=1; }
}

class Circle extends Shape{ 
  Circle(){super.type=2}
}
--------------
class GraphicEditor{ 
	public void drawShape(Shape s){
		if(s.type==1){ drawRectange(s);}
		else if(s.type==2){ drawCircle(s);}
	}
	drawRectange(Rectangle r){...}
	drawCircle(Circle c){...}
} 
> This is bad example it not allow to extend the further requirement.
---------------------------------------
Ex- But This is best example it allow to extend the further requirement.
abstract class Shape{
	public abstract void draw();
}

class Rectangle extends Shape{ draw().... }
class Circle extends Shape{ draw().... }
class Triangle extends Shape{ draw().... }

----------------
class GraphicEditor{ 
	public void drawShape(Shape s){
		s.draw();
	}
} 
> GraphicEditor is not changed when a new shape class is added.
> Now it can draw any shape obj it pass

> There are many design patterns that help us to extend code without changing it.
- Decorator pattern help us to follow Open Close principle

=======================================
##### LISKOV SUBSTITUTION PRINCIPLE ###

> it state that if S is a subtype of T, then objects of type T may be replaced with objects of type S

BAD EXAMPLE:
public class Bird{
    public void fly(){}
}
public class Duck extends Bird{}

- The duck can fly because of it is a bird, But what about this:

public class Ostrich extends Bird{}
- Ostrich is a bird, But it can't fly, Ostrich class is a subtype of class Bird, But it can't use the fly method, that means that we are breaking LSP principle.

GOOD EXAMPLE:
public class Bird{
}
public class FlyingBirds extends Bird{
    public void fly(){}
}
public class Duck extends FlyingBirds{}
public class Ostrich extends Bird{} 
=======================================
### INTERFACE-SEGREGATION PRINCIPLE ###

> it state that no client should be forced to depend on methods it does not use.
EXAMPLE:
interface ISmartDevice {
    void Print();
    void Fax();
    void Scan();
}

class AllInOnPrinter implements ISmartDevice{
	implement all methods
}

> Now suppose we need to handle a dumb device (EconomicPrinter class) that can only print. We're forced to implement the Whole interface.

> To avoid this we can have 3 smaller interfaces: IPrinter, IFax, and IScanner.
=====================================
###### STRATEGY DESIGN PATTERN ######
> It is quite useful for implementing set of related algorithms e.g. compression algorithms, filtering strategies etc
> This pattern follows open closed design principle

One of a good example of Strategy pattern from JDK itself is a Collections.sort() method and Comparator interface.  
- Here Comparator is a strategy interface and defines a strategy for comparing objects. 
- Because of this pattern, we don't need to modify sort() method (closed for modification) to compare any object, 
- at the same time we can implement Comparator interface to define new comparing strategy (open for extension). 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## Difference between Strategy and State design Pattern?

> both Strategy and State pattern has the same structure, but their intent is totally different.

> State design pattern is used to define and manage the state of an object, while 
- Strategy pattern is used to define a set of an interchangeable algorithm and let's client choose one of them. 

> Strategy pattern is a client driven pattern while 
- Object can manage their state itself.
=====================================
########## RELATIONSHIP #############
Association > Aggregation > Composition 

############ ASSOCIATION ############ 
> It is Super set of Aggregation

> IT IS RELATIONSHIP BETWEEN TWO SEPARATE CLASSES THROUGH THEIR OBJECTS. 
- The relationship can be One-to-One, One-to-Many, Many-to-One and Many-to-Many.

> Composition and Aggregation are the two forms of association.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
########## AGGREGATION ##########
> It is Super set of Composition

> Aggregation is a special form of association which is a unidirectional one way relationship between classes (or entities)

> It represents Has-A relationship.
> It is a unidirectional association i.e. a one way relationship. 
- For example, department can have students but vice versa is not possible and thus unidirectional in nature.

> In Aggregation, both the entries can survive individually which means ending one entity will not effect the other entity

> The whole class plays a more important role than the part class, but unlike the case of composition.
- the part class can meaningfully exist on its own without the whole class

> SYMBOL - holo rhombus at Super class and tail at the sub class
Ex- Employee(Super) having Address(sub)

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
########## COMPOSITION ##########
## COMPOSITION - For ex Class A contain Class B

> Composition is a restricted form of Aggregation in which two entities are highly dependent on each other.
- IT REPRESENTS PART-OF RELATIONSHIP.

> In Composition, both the entities are dependent on each other.

> the part class cannot meaningfully exist on its own without the whole class. 
> This means life of Class B is dependent of life of Class A.
> SYMBOL-   dark rhomus at Super class and tail at the part class
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is difference between Aggregation and Composition?

> Dependency : 
- Aggregation implies a relationship where the child can exist independently of the parent
- Composition implies a relationship where the child cannot exist independent of the parent

> Type of Relationship: 
- Aggregation relation is “has-a” and 
- composition is “part-of” relation.

> Type of association: 
- Aggregation is a weak Association.
- Composition is a strong Association
=====================================
## What is Cohesion in Java?

> It refers all about how a single class is designed.
- It is most closely associated with making sure that a class is designed with a single, well-focused purpose.

> The advantages of high cohesion is that such classes are much easier to maintain (and less frequently changed) and reusable.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is Coupling in Java?

> it is the degree to which one class knows about another class”. 
- If one class uses another class, that is coupling. 
- Coupling is everywhere, but the level of coupling varies.

There are two types of coupling:
1. TIGHT COUPLING :
Ex- 
class Subject {
  Topic t = new Topic();
  public void startReading(){
    t.understand();
  }
}
class Topic {
  public void understand(){
    System.out.println("Tight coupling concept");
  }
}
- Here Subject and Topic are tightly couple.

2. Loose coupling:
> If class A knows class B through its interface only i.e it interacts with class B through its API then class A and class B are said to be loosely coupled.

EXAMPLE: 
public interface Topic{
    void understand();
}
class Topic1 implements Topic {
  public void understand(){
    System.out.println("Got it");
  }
} 
class Topic2 implements Topic {
  public void unserstand(){
    System.out.println("understand");
  }
} 
public class Subject {
  public static void main(String[] args){
    Topic t = new Topic1();
    t.understand();
  }
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is a difference between composite and composition?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What design pattern is String.intern()?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What design pattern is Collections.sort()?

