## What is JDBC(Java Database Connectivity)?
> It provides a set of Java API for accessing the relational databases from Java program. 
- These Java APIs enables Java programs to EXECUTE SQL statements and INTERACT with any SQL compliant database.

> JDBC provides a flexible architecture to write a database independent application 
- that can run on different platforms and interact with different DBMS without any modification.
=====================================
################ ORM ################
## What is Object-Relational Mapping (ORM)?

> it is a pgmg technique for converting data between relational databases and OOP lang such as Java, C# etc.
- Relational DB store date in tabular format and 
- OOP Lang data is interconnected graph of objects 

> A persistent framework is an ORM service that stores and retrieves objects into a relational database.

There are several ORM options in java:-
- Enterprise JavaBeans Entity(EJB) Beans, 
- JPA
- ibatis
- Hibernate
- Java Data Objects, Castor, TopLink, Spring DAO, 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## Why Object Relational Mapping (ORM)?

> When we work with an object-oriented systems, there's a mismatch between the object model and the relational database 
- RDBMSs represent data in a tabular format whereas 
- object-oriented languages, such as Java or C# represent it as an interconnected graph of objects

> Loading and storing objects in a relational database exposes us to the following FIVE MISMATCH PROBLEMS:-
1. GRANULARITY	
- Sometimes you will have an object model which has more classes than the number of corresponding tables in the database.

2. INHERITANCE	
- RDBMSs do not define anything similar to Inheritance.

3. IDENTITY	
- A RDBMS defines exactly one notion of 'sameness': the primary key. 
- Java, however, defines both object identity (a==b) and object equality (a.equals(b)).

4. ASSOCIATIONS	
- Object-oriented languages represent associations using object references where as RDBMS represents an association as a foreign key column.

5. NAVIGATION	
- The ways you access objects in Java and in a RDBMS are fundamentally different.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What are the ADVANTAGES OF ORM OVER PLAIN JDBC? 

1. business code access objects rather than DB tables.
2. Hides details of SQL queries from OO logic.
3. Based on JDBC 'under the hood'
4. No need to deal with the database implementation.
5. Entities are based on business concepts rather than database structure.
6. Transaction management and automatic key generation.
7. Fast development of application.

> Some ORM provides query language which is database independent. like hibernate
> It has provision to interact with multiple databases
> It provide ability to cache data 
> It provide some embedded SQL query which improve performance.
---------------------------------------