=========================================
############# Criteria[i] ###############
> Hibernate Criteria Query Language (HCQL) is used to fetch the records based on the specific criteria
> It can't be used to run update or delete queries or any DDL statements. 
- it only used to fetch the results from the database using object oriented approach

> Hibernate Criteria are used to define conditions the data has to satisfy in order to be selected. 
- It's like referring to how is the data you're fetching. Like modifiying the from and where clauses of an SQL query.

> Criteria[i] provides methods to apply criteria such as retrieving all the records of table whose salary is greater than 50000 etc
> object of Criteria can be obtained by calling the createCriteria() of Session[i]
Ex - Criteria c = session.createCriteria();

#### METHODS ####
01. Criteria add(Criterion c) :
> used to add restrictions.

02. Criteria addOrder(Order o) :
- specifies ordering.

03. Criteria setFirstResult(int firstResult) 
- specifies the first number of record to be retreived.

Criteria setMaxResult(int totalResult) 
- specifies the total number of records to be retreived.

List list() : 
- returns list containing object.

Criteria setProjection(Projection projection)
> specifies the projection.

~~~~~~~~~~~~~~~~~~~~~~~~
## What is Criteria in Hibernate ?

> Criteria is a simplified API for retrieving entities by composing Criterion objects.
EXAMPLE - session.createCriteria(Employee.class).add( Restrictions.like("name", "A%") ).list();
- will return all employee objects having name starting with A.
~~~~~~~~~~~~~~~~~~~~~~~~
## How do we specify the criteria if it involves mapping between two entities or join between tables ?

> The following code returns the list of Employee objects having employee name starting with A and Dept Name ( Department , Employee Mapped ). 

session.createCriteria(Employee.class,"emp")
.createAlias("emp.department", "dept", Criteria.INNER_JOIN)
.add(Restrictions.like("name", "A%"))
.add(Restrictions.eq("dept.name","Finance")
.list();
~~~~~~~~~~~~~~~~~~~~~~~~
## Name few Restriction Methods ?

Ans. eq, ge, gt , between, in , isNull, isEmpty, isNotnull, ne , like, lt , or , not 
~~~~~~~~~~~~~~~~~~~~~~~~
## In Hibernate, While defining Criteria, Have you ever faced any problem while adding restrictions with user defined types or Enums ?

Ans. Yes, with Enum as was getting an exception while doing equality check for enum field.
got it fixed by adding @Enumerated(EnumType.STRING) to the field in entity.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##### Restrictions class ######
> it provides methods that can be used as Criterion. 

#### METHODS ####
public static SimpleExpression lt(String propertyName,Object value) : sets the less than constraint to the given property.
public static SimpleExpression le(String propertyName,Object value) : sets the less than or equal constraint to the given property.
public static SimpleExpression gt(String propertyName,Object value) : sets the greater than constraint to the given property.
public static SimpleExpression ge(String propertyName,Object value) : sets the greater than or equal than constraint to the given property.
public static SimpleExpression ne(String propertyName,Object value) : sets the not equal constraint to the given property.
public static SimpleExpression eq(String propertyName,Object value) : sets the equal constraint to the given property.
public static Criterion between(String propertyName, Object low, Object high) : sets the between constraint.
public static SimpleExpression like(String propertyName, Object value) : sets the like constraint to the given property.

EXAMPLE:
Crietria c=session.createCriteria(Emp.class);  
c.add(Restrictions.gt("salary",10000));//salary is the propertyname  
List list=c.list();  
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
########### Order class #######
> The Order class represents an order. 

#### METHODS ####
public static Order asc(String propertyName) applies the ascending order on the basis of given property.
public static Order desc(String propertyName) applies the descending order on the basis of given property.

EXAMPLE:
Crietria c=session.createCriteria(Emp.class);  
c.addOrder(Order.asc("salary"));  
List list=c.list();  
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
###### Projections class ######
> it is used to fetch data of a particular column by projection such as name etc.

#### METHODS ####
PropertyProjection groupProperty(String propertyName)
Projection rowCount() 

EXAMPLE:
Crietria c=session.createCriteria(Emp.class);  
c.setProjection(Projections.property("name"));  
List list=c.list();  

=====================================
########### Projection[i] ###########
> in “org.hibernate.criterion” package 
> Projections is a class given in same package  
> Actually Projection[i] is an interface, and Projections[c] is an class and is a factory for producing projection objects.
> In Projections[c], we have all static methods and each method of this class returns Projection interface object.

> It is used in order to QUERY ONLY A SUBSET of the attributes of an entity or group of entities
EXAMPLE - list only productName out of Product entity. 
Projection productByNameProjection = Projections.property("proName");
Criteria productCriteria = session.createCriteria(Product.class);
productCriteria.setProjection(distinctProductByNameProjection);
productCriteria.list();//will return list of Product name

> It can also be use to specify distinct clauses and aggregate functions like max, sum and so on
Ex - Projection productByNameProjection = Projections.property("proName");
Projection distinctProductByNameProjection = Projections.distinct(productByNameProjection);
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is the difference between projections and restrictions in Hibernate framework?

> Projections are used for the which part, like what part of an entity you want to retrieve such as -
criteria.setProjection(Projections.property("employeeName"));

> Restrictions are for the how/what part, like what subset of the data you want your criteria query to fetch. 
- More specifically Restrictions fill the from and where part in the query.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


## When to use projections and when to use criteria?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is Difference between HQL and HCQL (Criteria Query) ?
> HQL is to perform both select and non-select operations on the data,  but 
- Criteria is only for selecting the data, we cannot perform non-select operations using criteria

> HQL is suitable for executing Static Queries, where as 
- Criteria is suitable for executing Dynamic Queries

> HQL doesn’t support pagination concept, but 
- we can achieve pagination with Criteria

> Criteria used to take more time to execute then HQL

> With Criteria we are safe with SQL Injection because of its dynamic query generation but 
- in HQL as your queries are either fixed or parametrized, there is no safe from SQL Injection

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## How to do pagination in Hibernate using Criteria api ?

> For pagination, maxresults and first result need to be set as follows :

criteria.setMaxResults(10);
criteria.setFirstResult(1);
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~