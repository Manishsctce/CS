############ Mapping File #############

> An Object/relational mappings are usually defined in an XML document. 
- This mapping file instructs Hibernate how to map the defined classes to the database tables.

> number of tools exist to generate the mapping document. 
- These include XDoclet, Middlegen and AndroMDA for advanced Hibernate users

EXAMPLE: <classname>.hbm.xml
<hibernate-mapping>
   <class name="Employee" table="EMPLOYEE">
      <meta attribute="class-description">
         This class contains the employee detail. 
      </meta>
      <id name="id" type="int" column="id">
         <generator class="native"/>
      </id>
      <property name="firstName" column="first_name" type="string"/>
      <property name="lastName" column="last_name" type="string"/>
      <property name="salary" column="salary" type="int"/>
   </class>
</hibernate-mapping>

=======================================
###### XML MAPPING FILE ELEMENTS ######
<hibernate-mapping> : 
- it is root element which contains all the <class> elements.
-------------------------------
<class> : class name and table name 
<meta> : 
-------------------------------
<id> : 
- maps the unique ID attribute in class to the primary key of the database table. 
- name attribute of the id element : refers to the property in the class and 
- column attribute refers to the column in the database table. 
- type attribute holds the hibernate mapping type, this mapping types will convert from Java to SQL data type.


<generator> element : 
- it is within the id element is used to AUTOMATICALLY GENERATE PRIMARY KEY VALUES. 
- Set the class attribute of the GENERATOR element is set to native to let hibernate pick up either IDENTITY, SEQUENCE OR HILO ALGORITHM TO CREATE PRIMARY KEY depending upon the capabilities of the underlying database.
-------------------------------
<property>
- "type" attribute of <property> are not Java/SQL data types. 
- These are HIBERNATE MAPPING TYPES, which can translate from Java to SQL data types and vice versa.

#### PRIMITIVE TYPES ####
MAPING TYP  : JAVA TYPE 				: ANSI SQL TYPE
integer		: int or java.lang.Integer 	: INTEGER
long 		: long or java.lang.Long	: BIGINT
short 		: short or java.lang.Short 	: SMALLINT
float 		: float or java.lang.Float 	: FLOAT
double 		: double / java.lang.Double : DOUBLE
big_decimal : java.math.BigDecimal 		: NUMERIC
character 	: java.lang.String 			: CHAR(1)
string 		: java.lang.String 			: VARCHAR
byte 		: byte or java.lang.Byte 	: TINYINT
boolean 	: boolean/java.lang.Boolean : BIT
yes/no	boolean or java.lang.Boolean	CHAR(1) ('Y' or 'N')
true/false	: boolean or java.lang.Boolean : CHAR(1) ('T' or 'F')

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## How to make a immutable class in hibernate?

> If you mark a class as mutable="false", class will be treated as an immutable class. 
- By default, it is mutable="true".

> Immutable classes may not be updated or deleted by the application.

> We can use the @Immutable to indicate to Hibernate that a table will not be updated from the application.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## How can hibernate be configured to access an instance variable directly and not through a setter method.

> By mapping the property with access="field" in hibernate metadata. 
- This force hibernate to bypass the setter method and access the instance variable directly while initializing a newly loaded object.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

=====================================
######### ANNOTATION MAPPING ########
> Hibernate Annotations are based on the JPA 2 specification and supports all the features.

> All the JPA annotations are defined in the javax.persistence.* package. 
- Hibernate EntityManager implements the interfaces and life cycle defined by the JPA specification.

> Instead of creating mapping file(.hbm.xml) we can use annotations to do the object relational mapping.
> For this we need to use persistence annotations in 
- Hibernate supports EJB3 persistence annotations. The EJB3 annotations are contained in the javax.persistence package.

###### @Entity ######
> it is used to mark this class as an Entity bean. 
- the class should atleast have a package scope no-argument constructor(i.e default access specifier constr.).

###### @Table ######
> it is used to specify the table to persist the data. 
- The name attribute refers to the table name. 
- If @Table annotation is not specified then Hibernate will by default use the class name as the table name.

## @Id annotation 
> it is used to specify the identifier property of the entity bean. 
> The placement of the @Id annotation determines the default access strategy that Hibernate will use for the mapping. 
- If the @Id annotation is placed over the field, then filed access will be used. 
- Instead if it placed over the getter method of that field, then property access will be used.

## @GeneratedValue annotation 
> it is used to specify the primary key generation strategy to use. 
- If the strategy is not specified by default AUTO will be used.

## @Column annotation 
> it is used to specify the details of the column to which a field or property will be mapped. 
- If the @Column annotation is not specified by default the property name will be used as the column name.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is pros & cons of Hibernate annotation Vs Mapping file?

CONS
- need to alter the pre-existing POJO source code, 
- Maintaining the mapping information as external XML files allows that mapping information to be modified to reflect business changes or schema alterations without forcing you to rebuild the application as a whole

PROS
- clear and precise 
- uses and supports the JPA 2 persistence annotations that give freedom to use any other ORM that support JPA2 
- it reduce to the risk of a missing or stale mapping file.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is @UniqueConstraint and @Column Unique attribute.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is the difference between @Entity(name="Emp") and @Table(name="Emp") in Hibernate?
- @Entity(name="XYZ") : used to name Entity
- @Table(name=”XYZ”) : to create table with name XYZ instead of class name.

Note : if you don't use @Table then hibernate consider that @Entity is your table name by default
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is Generator classes in Hibernate?
> it is USED TO GENERATE THE UNIQUE IDENTIFIER FOR THE OBJECTS of persistent class. 
- There are many generator classes defined in the Hibernate Framework.
> All the generator classes implements the "org.hibernate.id.IdentifierGenerator" interface.
- we can use this interface to create our own Generator class 

1. assigned (default)
- if there is no <generator> element

2. increment
- It generates the unique id only if no other process is inserting data into this table. 
- It generates short, int or long type identifier. 
- The first generated identifier is 1 normally and incremented as 1.

3. sequence
- It uses the sequence of the database. 
- if there is no sequence defined, it creates a sequence automatically e.g. in Oracle,creates a sequence named HIBERNATE_SEQUENCE.

4. native
- It uses identity, sequence or hilo depending on the database vendor

EXAMPLE:
@Id 
@GeneratedValue(strategy=GenerationType.IDENTITY)
Integer getId(){..};

@GeneratedValue(strategy=GenerationType.SEQUENCE, generator="SEQ_GEN")
Integer getId(){..};
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Entity Object - has meaning on its own
Value Object - it doesn't has meaning on its own

## What are derived properties?

> The properties that are not mapped to a column, but calculated at runtime by evaluation of an expression are called derived properties. 
- The expression can be defined using the formula attribute of the element.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## Can I have one entity class representing two tables with same structure in hibernate?

> You can merge two different classes into 1 database table. 
- If you have a scenario such that there are 2 classes : Student and StudentDetail and 
- you want to save the fields of both these classes to 1 table, then yes, this can be done.

Example:
- Student and StudentDetail classes will share a HAS-A relation and StudentDetail will be contained as an instance variable inside Student.

> There are 2 annotations in Hibernate : @Embedded and @Embeddable. 
- Embedded will be applied over StudentDetail class and 
- Embeddable will be applied over instance of StudentDetail inside Student class. 

Note : here Student will be the main entity class having @Entity
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~