=======================================
#### INHERITANCE MAPPING STRATEGIES ###

## What are the inheritance mapping strategies?

> There are 3 ways of inheritance mapping in hibernate.

1. Table per hierarchy
2. Table per concrete class
3. Table per subclass

=======================================
######## TABLE PER HIERARCHY ##########
- single table is required to map the whole hierarchy, 
- an extra column (known as discriminator column) is added to identify the class. 
- But nullable values are stored in the table.

#### XML MAPPING ####
<class name="Person" table="PERSON" discriminator-value="P">
  <id name="personId" column="PERSON_ID">
  	<generator class="native" />
  </id>
  
  <discriminator column="DISCRIMINATOR" type="string" />
  
  <property name="firstname" />
  <property name="lastname" column="lastname" />
  
  <subclass name="Employee" extends="Person" discriminator-value="E">
    <property name="departmentName" column="department_name" />
    <property name="joiningDate" type="date" column="joining_date" />
  </subclass>
</class>

#### ANNOTATION MAPPING ####
EXAMPLE:
Employee <-- Regular_Emp, Contract_Emp
Employee : id, name
Regular_Emp : salary , bonus
Contract_Emp : pay_per_hour, contract_period

@Entity  
@Table(name = "employee101")  
@Inheritance(strategy=InheritanceType.SINGLE_TABLE)  
@DiscriminatorColumn(name="type",discriminatorType=DiscriminatorType.STRING)  
@DiscriminatorValue(value="employee")  
public class Employee { ...}

@Entity  
@DiscriminatorValue("regularemployee")  
public class Regular_Employee extends Employee{ ..}

@Entity  
@DiscriminatorValue("contractemployee")  
public class Contract_Employee extends Employee{ ..}

TABLE will be 
id, type, name, salary, bonus, pay_per_hour, contract_period
- here type will be employee, regularemployee, contractemployee

> If we doesn't provide @DiscriminatorColumn, Hibernate will consider table name as discriminator for child class and
- HB will add DTYPE

=======================================
###### TABLE PER CONCRETE CLASS #######
> tables are created per class. So there are no nullable values in the table. 
- Disadvantage of this approach is that duplicate columns are created in the subclass tables.

EXAMPLE:

@Entity  
@Table(name = "employee102")  
@Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)  
public class Employee { ...}


@Entity  
@Table(name="regularemployee102")  
@AttributeOverrides({  
    @AttributeOverride(name="id", column=@Column(name="id")),  
    @AttributeOverride(name="name", column=@Column(name="name"))  
})  
public class Regular_Employee extends Employee{ ..}

@Entity  
@Table(name="contractemployee102")  
@AttributeOverrides({  
    @AttributeOverride(name="id", column=@Column(name="id")),  
    @AttributeOverride(name="name", column=@Column(name="name"))  
})  
public class Contract_Employee extends Employee{ ...}

=======================================
######## TABLE PER SUBCLASS ###########
> tables are created as per persistent classes but they are reated using primary and foreign key. 
- So there will be NO DUPLICATE COLUMNS in the relation.

> We need to specify @Inheritance(strategy=InheritanceType.JOINED) in the parent class and 
- @PrimaryKeyJoinColumn in the subclasses.

EXAMPLE:
Employee <-- Regular_Emp, Contract_Emp
Employee : id, name
Regular_Emp : salary , bonus
Contract_Emp : pay_per_hour, contract_period

@Entity  
@Table(name = "employee103")  
@Inheritance(strategy=InheritanceType.JOINED)  
public class Employee { ...}

@Entity  
@Table(name="regularemployee103")  
@PrimaryKeyJoinColumn(name="ID")  
public class Regular_Employee extends Employee{ ...}

@Entity  
@Table(name="contractemployee103")  
@PrimaryKeyJoinColumn(name="ID")  
public class Contract_Employee extends Employee{ ... }

> @PrimaryKeyJoinColumn â€“ This annotation specifies a primary key column that is used as a foreign key to join to another table.
- If no @PrimaryKeyJoinColumn is specified for a subclass in the JOINED mapping strategy, the foreign key columns are assumed to have the same names as the primary key columns of the primary table of the superclass

Table will be 
employee103 : id, name
regularemployee103 : eid, salary, bonus
contractemployee103: eid, pay_per_hour, contract_period

## ADVANTAGE
> Using this hierarchy, does not require complex changes to the database schema when a single parent class is modified.
> It works well with shallow hierarchy.

## DISADVANTAGE
> As the hierarchy grows, it may result in poor performance.
> The number of joins required to construct a subclass also grows.
