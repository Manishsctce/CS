> But if we are going to integrate the hibernate application with spring, we don't need to create the hibernate.cfg.xml file. 
- We can provide all the information in the applicationContext.xml file.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## Advantage of Spring framework with hibernate

> Spring framework provides HibernateTemplate class, 
- so we don't need to follow so many steps like create Configuration, BuildSessionFactory, Session, beginning and committing transaction etc.
- So it saves a lot of code.

EXAMPLE : 
Employee e1=new Employee(111,"arun",40000);    
hibernateTemplate.save(e1);  
> Here we don't have to do configuration and get session to do our work
=======================================
######### USING SessionFactory ########

## We have option to use HibernateTemplate or directly use SessionFactory to maintain our session with own.

EXAMPLE:
<beans>
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">  
        <property name="driverClassName"  value="oracle.jdbc.driver.OracleDriver"></property>  
        <property name="url" value="jdbc:oracle:thin:@localhost:1521:xe"></property>  
        <property name="username" value="system"></property>  
        <property name="password" value="oracle"></property>  
    </bean>  
      
    <bean id="mysessionFactory"  class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">  
        <property name="dataSource" ref="dataSource"></property>  
          
        <property name="mappingResources">  
			<list value="employee.hbm.xml" />  							
        </property>  
          
        <property name="hibernateProperties">  
            <props>  
                <prop key="hibernate.dialect">org.hibernate.dialect.Oracle9Dialect</prop>  
                <prop key="hibernate.hbm2ddl.auto">update</prop>  
                <prop key="hibernate.show_sql">true</prop>                    
            </props>  
        </property>  
    </bean>  
</beans>
applicationContext.xml
> In this file, we are providing all the informations of the database in the BasicDataSource object. 
- This object is used in the LocalSessionFactoryBean[c] object, containing some other informations such as mappingResources and hibernateProperties. 
- now it can be autowired to SessionFactory and the sessionFactory can be used in DAOImpl.
- In this case, we have to handle session closure with our own.
=======================================
######### HibernateTemplate ###########

## Define HibernateTemplate?
> org.springframework.orm.hibernate.HibernateTemplate 
> It is a helper class which provides different methods for querying/retrieving data from the database. 
- It also converts checked HibernateExceptions into unchecked DataAccessExceptions.

#### METHODS ####
1. void persist(Object entity) 
- persists the given object.

2. Serializable save(Object entity)	
- persists the given object and returns id.

3. void saveOrUpdate(Object entity)	
- persists or updates the given object. If id is found, it updates the record otherwise saves the record.

4. void update(Object entity)	
- updates the given object.

5. void delete(Object entity)	
- deletes the given object on the basis of id.

6. Object get(Class entityClass, Serializable id)	
- returns the persistent object on the basis of given id.

7. Object load(Class entityClass, Serializable id)	
- returns the persistent object on the basis of given id.

8. List loadAll(Class entityClass)	
- returns the all the persistent objects.
-----------------------------------------
## What are the benefits does HibernateTemplate provide?
The benefits of HibernateTemplate are :

> HibernateTemplate, a Spring Template class simplifies interactions with Hibernate Session.
> Common functions are simplified to single method calls.
> Sessions are automatically closed.
> Exceptions are automatically caught and converted to runtime exceptions.
=====================================
### SPRING HIBERNATE INTERGRATION ###
> 2 ways we can provide database connection details to Hibernate, 
- 1. by passing everything in hibernateProperties and 
- 2. by passing a DataSource to hibernate after creating it.

> Spring ORM provides two classes – 
1. org.springframework.orm.hibernate3.LocalSessionFactoryBean 
- when hibernate mappings are XML based and 

2. org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean 
- for annotations based mapping.


> FOR HIBERNATE 4, 
- we need to use org.springframework.orm.hibernate4.LocalSessionFactoryBean for SessionFactory bean
- this is the single class for both LocalSessionFactoryBean and AnnotationSessionFactoryBean

EXAMPLE:
applicationContext.xml
> In this file, we are providing all the informations of the database in the BasicDataSource object. 
- This object is used in the LocalSessionFactoryBean[c] object, containing some other informations such as mappingResources and hibernateProperties. 
- The object of LocalSessionFactoryBean class is used in the HibernateTemplate class

BasicDataSource(driveClassName,url,username,password) --> 
LocalSessionFactoryBean (BasicDataSource dataSource, mappingResources:List,hibernateProperties:Properties) --->
HibernateTemplate (sessionFactory:LocalSessionFactoryBean)

EXAMPLE:
<beans>
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">  
        <property name="driverClassName"  value="oracle.jdbc.driver.OracleDriver"></property>  
        <property name="url" value="jdbc:oracle:thin:@localhost:1521:xe"></property>  
        <property name="username" value="system"></property>  
        <property name="password" value="oracle"></property>  
    </bean>  
      
    <bean id="mysessionFactory"  class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">  
        <property name="dataSource" ref="dataSource"></property>  
          
        <property name="mappingResources">  
			<list value="employee.hbm.xml" />  							
        </property>  
          
        <property name="hibernateProperties">  
            <props>  
                <prop key="hibernate.dialect">org.hibernate.dialect.Oracle9Dialect</prop>  
                <prop key="hibernate.hbm2ddl.auto">update</prop>  
                <prop key="hibernate.show_sql">true</prop>                    
            </props>  
        </property>  
    </bean>  
      
    <bean id="template" class="org.springframework.orm.hibernate3.HibernateTemplate">  
		<property name="sessionFactory" ref="mysessionFactory"></property>  
    </bean>  
      
    <bean id="d" class="com.javatpoint.EmployeeDao">  
		<property name="template" ref="template"></property>  
    </bean>   
</beans>  


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## How does Spring supports DAO in hibernate? 
> Spring’s HibernateDaoSupport class is a convenient super class for Hibernate DAOs. 
- It has handy methods you can call to get a Hibernate Session, or a SessionFactory. 
- The most convenient method is getHibernateTemplate(), which returns a HibernateTemplate. 
- This template wraps Hibernate checked exceptions with runtime exceptions, allowing your DAO interfaces to be Hibernate exception-free.

Example:
public class UserDAOHibernate extends HibernateDaoSupport {

  public User getUser(Long id) {
    return (User) getHibernateTemplate().get(User.class, id);
  }
  
  public void saveUser(User user) {
    getHibernateTemplate().saveOrUpdate(user);
    if (log.isDebugEnabled()) {
      log.debug(“userId set to: “ + user.getID());
    }
  }
  public void removeUser(Long id) {
    Object user = getHibernateTemplate().load(User.class, id);
    getHibernateTemplate().delete(user);
  }
}
-----------------------------------------
## How do you define hibernate mapping file in spring? 

Add the hibernate mapping file entry in mapping resource inside Spring’s applicationContext.xml file in the web/WEB-INF directory. 

< property name="mappingResources" >
< list >
< value > org/appfuse/model/User.hbm.xml < / value >
< / list >
< / property >
---------------------------------------------

