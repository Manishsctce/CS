#### SESSION MANAGEMENT IN SERVLET ####

## What is a Session?
> HTTP protocol and Web Servers are stateless, it means that for web server every request is a new request to process and 
- It can’t identify if it’s coming from client that has been sending request previously.

> SESSION IS A CONVERSIONAL STATE BETWEEN CLIENT AND SERVER and 
- it can consists of multiple request and response between client and server. 
- Since HTTP and Web Server both are stateless, the only way to maintain a session is when some unique information.
- the SESSION (SESSION ID) IS PASSED BETWEEN SERVER AND CLIENT IN EVERY REQUEST AND RESPONSE.

> Session management is the purview of the container in which Servlet/Jersey is deployed. 
- In most production cases, it will be deployed within a container that performs session management.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## How we can maintain session?

> There are several ways through which we can provide unique identifier in request and response.

1. USER AUTHENTICATION 
– This is the very common way where we user can provide authentication credentials from the login page and then 
- we can pass the authentication information between server and client to maintain the session. 
- This is not very effective method because IT WONT WORK IF THE SAME USER IS LOGGED IN FROM DIFFERENT BROWSERS.

2. HTML HIDDEN FIELD 
– We can CREATE A UNIQUE HIDDEN FIELD IN THE HTML and when user starts navigating, we can SET ITS VALUE UNIQUE TO THE USER AND KEEP TRACK OF THE SESSION. 
- This method can’t be used with links because it needs the form to be submitted every time request is made from client to server with the hidden field. 
- Also it’s not secure because WE CAN GET THE HIDDEN FIELD VALUE from the HTML source and use it to hack the session.

3. URL REWRITING 
– We can append a session identifier parameter with every request and response to keep track of the session. 
- This is very tedious because we need to keep track of this parameter in every response and make sure it’s not clashing with other parameters.

> good thing with Servlet URL Encoding is that it’s a fallback approach and IT KICKS IN ONLY IF BROWSER COOKIES ARE DISABLED.

4. COOKIES 
– Cookies are small piece of information that is sent by web server in response header and gets stored in the browser cookies. 
- When client make further request, it adds the cookie to the request header and we can utilize it to keep track of the session. 
- We can maintain a session with cookies but IF CLIENT DISABLES THE COOKIES, THEN IT WON’T WORK.

5. Session Management API 
– Session Management API is built on top of above methods for session tracking. 

Some of the major disadvantages of all the above methods are:
- Most of the time we don’t want to only track the session, we have to store some data into the session that we can use in future requests. 
- This will require a lot of effort if we try to implement this.
- All the above methods are not complete in themselves, all of them won’t work in a particular scenario. 
- So we need a solution that can utilize these methods of session tracking to provide session management in all cases.
=======================================
########### URL REWRITING #############
> append a session identifier parameter with every request and response to keep track of the session.

EXAMPLE: 
##LoginServlet.java
Cookie userName = new Cookie("user", user);//create cookies 
response.addCookie(userName);
			
String encodedURL = response.encodeRedirectURL("LoginSuccess.jsp");//used to append JSESSIONID in the URL to redirect
response.sendRedirect(encodedURL);

##LoginSuccess.jsp 
Cookie[] cookies = request.getCookies();//
if (cookies != null) {
	for (Cookie cookie : cookies) {
		if (cookie.getName().equals("user"))
			userName = cookie.getValue();
		if (cookie.getName().equals("JSESSIONID"))
			sessionID = cookie.getValue();
	}
} else {
	sessionID = session.getId();
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##What is JSESSIONID in Java? When does JSESSIONID gets created ?

> Web container is responsible for Session management and by default uses Cookie
> JSESSION id is a cookie which is used to manage session in Java web application. 
> if this feature is not disabled explicitly by using page directive %@ page session="false" %>
- JSESSIONID is created by Web Container whenever a new session is created

> If  client has disabled cookie than Container uses URL rewriting for managing session on which jsessionid is appended into URL as shown below:

https://localhost:8443/supermart/login.htm;jsessionid=1A530637289A03B07199A44E8D531427

> retrieve value of SessionID which is represented by JSESSIONID cookie when you call request.getSession()
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

