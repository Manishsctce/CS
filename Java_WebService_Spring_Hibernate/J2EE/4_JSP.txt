## What is JSP?

> JSP Stands for Java server pages
> use for developing web pages that support dynamic content 
> In JSP, java code is inserted in HTML pages by making use of special JSP tags
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##What are advantages of using JSP?

> The JSP pages are easier to maintain than servlet because we can separate designing and development. 
> It provides some additional features such as Expression Language, Custom Tag etc.
> JSP compiled before processing by the server unlike CGI which require an interpreter that interpret on request

> Servlets use println statements for printing an HTML document which is usually very difficult to use. 
- JSP has no such tedious task to maintain.

> JSP needs no compilation, CLASSPATH setting and packaging. 
> In a JSP page, VISUAL CONTENT AND LOGIC ARE SEPERATED, 
- which is not possible in a servlet. 

> There is automatic deployment of a JSP, recompilation is done automatically when changes are made to JSP pages. 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What are the JSP lifecycle phases?

JSP pages follows these phases:
1. Translation of JSP Page
2. Compilation of JSP Page
3. Classloading (class file is loaded by the classloader)
4. Instantiation (Object of the Generated Servlet is created).
5. Initialization ( jspInit() method is invoked by the container).
6. Reqeust processing ( _jspService() method is invoked by the container).
7. Destroy ( jspDestroy() method is invoked by the container).
=======================================
############### JspPage ###############
public interface javax.servlet.jsp.JspPage
extends Servlet {
  public void jspInit();
  public void jspDestroy();
}
> It inherit all methods from Servlet interface init(), service, destroy, getServletConfig, getServletInfo()
~~~~~~~~~~~~~~~~~~~~~~~~
public interface HttpJspPage extends JspPage{
  public void _jspService(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException;
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What are JSP lifecycle methods?

Note - jspInit(), _jspService() and jspDestroy() are the life cycle methods of JSP.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is the jspInit() method?

> jspInit() method of the javax.servlet.jsp.JspPage interface is similar to the init() method of javax.servlet.Servlet interface 
> This method is invoked by the container only once when a JSP page is initialized. 
> It can be overridden by a page author to initialize resources such as database and network connections, and to allow a JSP page to read persistent configuration data
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is the _jspService() method?

> The _jspService() method of the javax.servlet.jsp.HttpJspPage interface is invoked every time a new request comes to a JSP page. 
> This method takes the HttpServletRequest and HttpServletResponse objects as its arguments. 

> A PAGE AUTHOR CANNOT OVERRIDE _jspService(), AS ITS IMPLEMENTATION IS PROVIDED BY THE CONTAINER.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is the jspDestroy() method?

>  jspDestroy() of the javax.servlet.jsp.JspPage[i] is invoked by the container when a JSP page is about to be destroyed. 
> This method is similar to the destroy() of servlets. 

> It CAN BE OVERRIDDEN BY A PAGE AUTHOR TO PERFORM ANY CLEANUP OPERATION SUCH AS CLOSING A DATABASE CONNECTION.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## How can I override the jspInit() and jspDestroy() within a JSP page?

> these method can be declare in declare section to override as below
<%! public void jspInit() {	. . . } 
	public void jspDestroy() {. . . } 
%>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
### What are implicit objects in JSP?

> Implicit objects in JSP are the Java objects that the JSP Container makes available at the time of translation. 
> These objects need not be declared or instantiated by the JSP author.
> They are automatically instantiated by the container and are accessed using standard variables
> They are available only within the jspService method and not in any declaration becz code will go at class level.
> There are 9 IMPLICIT OBJECT 
- out, request, response, page, pageContext, application, exception, config, session
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is difference between JspWriter and Servlet PrintWriter?

TWO DIFFERENCES: 
1. JspWriter can throw exceptions, 
- PrintWriter should not do so. 

2. JspWriter uses a PrintWriter behind the scene, but since by default JSP pages are buffered, the PrintWriter won't be created until the buffer is flushed 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## Which implicit object is not available in normal JSP pages?

exception
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is application in jsp?

> Application implicit object is an instance of javax.servlet.ServletContext.
- It is basically used for getting initialization parameters and for sharing the attributes & their values across the entire JSP application,
- which means any attribute set by application implicit object would be available to all the JSP pages.

void log(String message): 
- This method writes the given message to the JSP Engine’s (JSP container’s) default log file associated to the application.

application.log(“This is error 404 Page not found”);
=======================================
############## JSP TAGS ###############

##What are the different types of JSP tags?

> JSP is having 3 different type of tags

1. Presentation tags - to represent to user basically html tags

2. JSP Standard tags - It is of 3 types 
	2a. Directive tags - Page, include, taglib
	2b. Standard Action tags - forward action, include action, useBean action
	2c. Scriplet tags - scriplet, expression, declaration
	
3. Custom tags
=================================


http://www.journaldev.com/1907/java-servlet-session-management-tutorial-with-examples-of-cookies-httpsession-and-url-rewriting

## What are the Directory structure of JSP?

[web-app(context-root)]--> [WEB-INF],jsp,static resources(eg. html,images,css etc)

[WEB-INF] --> [classes]-->class file, [lib], web.xml
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Is it possible for one JSP to extend another java class if yes how?

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##What is < jsp:usebean >tag why it is used?

> tag is used to create a instance of java bean
> first it tries to find out the bean. if instanciate already then assign it to the variable to the scope that is being define .

SYNTAX : 
<jsp:useBean id= "instName" 
	scope= "page|request|session| application" 
	class= "packageName.className" 
	type= "packageName.className"  
	beanName="packageName.className | <%= expression >" >  
</jsp:useBean> 

> Her class must not be abstract and must be public , no-argument constu
> If you use type without class or beanName, no Bean is instantiated.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##How to disable caching on back button of the browser?

> Caching in JSP pages can be prevented by setting the appropriate HTTP header attributes.
> The following scriptlet defined at the beginning of JSP pages can prevent them from being cached at the browser.

<%  
response.setHeader("Cache-Control","no-store");   
response.setHeader("Pragma","no-cache");   
response.setHeader ("Expires", "0"); //prevents caching at the proxy server  
%>  
OR
<%
response.setHeader("Cache-Control","no-cache"); //HTTP 1.1
response.setHeader("Pragma","no-cache"); //HTTP 1.0
response.setDateHeader("Last-Modified", (new Date()).getTime() ); //prevents caching at the proxy server
%>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is difference between directives and actions tags

> Directives are used during translation phase while actions are used during request processing phase
> Unlike Directives Actions are re-evaluated each time the page is accessed.
>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## How can we handle the exceptions in JSP ?

> There are two ways to perform exception handling:
1. By errorPage and isErrorPage attributes of page directive
2. By <error-page> element in web.xml file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is difference between GET and POST method in HTTP protocol?
> GET method sends the encoded user information appended to the page request. The page and the encoded information are separated by the ? Character.	
> POST method packages the information in exactly the same way as GET methods, but instead of sending it as a text string after a ? in the URL it sends it as a separate message
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What are filters?
> JSP Filters are Java classes that can be used in JSP Programming for the following purposes:
> To intercept requests from a client before they access a resource at back end.
> To manipulate responses from server before they are sent back to the client.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## How do you define filters?
> Filters are defined in the deployment descriptor file web.xml and then mapped to either servlet or JSP names or URL patterns in your application's deployment descriptor.

> When the JSP container starts up your web application, it creates an instance of each filter that you have declared in the deployment descriptor. The filters execute in the order that they are declared in the deployment descriptor.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##  What are cookies?
>  a small amount of information sent by a servlet to a Web browser, saved by the browser, and later sent back to the server
> A cookie's value can uniquely identify a client, so cookies are commonly used for session management.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##  How to delete cookies with JSP?
> to delete a cookie three steps:

1. Read an already existing cookie and store it in Cookie object.
2. Set cookie age as zero using setMaxAge() method to delete an existing cookie.
3. Add this cookie back into response header.

Cookie can be deleted by setting setMaxAge(0) on the cookie object. A cookie, democookie, can be deleted using the following scriptlet:
<%
     Cookie delCookie = new Cookie("democookie", null);
     delCookie.setMaxAge(0);
     delCookie.setPath("/");
     response.addCookie(delCookie);
%>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
######## Session Management ##########
##  How is Session Management done in JSP?
Session management can be achieved by the use of:

1. Cookies: A webserver can assign a unique session ID as a cookie to each web client and for subsequent requests from the client they can be recognized using the received cookie.

2. Hidden Form Fields: A web server can send a hidden HTML form field along with a unique session ID as follows:

<input type="hidden" name="sessionid" value="12345">
This implies that when the form is submitted, the specified name and value will be getting included in GET or POST method.

3. URL Rewriting: In URL rewriting some extra information is added on the end of each URL that identifies the session. This URL rewriting can be useful where a cookie is disabled.

4. The session Object: JSP makes use of servlet provided HttpSession Interface which provides a way to identify a user across more than one page request or visit to a Web site and to store information about that user.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What are the options in JSP to include files? (R- JSP2b/c)
> In JSP, we can perform inclusion in the following ways:
1. By include directive: For example:
<%@ include file=”header.jsp” %>

2. By include action: For example:
<%@ include file=”header.jsp” %>

3. By using pageContext implicit object For example:
<%
     pageContext.include(“/header.jsp”);
%>

4. By using RequestDispatcher object: For example: 
<%
 RequestDispatcher rd = request.getRequestDispatcher(“/header.jsp”);
  Rd.include(request,response);
%>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

##How can we avoid direct access of JSP pages from client browser?
> anthing inside WEB-INF directory can't be accessed directly in web appl.
> we will place our JSP pages in WEB-INF directory to avoid direct access to JSP page from client browser. 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##What are different types of comments in JSP?

> HTML COMMENTS: Since JSP pages are like HTML, we can use HTML comments like <-- HTML Comment -->. 
> These comments are sent to client also and we can see it in HTML source. 
> we should avoid any code level comments or debugging comments using HTML comments.

> JSP COMMENTS: JSP Comments are written using scriptlets like <%-- JSP Comment --%>. 
> jsp comments are present in the generated servlet source code and doesn’t sent to client. 
> For any code level or debugging information comments we should use JSP comments.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##Why use of scripting elements in JSP is discouraged?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##Can we define a class in a JSP Page?
> It’s not a good practice though, but we can define a class inside a JSP Page
> can't be public
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##How can we disable java code or scripting in JSP page?
> We can disable scripting elements in JSP pages through deployment descriptor configuration like 
<jsp-config>
    <jsp-property-group>
        <url-pattern>*.jsp</url-pattern>
        <scripting-invalid>true</scripting-invalid>
    </jsp-property-group>
</jsp-config>
> Above url-pattern will disable scripting for all the JSP pages.
> if you want to disable it only for specific page, we can give the JSP file name itself

##What is jsp-config in deployment descriptor?
> jsp-config element is used to configure different parameters for JSP pages. Some of it’s usage are:
> Configuring tag libraries for the web application like below.
<jsp-config>
        <taglib>
            <taglib-uri>http://journaldev.com/jsp/tlds/mytags</taglib-uri>
            <taglib-location>/WEB-INF/numberformatter.tld</taglib-location>
        </taglib>
</jsp-config>
> We can control scripting elements in JSP pages.
> We can control JSP Expression Language (EL) evaluation in JSP pages.
> We can define the page encoding for URL pattern.
To define the buffer size to be used in JSP page out object.
To denote that the group of resources that match the URL pattern are JSP documents, and thus must be interpreted as XML documents.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##When will Container initialize multiple JSP/Servlet Objects?

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##Can we use JavaScript with JSP Pages?
> JSP is a server side technology, 
> it’s used to generate client side response and we can add javascript or CSS code like any other HTML page.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##How can we prevent implicit session creation in JSP?
> use JSP page directive session attribute to indicate compiler to not create session by default.
<%@ page session ="false" %>

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##How to import content from an external url to jsp?
> use JSTL tag to import content from an external URL to jsp at the request time our include directive and include action will not work as bcz they include content from same webapp.
<c:import url="http://javahash.com/reasons-behind-the-success-of-hadoop/" />

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##if u havea .class file ,how can u say whether it is servlet 
or not ,dont use java decompliler
> Just Use Reflection to get its SuperClass. If this super
class is Any of Servlet class like HttpServlet or
GenericServlet then this class is a servlet.

String superClassName = MyClass.class.getSuperClass().getClassName();
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##

===========================
###### DEPLOYMENT DESCRIPTOR ######
##what is deployment descriptor?
> It is a xml file naming web.xml inside WEB_INF folder of <Projects>/WebContent 
> It contain multiple statement that give instruction to the web container for deploying web application.
> grammer of xml tags i.e xsd,dtd is necessary otherwise appli will not run.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In Servlet 2.3, using dtd file to validate xml content in web.xml
In servlet 2.4 onwards, using xsd file to validate xml content in web.xml

<servlet>Maps internal name to fully-qualified class name.
<servlet-mapping>Maps internal name to public URL name

Ex - 
<servlet>
	<servlet-name>Servlet_login</servlet-name>//our internal mapping name
	<servlet-class>Login</servlet-class>//this is class
</servlet>

<servlet-mapping>
	<servlet-name>Servlet_login</servlet-name>
	<url-pattern>/signin.do</url-pattern>//with internal mapping "Servlet_login" map external url
</servlet-mapping>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<context-param> //use to set the context parameter it must have name and value
	<param-name>...</>
	<param-value>...</>
</>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##How do we configure init params for JSP?
##Difference between servlet init and servlet context parameter
> We can configure init params for JSP similar to servlet in web.xml file
> servlet init tag is define as above in web.xml
> it is used to pass parameter to Servlet class(here MyClass) 
> it cann't use in .jsp page directly
> for using in Jsp we need to map as below

<servlet-mapping>
<servlet-name>MyClass</servlet-name>
<url-pattern>/details1.jsp</url-pattern>
</servlet-mapping>

<servlet>
      <servlet-name>MyClass</servlet-name>
	  <jsp-file>/details1.jsp</jsp-file>
      <init-param>
          <param-name>name2</param-name>
          <param-value>Gaurav Agrawal</param-value>
      </init-param>     
  </servlet>

> it is sub-tag of servlet with servlet-name and used initialize param in servlet bean not for application.
> If servlet-name is mention in web.xml and not present in src then it's value will always show null 
-------------
> <context-param> can be set as below
<context-param>
      <param-name>name1</param-name> 
      <param-value>Manish Aggr</param-value>     
  </context-param>
  
> it can call from anywhere within the application 
> use application.getInitParameter("name")
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##How to handle runtime exceptions in JSP?

> In JSPs there are multiple ways to handle the exceptions :
1. Using errorPage and isErrorPage attribute of page directive
2. Using <error-page> element in the web.xml file
3. Using Java Scriplets within a JSP file
 
1. PAGE DIRECTIVE ATTRIBUTES - errorPage and isErrorPage:
> Any uncaught exceptions thrown in the body of the JSP page implementation class result in the forwarding of the client request 
and uncaught exception to the errorPage URL specified by the JSP page directive.

For example: <%@ page errorPage="error.jsp" %>
> redirects the browser to the JSP page error.jsp if an uncaught exception is encountered during request processing. 
> Within error.jsp, to indicate that it is an error-processing page, isErrorPage attribute must be set to true in the page directive:
<%@ page isErrorPage="true" %>

> The Throwable object describing the exception may be accessed within the error page via the exception implicit object only if isErrorPage attribute is set to true.
<%@ page isErrorPage="true" %>
...
<%= exception.getMessage() %>
--------------- 
2. <error-page> element in the web.xml file:
> This approach is better alternative as the user doesn't need to use the page directive to declare the error page in each JSP file. 
> Making a single entry in the web.xml file serves the purpose. 
> We can either specify the exception type or the error code with the location element.

<error-page>
<exception-type> java.lang.Exception </exception-type>
<location> /error.jsp </location>
</error-page>
 
3. Java Scriptlet:
> This approach is the traditional way of handling exceptions. 
> This is not considered to be the best way of handling exception but used in case fast debugging is required. 
> In this approach the developer can simply use the try ... catch .. format within the scriptlet like any normal Java code.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##How are web applications packaged in Java?

Answer:
Web Applications are packaged into Web ARchive (WAR) file. A web application exists as a structured hierarchy of directories. The root of this hierarchy serves as the document root for files that are part of the application. The top-level directory of a web application is the document root of the application. The document root is where JSP pages, client-side classes and archives, and static web resources, such as html pages and images, are stored.
The document root contains a subdirectory named WEB-INF, which contains the following files and directories:
·         web.xml: The web application deployment descriptor
·         classes: A directory that contains server-side classes: Servlets and other utility classes
·         lib: A directory that contains JAR archives of libraries called by Servlets and other server side classes
 
If your web application does not contain any servlets, filter, or listener components then it does not need a web application deployment descriptor. In other words, if your web application only contains JSP pages and static files then you are not required to include a web.xml file. With Servlet 3.0 annotations, we can remove a lot of clutter from web.xml by configuring servlets, filters and listeners using annotations.
 
========================
## Explain the elements of web.xml

Answer:
The web.xml is the deployment descriptor for WAR file which is located in the WEB-INF directory of the web application. It is used to configure Servlet and other server side resources used in the web application. Each servlet must appear in a web.xml file , to add a servlet to an existing context, add a servlet and servlet-mapping element to the context.
 
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE web-app
     PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.2//EN"
     "http://java.sun.com/j2ee/dtds/web-app_2_4.dtd">
 
 <web-app>
     <servlet>
         <servlet-name>HelloServlet</servlet-name>
         <servlet-class>com.demo.HelloServlet</servlet-class>
     </servlet>
      <servlet-mapping>
         <servlet-name>HelloServlet</servlet-name>
         <url-pattern>/HelloServlet</url-pattern>
     </servlet-mapping>
</web-app>
 
The first entry, under the root servlet element in web.xml, defines a name for the servlet and specifies the compiled class that executes the servlet. The servlet element also contains definitions for initialization attributes and security roles for the servlet.
 
The second entry in web.xml, under the servlet-mapping element, defines the URL pattern that calls this servlet.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##How can you make a Servlet/JSP Threadsafe?
 
> To make sure that a servlet is thread safe, the service() method SHOULD NOT ACCESS ANY MEMBER VARIABLES, unless these member variables are thread safe themselves. 
> The service() method SHOULD NOT REASSIGN MEMBER VARIABLES, as this may affect other threads executing inside the service() method. 
> If there is a compelling need to reassign a member variable, make sure this is done inside a synchronized block. 
> If there are any local variables in service methods, no need to worry because LOCAL VARIABLES ARE ALWAYS THREAD SAFE.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##What is difference between ServletResponse sendRedirect() and RequestDispatcher forward() ?(R-Jsp2e)

> RequestDispatcher forward() : it is used to forward the same request to another resource whereas 
> ServletResponse sendRedirect() : is a two-step process. 
	- web application returns the response to client with status code 302 (redirect) with URL to send the request. 
	- The request sent is a completely new request.
 
> forward() is handled internally by the container whereas 
> sendRedirect() is handled by browser. 

> We should use forward() when accessing resources in the same application because it’s faster than sendRedirect() method that required an extra network call.
 
> In forward() browser is unaware of the actual processing resource and the URL in address bar remains same whereas 
> in sendRedirect() URL in address bar change to the forwarded resource. 
The forward() can’t be used to invoke a servlet in another context, we can only use sendRedirect() in this case.
------------------------
##How can the Session in Servlet be destroyed?

> An existing session can be destroyed in the following ways:
1. Programmatically : Using session.invalidate() method, which makes the container abandon the session on which the method is called.
2. When the server itself is shutdown.
3. Setting timeout in the deployment descriptor: This can be done by specifying timeout between the <session-timeout>tags.
	<session-config>
		<session-timeout>20</session-timeout> --20min
	</session-config>
4. Setting timeout programmatically: This will set the timeout for a specific session
	HttpSession session = request.getSession();
	session.setMaxInactiveInterval(20*60);

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##What are the new features in Servlet 3.0?

> Servlet 3.0 specification introduced several new features like ease of development through annotations, Pluggability and extensions support for adding third party framework and asynchronous processing that made Servlet development easy and simple.

The features are:
> Ease of development using Annotations - Servlets are configured using xml elements in web.xml, from Servlet 3.0 it is also possible to specify the Servlet definition in the component itself, through annotations. Annotations - @WebServlet, @WebServletContextListener, @ServletFilter, @InitParam helps to define Servlet.
 
> Pluggability through Web Frameworks -  Pluggability provides fewer configurations and a good modularity for web applications. Pluggability is achieved with the introduction of web module deployment descriptor fragments, shortly referred as ‘web fragments’. A web fragment is part of web.xml that is specified and included in the framework specific jars META-INF directory.
 
> Asynchronous Processing in Servlet - In many situations, Servlet has to interact with a resource for processing data– it could be database resource, a web service or a message resource.  While interacting with these resources, the Servlet has to wait until it gets a response from the resource before it actually generates a response. This makes the Servlet call to the resource as a blocking call and results in the inefficiency of the Servlet response. Servlet 3.0 specification addresses this issue of Servlet thread being blocked with the introduction of asynchronous processing of Servlet. This asynchronous processing allows the thread to issue a call to the resource and return back to the container without getting blocked so that it can perform other tasks which results in the increase in efficiency of Servlet performance.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## Where JSP fit in MVC structure?
> JSP can be used independently or as the view component of a server-side model–view–controller design, 
> normally with JavaBeans as the model and 
> Java servlets (or a framework such as Apache Struts) as the controller. 
========================================
JSP API consists of two packages:
1. javax.servlet.jsp
2. javax.servlet.jsp.tagext

The javax.servlet.jsp package has 3 interfaces and classes.
javax.servlet.Servlet <--JspPage <-- HttpJspPage 
The two interfaces are as follows:
1. JspPage interface- it extends Servlet. provide jspInit(), jspDestroy()
It inherit below methods from Servlet 
> init, service, destroy, getServletConfig, getServletInfo
	
2. HttpJspPage interface- it provide public void _jspService() 
>  _ signifies that you cannot override this method.

The classes are as follows:
1. JspWriter 2. PageContext 3. JspFactory 4. JspEngineInfo 
5. JspException 6. JspError
=========================

###3. javax.servlet.jsp
INTERFACE 
3.1i. public interface JspPage
extends Servlet 

METHODS - Only 2 methods and other inherit from Servlet
> void jspInit()
> void jspDestroy()

It inherit below methods from Servlet 
> init, service, destroy, getServletConfig, getServletInfo
------------------------
3.2i. public interface HttpJspPage
extends JspPage

METHODS - Only 1 methods and other inherit from JspPage
> void _jspService(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException
------------------------
3.3i. public interface JspApplicationContext

METHODS - Only 3 methods 
void addELContextListener(ELContextListener listener) ;

~~~~~~~~~~~~~~~~~~~~~~~~~
CLASS
3.1c. JspContext
> serves as the base class for the PageContext class

> abstract Object findAttribute(String name)
> abstract Object getAttribute(String name)
> abstract Object getAttribute(String name, int scope)
> abstract Enumeration<String> getAttributeNamesInScope(int scope)
> abstract int getAttributesScope(String name)
> abstract void setAttribute(String name, Object value) 
> abstract void setAttribute(String name, Object value, int scope) 
> abstract void removeAttribute(String name)
> abstract void removeAttribute(String name, int scope)
-----------------------
3.2c. public abstract class PageContext
extends JspContext

public static final int	PAGE_SCOPE = 1
public static final int	REQUEST_SCOPE = 2
public static final int	SESSION_SCOPE = 3
public static final int	APPLICATION_SCOPE = 4

> it inherit all methods of JspContext
Ex - pageContext.setAttribute("name","Manish Agrawal",SESSION_SCOPE)
-----------------------
3.3c. JspFactory
>  JspFactory is an abstract class that defines a number of factory methods available to a JSP page at runtime for the purposes of creating instances
> static JspFactory getDefaultFactory() 
-----------------------
3.4c. JspWriter - 
> out implicit object is an object of JspWriter

METHODS - 
> void print(), 
> void println(), 
> void newLine() 
> void clear() - It clears the output buffer without even letting it write the buffer content to the client.

> void clearBuffer() -  similar to the clear(). Invoke of out.clear() on an already flushed buffer will throws an exception, however out.clearBuffer() doesnt.

> void flush() - clears the buffer and write the content to the output before flushing it

> int getBufferSize(): This method returns the size of output buffer in bytes.
-----------------------
3.5c. JspEngineInfo
3.6c. ErrorData




======================================

## How JSP handle runtime exception?

## How do I pass the attribute value from jsp page to spring controller?
> Use 

@RequestMapping(value="login", method=RequestMethod.POST)
public void loginUser(User user){
//user object will automatically be populated with values sent from browser or jsp page. Provide your authentication logic here
}

## How can I send data from one JSP page to another JSP page?
## How do I navigate from a JSP page to the corresponding controller class using annotation based approach in Spring Framework?

I am trying to retrieve value from Servelet in JSP page. I used 2 methods but both methods gives result null in JSP page?

## What is the flow of real time Java application from front end (say JSP) to database, if the project uses JSP + spring MVC + hibernate + MySQL?
##How do I get the values from the checkbox and pass from the controller in AngularJS?
## Can I pass a value from one HTML (or JavaScript) page to another HTML (or JavaScript) page without passing it in URL?

http://www.journaldev.com/2110/jsp-interview-questions-and-answers
http://docs.oracle.com/cd/E14571_01/web.1111/e13712/web_xml.htm#WBAPP502 