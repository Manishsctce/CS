######### JSP directives ###########

## What are JSP directives?

> JSP directives are MESSAGES FOR THE JSP ENGINE i.e. 
- JSP directives serve as a message from a JSP page to the JSP container and control the processing of the entire page
> They are USED TO SET GLOBAL VALUES such as a class declaration, method implementation, output content type, etc.
> They do not produce any output to the client.
> There are 3 STANDARD DIRECTIVE - 
	1. page 
	2. include 
	3. taglib
	
># <%@ directive-name [attributes="value" ...] %>
=======================================
########## 1a. PAGE directive #########
##What is PAGE DIRECTIVE?

> It provide attributes that gets applied to the entire JSP page
> we can define multiple different attributes in single page
> NO ATTRIBUTES CAN BE SPECIFY MORE THAN ONCE OTHER THAN IMPORT ATTRIBUTE
> Page Attributes are language, extends, contenttype, import, session, buffer, autoflush, isThreadSafe, isErrorPage, errorPage, info
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
###### 13 PAGE ATTRIBUTES ######
1. language - default value is “java” and this is the only value it can hv
----------------
2. extends - 
> attribute is used to define super class of the generated Servlet code
> rarely used and we can use it if we have extended HttpServlet and overridden some of it’s implementations
<%@ page extends="mypackage.SampleClass"%>
----------------
3. contentType -  
> used to set the content type of a JSP page
> default value: text/html
Example:
<%@ page contentType="text/html; charset=US-ASCII" %>
--------------- 
4. IMPORT - 
> instruct jsp container to import java classes while generating servlet code
Ex - <%@ page import="java.io.*, java.sql.*" %>, OR
<%@ page import="java.io.*" %>
--------------- 
5. SESSION - <%@ page session="true/false"> 
> by default true, 
> it implies that session objects will be available or not
--------------- 
6. buffer - 
> Anything generated by the JSP page is stored in a buffer. When the buffer is full, its sent back to the client (browser)
> it affect the buffering capability of JspWriter
> Default value is 8kb
--------------- 
7. autoflush - 
> autoFlush attribute tells the JSP engine when the buffer should be flushed. By default it is set to true
--------------- 
8. isThreadSafe,
> default value is true.
- When isThreadSafe=true, the same JSP page can honour multiple clients request by creating multiple object of servlet
- For each Servlet object, a separate service() is created and that's why thread safe

> When isThreadSafe=false, the generated servlet will implement SingleThreadModel 
- only one object for the Servlet/JSP will create , for multiple clients request multiple files of the same JSP are loaded and executed. 
- This decreases the performance
- loose all the benefits of servlet multi-threading features.
--------------- 
9. isErrorPage  
> by default it is false
> if we set then exception object will be available for the page

---------------
10. errorPage - <%@ isErrorPage='true' %>
EXAMPLE:
<%@ errorPage="errorpage_url" %>
- if the JSP throws exception, the request is redirected to the error handler jsp 

> errorpage have access to the exception objects	
> used to set error page for the jsp

>  It’s datatype is URI.	
---------------
11 isELIgnored - default value is false, so Expression lang is enabled by default.
--------------- 
12. INFO - It provides a description to a JSP page
> string specified in info will return when we call getServletInfo() method. 
Example : <%@ page info="Home Page JSP" %>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-
##Is it possible for one JSP to extend another java class if yes how?
> Yes, we can extends another JSP using this <%@ include page extends="classname" %> 
> It is bcz JSP is converted to servlet and its implements javax.servlet.jsp.HttpJspPage interface, so we can extend another java class

=======================================
######### INCLUDE directive ###########
> it MERGES THE CONTENT OF ANOTHER FILE AT TRANSLATION TIME INTO THE JSP 
> it CAN BE USED ANYWHERE IN THE PAGE
EXAMPLE - 
<%@ include file="/header.html" %>
<%@ include file="/doc/legal/disclaim.html" %>

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is the include directive?

> it is used to STATICALLY INSERT THE CONTENTS of a resource of another jsp into the current JSP.
> it enables to REUSE THE CODE without duplicating it, and includes the contents of the specified file at the translation time.
> The syntax of the include directive is as follows:
<%@ include file = "FileName" %>
> This directive has only one attribute called file that specifies the name of the file to be included.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## Why we need to use the include directive? Cant we simply add the files content in the current JSP instead of using the directive?

> it is not a good practice.
> it enhance the code re-useability
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## Explain include Directive and include Action of JSP? (R-JSP2c.)
## What are the options in JSP to include files? (R- JSP2b/c)
=========================================
########### 1c. TAGLIB directive ###########
> we can makes custom tags available in the current page using taglib
> we need to do
	1. create Tag Handler Class
	2. create Tag Library Descriptor(TLD) in WEB-INF with extension (.tld)
	3. use it in jsp

1. create TAG HANDLER CLASS

> it can be make by implementing Tag/IterationTag/BodyTag interface or
TagSupport/BodyTagSupport/SimpleTagSupport class present in "javax.servlet.jsp.tagext" package.

> All the classes that support custom tags are present inside "javax.servlet.jsp.tagext". 
> it should have an overriden method public void doTag() throws JspException, IOException;

2. Create TLD can written as below
> Tag Library Descriptor file where we will specify our tag name, tag handler class and tag attributes.
> file should present at the location: Project Name/WebContent/WEB-INF/ 
> it should have a .tld extension.

<tag><name>MyMsg</name>
<tag-class>com.MyCustomTag</tag-class>
<body-content>scriptless</body-content></tag> //for accessing body of custom tag

Here "tag" gives tag name , body-content state is it hv body?

3. define prefix in JSP Page as
> A JSP page where we will be using our custom tag.
> include the tag library in web application using jsp-config and taglib elements
>  taglib directive should have the TLD file path in uri field

># SYNTAX - <%@ taglib uri="tagLibraryURI" prefix="tagPrefix" %>
> Now this prefix call "tag" define in TLD and then tld call specified class for processing.

Note: check JSPCompleteDemo for example
=======================================
#### JSP Standard Tag Library(JSTL) ###

> It is the standard tag library that provides tags to control the JSP page behaviour. 
- JSTL tags can be used for iteration and control statements, internationalisation, SQL etc

> JSTL jars are container specific, 
- for example in Tomcat, we need to include jstl.jar and standard.jar jar files in project build path.
- otherwise error in JSP pages – eclipse Can not find the tag library descriptor for "http://java.sun.com/jsp/jstl/ core"


############# JSTL Tags ###############

> Based on the JSTL functions, they are categorized into 5 types:

## 1. JSTL Core Tags: 
- it provide support for iteration, conditional logic, catch exception, url, forward or redirect response etc.
- To use JSTL core tags, we should include it in the JSP page like below: 
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>


## 2. JSTL Formatting and Localisation Tags: 
- it provided for formatting of Numbers, Dates and i18n support through locales and resource bundles. 
- We can include these jstl tags in JSP with below syntax:

<%@ taglib uri="http://java.sun.com/jsp/jstl/fmt" prefix="fmt" %>


## 3. JSTL SQL Tags: 
- It provide support for interaction with relational databases such as Oracle, MySql etc. 
- using JSTL SQL tags we can run database queries, 
- we include these JSTL tags in JSP with below syntax:

<%@ taglib uri="http://java.sun.com/jsp/jstl/sql" prefix="sql" %>

## 4. JSTL XML Tags: 
- It is used to work with XML documents such as parsing XML, transforming XML data and XPath expressions evaluation. 
- Syntax to include JSTL XML tags in JSP page is:

<%@ taglib uri="http://java.sun.com/jsp/jstl/xml" prefix="x" %>

## 5. JSTL Functions Tags: 
- It provide a number of functions that we can use to perform common operation, most of them are for String manipulation such as String Concatenation, Split String etc. 
Syntax to include JSTL functions in JSP page is:

<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn" %>

