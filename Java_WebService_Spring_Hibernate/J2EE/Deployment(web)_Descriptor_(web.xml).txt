###### DEPLOYMENT DESCRIPTOR #######
##What is the deployment descriptor?

> web container uses the Parser to get the information from the web.xml file. 
>  There are many xml parsers such as SAX, DOM and Pull.
=======================================
<web-app> represents the whole application.
<servlet> is sub element of <web-app> and represents the servlet.
<servlet-name> is sub element of <servlet> represents the name of the servlet.
<servlet-class> is sub element of <servlet> represents the class of the servlet.
<servlet-mapping> is sub element of <web-app>. It is used to map the servlet.
<url-pattern> is sub element of <servlet-mapping>. This pattern is used at client side to invoke the servlet.
=======================================

=======================================
>> The ROOT ELEMENT for web.xml is <web-app>. 
> The following elements are defined within the <web-app> element:
- context-param
- icon
- display-name
- description
- distributable
- filter
- session-config
- mime-mapping
- welcome-file-list
- error-page
- taglib
- resource-env-ref
- resource-ref
- security-constraint
- security-role
- env-entry
- ejb-ref
- ejb-local-ref
=======================================
######### welcome-file-list ###########

> If that file is not found, the server then tries the next file in the list

EXAMPLE:
<welcome-file-list>
    <welcome-file>home.html</welcome-file>
</welcome-file-list>
=======================================
########## FILTER ############
> we can use filters to post-process the output of a servlet by appending data to the output generated by the servlet. 
- However, in order to capture the output of the servlet, you must create a wrapper for the response. 
(You cannot use the original response object, because the output buffer of the servlet is automatically flushed and sent to the client when the servlet completes executing and before control is returned to the last filter in the chain.) 
- When you create such a wrapper, WebLogic Server must manipulate an additional copy of the output in memory, which can degrade performance

<filter>
       <filter-name>tibcoAdminSSOFilter</filter-name>
       <filter-class>com.tibco.amf.admin.server.TibcoAxisServletFilter</filter-class>
</filter> 

> To write a filter class, implement the javax.servlet.Filter interface.
=======================================
########### FILTER-MAPPING ###########

<filter-name> Required
- The name of the filter to which you are mapping a URL pattern or servlet. 
- This name corresponds to the name assigned in the <filter> element with the <filter-name> element.

<url-pattern> Required - or map by <servlet>
> Describes a pattern used to resolve URLs. 
- The portion of the URL after the http://host:port + ContextPath is compared to the <url-pattern> by WebLogic Server. 
- If the patterns match, the filter mapped in this element is called.

<servlet> Required - or map by <url-pattern>
- The name of a servlet which, if called, causes this filter to execute.

Example-
<filter-mapping>
      <filter-name>tibcoAdminSSOFilter</filter-name>
      <url-pattern>/services/*</url-pattern>
    </filter-mapping>
=======================================
############## LISTENER ###############
> Define an application listener using the listener element.

<listener-class> Optional
- Name of the class that responds to a Web Application event

Example-
<!--register the listener for Single Sign On and Out use -->
    <listener>
         <listener-class>com.tibco.amf.admin.server.TibcoAxisServletListener</listener-class>
    </listener>

    <!--register the listener class to hold RequestContextHolder-->
    <listener>
        <listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
    </listener>

=======================================
############# SERVLET #################

> It is used to registered the servlet with servlet container.
> If a jsp-file is specified and the <load-on-startup> element is present, then the JSP is precompiled and loaded when WebLogic Server starts

<servlet-name> (Required)
- Defines the canonical name of the servlet, used to reference the servlet definition elsewhere in the deployment descriptor.

## <servlet-class> Required (either use <jsp-file>) 
- The fully-qualified class name of the servlet.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
######## servlet-mapping ########

> servlet-mapping element defines a mapping between a servlet and a URL pattern.
- By this mapping, servlet container decides to which application it should forward the request from client.

## SYNTAX FOR SERVLET MAPPING ## 
> A string beginning with a ‘/’ character and ending with a ‘/*’ suffix i.e "//*" USED FOR PATH MAPPING.
> A string beginning with a ‘*.’ PREFIX IS USED AS AN EXTENSION MAPPING.
> A string containing only the ‘/’ character indicates the “DEFAULT” SERVLET OF THE APPLICATION. 
- In this case the servlet path is the request URI minus the context path and the path info is null.

> All other strings are used for exact matches only.

EXAMPLE:-
<servlet>
	<servlet-name>SpringConfig</servlet-name>
	<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
</servlet>
<servlet-mapping>
	<servlet-name>SpringConfig</servlet-name>
	<url-pattern>/</url-pattern>
</servlet-mapping>
	
> servlets were intended to support multiple protocols, and not just HTTP. 
- URL patterns are specific to HTTP alone, and therefore the mapping of the servlet to HTTP URL patterns is done in a servlet-mapping tag, instead of the servlet tag which is used for declaring the more generic properties of the servlet
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
######### <init-param> ##########

> This is an element within the servlet.
> The optional <init-param> contains a name/value pair as an initialization parameter of the servlet.
- Use a separate set of init-param tags for each parameter.

> One <servlet> can contain any number of <init-param> tags.
> You can access these parameters with the javax.servlet.ServletConfig.getInitParameter() method.

EXAMPLE:-
<servlet>
    <servlet-name>dispatcher</servlet-name>
    <servlet-class>
        org.springframework.web.servlet.DispatcherServlet
    </servlet-class>
    <init-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>/WEB-INF/spring-servlet.xml</param-value>
    </init-param>
    <load-on-startup>1</load-on-startup>
 </servlet>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
## In web.xml file <load-on-startup>1</load-on-startup> is defined between <servlet></servlet> tag what does it means ?

<load-on-startup> (Optional)
> As we know, servlet is loaded at first request. That means it consumes more time at first request. 
> If we specify the load-on-startup in web.xml, SERVLET WILL BE LOADED AT PROJECT DEPLOYMENT TIME OR SERVER START. 
> So, it will take less time for responding to first request.

> It is also known as PRE-INITIALIZATION OF SERVLET and can hv -ve or +ve value.
> Container loads the servlets in ascending integer value. The 0 value will be loaded first then 1, 2, 3 and so on.
> If you pass the NEGATIVE VALUE, servlet will be LOADED AT REQUEST TIME, at first request.
- Lower integers are loaded before higher integers. 
- If no value is specified, or if the value specified is not a positive integer, WebLogic Server can load the servlet in any order in the startup sequence.

> Whenever we request for a servlet, servlet container will intialize the servlet and load it which is define in web.xml <load-on-startup> tags


Example-
    <servlet>
        <servlet-name>AxisServlet</servlet-name>
        <display-name>TIBCO Extension to the Apache-Axis Servlet</display-name>
        <servlet-class>com.tibco.amf.admin.server.TibcoAxisServlet</servlet-class>
        <load-on-startup>2</load-on-startup>
    </servlet>

    <servlet>
        <servlet-name>AdminInitServlet</servlet-name>
        <display-name>Admin Initialization Servlet</display-name>
        <servlet-class>com.tibco.amf.admin.server.AdminInitServlet</servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet>
        <servlet-name>RetrieveLogServlet</servlet-name>
        <display-name>Retrieve Log Servlet</display-name>
        <servlet-class>com.tibco.amf.admin.server.RetrieveLogServlet</servlet-class>
    </servlet> 
=======================================
############# CONTEXT-PARAM ###########

> The optional <context-param> element DECLARES a Web Application's servlet context INITIALIZATION PARAMETERS. 
> we can set each context-param within a single context-param element, using <param-name> and <param-value> elements. 

One web.xnl file can have any number of <context-param> tags also.
> we can access these parameters in code using below methods :-
- javax.servlet.ServletContext.getInitParameter() and 
- javax.servlet.ServletContext.getInitParameterNames()

<context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>/WEB-INF/applicationContext.xml</param-value>
</context-param>

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
## What is difference between <init-param> and <context-param>?
> <init-param> is accessible to one servlet only. 
> <context-param> tag exists outside any servlet tag (say, global area), every servlet can access it

- <init-param> data is local for a particular servlet and <context-param> data is global for all servlets

> ServletConfig object is used to 
=======================================
######## security-constraint ##########

> It defines the access privileges to a collection of resources defined by the <web-resource-collection> element.

#### <web-resource-collection> ####
> required
> Defines the components of the Web application to which this security constraint is applied.
> its sub-element is <url-pattern> (Optional) which can be used one or more time to declare to which URL patterns this security constraint applies.
- if <url-pattern> is not define for atleast 1 then <web-resource-collection> will be ignored by server.
~~~~~~~~~~~~~~~~~~~~~~~~
#### <auth-constraint> ####
- Optional

> Defines which groups or principals have access to the collection of Web resources defined in this security constraint. See also auth-constraint.
~~~~~~~~~~~~~~~~~~~~~~~~
###<user-data-constraint> ##
- Optional
- Defines how the client should communicate with the server.


EXAMPLE:
<security-constraint>
     <web-resource-collection>
         <web-resource-name>pagesWithRestrictedAccess</web-resource-name>
         <description>No Description</description>
         <url-pattern>/admin.jsp</url-pattern>
         <url-pattern>/adminSessionExpired.jsp</url-pattern>
         <url-pattern>/viewdata.jsp</url-pattern>
         <url-pattern>/viewaction.jsp</url-pattern>
         <url-pattern>/viewactionforentity.jsp</url-pattern>
		 <url-pattern>/generate_wsil/*</url-pattern>      			
     </web-resource-collection>
 <auth-constraint>
	<description>everybody-role</description>
	<role-name>**</role-name>
 </auth-constraint>
</security-constraint>
=======================================
######## LOGIN-CONFIG (optional) ######
> Use to configure how the user is authenticated; 
- the realm name that should be used for this application; and the attributes that are needed by the form login mechanism.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## <auth-method> ##
> It is an optional element
> Specifies the method used to authenticate the user. 

> POSSIBLE VALUES:
1. BASIC - uses browser authentication
2. FORM - uses a user-written HTML form
3. CLIENT-CERT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## <realm-name> ##
> It is an optional element
- name of the realm that is referenced to authenticate the user credentials
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## <form-login-config> ##
> It is an optional element
- Use this element if you configure the <auth-method> to FORM.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
EXAMPLE-
<login-config>
    <auth-method>FORM</auth-method>
    <realm-name>system</realm-name>
    <form-login-config>
        <form-login-page>/loginForm.jsp</form-login-page>
        <form-error-page>/loginForm.jsp?state=error</form-error-page>
    </form-login-config>
</login-config>
=======================================
########### security-role #############




https://docs.oracle.com/cd/E13222_01/wls/docs81b/webapp/web_xml.html