###### Variable Declaration #######
> Kotlin variable is declared using keyword var and val.

var language ="Java"  
val salary = 30000  

>  Variable is of which type, Kotlin complier knows this by initilizer expression. This is called TYPE INFERENCE in programming.

> We can also explicitly specify the type of variable while declaring it as 
var language:String ="Java"  
val salary:Int = 30000  
var age:Int 

## Difference between var and val
var (Mutable variable): 
- We can change the value of variable declared using var keyword later in the program.

val (Immutable variable): 
- We cannot change the value of variable which is declared using val keyword.
- if we do so, then complier error
=======================================
############# DATA TYPE ###############
Kotlin built in data type are categorized as following different categories:

1. Number
  Byte	  8 bit	  -128 to 127
  Short	  16 bit  -32768 to 32767
  Int	  32 bit  -2,147,483,648 to 2,147,483,647
  Long	  64 bit  -9,223,372,036,854,775,808 to +9,223,372,036,854,775,807
  Float	  32 bit  1.40129846432481707e-45 to 3.40282346638528860e+38
  Double  64 bit  4.94065645841246544e-324 to 1.79769313486231570e+308
  
2. Character
  Char	4 bit	-128 to 127

3. Boolean

4. Array
- it is created using library func arrayOf() and Array() constructor. 
- Array has get (), set() func, size property as well as some other useful member functions.

EXAMPLE1:
val id = arrayOf(1,2,3,4,5)  
val firstId = id[0]  
val lasted = id[id.size-1]  

EXAMPLE2:
val asc = Array(5, { i -> i * 2 }) //asc[0,2,4,6,8]  
- here 1st arg is size of array

5. String
 5a. Escaped String - It is declared within double quote (" ") and may contain escape characters like '\n', '\t', '\b' etc. EXAMPLE1- val text2 ="Hello, JavaTpoint\n"
 
 5b. Raw String: It is declared within triple quote (""" """). 
 - It provides facility to declare String in new lines and contain multiple lines. 
 - Row String cannot contain any escape character.
 
=======================================
########## TYPE CONVERSION ############
> In Kotlin, implicit conversion of smaller data type into larger data type is not supported (as it supports in java). For example Int cannot be assigned into Long or Double. 
> in Kotlin, conversion is done by explicit using helper func in which smaller data type is converted into larger data type and vice-versa

toByte()
toShort()
toInt()
toLong()
toFloat()
toDouble()
toChar()
=======================================
########## CONTROL FUNCTION ###########

1. 'if' expression : which returns a value
2. 'when' expression : which returns a value
3. for loop
4. while loop : similar to java 
5. do while loop 
6. return and jump 
 

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
######## WHEN EXPRESSION ########
- It is replacement of switch statement

EXAMPLE1:
var numberProvided = when(number) {  
        1 -> "One"  
        2 -> "Two"  
        3 -> "Three"  
        4 -> "Four"  
        5 -> "Five"  
        else -> "invalid number"  
    } 
	
EXAMPLE2: Using 'when' with range	
fun main(args: Array<String>){  
    var number = 7  
    when(number) {  
        in 1..5 -> {
			println("Working with range")
			println("Input is provided in the range 1 to 5")
		}  
        in 6..10 -> println("Input is provided in the range 6 to 10")  
        else -> println("none of the above")  
    }  
} 	
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
########### for loop ############

EXAMPLE1:
 val marks = arrayOf(80,85,60,90,70)  
 for(item in marks)
     println(item)  

EXAMPLE2: elements of array are iterated on the basis of indices
 val marks = arrayOf(80,85,60,90,70)  
 for(item in marks.indices)  
   println("marks[$item]: "+ marks[item])    
   
EXAMPLE3: Iterate through range   
 for (i in 1..5) print(i)  //12345
 for (i in 5 downTo 2) print(i) //5432
 for (i in 1..5 step 2) print(i) //135
 for (i in 5 downTo 1 step 2) print(i) //531 
 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
######## break EXPRESSION ####### 

> labeled break expression is used to terminate the specific loop. 
- This is done by using break expression with @ sign followed by label name (break@loop).

EXAMPLE1:
loop@ for (i in 1..3) {  
        for (j in 1..3) {  
            println("i = $i and j = $j")  
            if (i == 2)  
                break@loop  
        }  
    } 
=======================================
######## VISIBILITY MODIFIER ##########

> It is categorized into four different types:

1. public - default modifier
2. protected
3. internal
- Declaring anything makes that field marked as internal field. 
- it makes the field visible only inside the module in which it is implemented.

4. private