## What is Apache Kafka?

> It is a software platform based on a distributed streaming process. 
- It is a publish-subscribe messaging system which let exchanging of data between apps, servers, and processors as well.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is a messaging system?

> It is a simple exchange of messages between two or more persons, devices, etc. 
- A publish-subscribe messaging system allows a sender to send/write the message and a receiver to read that message. 
- In Apache Kafka, a sender is known as a producer who publishes messages, and a receiver is known as a consumer who consumes that message by subscribing it.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is Streaming process?

> It is the processing of data in parallelly connected systems. 
- This process allows different apps to limit the parallel execution of the data, where one record executes without waiting for the output of the previous record. 
- Therefore, a distributed streaming platform enables the user to simplify the task of the streaming process and parallel execution.
 Therefore, a streaming platform in Kafka has the following key capabilities:

- As soon as the streams of records occur, it processes it.
- It works similar to an EMS where it publishes and subscribes streams of records.
- It stores the streams of records in a fault-tolerant durable way.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## Can Kafka be utilized without ZooKeeper?

> It is impossible to use Kafka without ZooKeeper 
=====================================
######## COMPONENTS IN KAFKA ########

## What is Topics?

> In Kafka, Topic refers to a category or a common name used to store and publish a particular stream of data. 
- it is similar to tables in the database, but not containing all constraints. 
- we can create n number of topics. 
- It is identified by its name. 

> A producer publishes data to the topics, and 
- a consumer reads that data from the topic by subscribing it.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is Partitions?

A topic is split into several parts which are known as the partitions of the topic. These partitions are separated in an order. The data content gets stored in the partitions within the topic. Therefore, while creating a topic, we need to specify the number of partitions(the number is arbitrary and can be changed later). Each message gets stored into partitions with an incremental id known as its Offset value. The order of the offset value is guaranteed within the partition only and not across the partition. The offsets for a partition are infinite.
=====================================
############ CORE API ###############

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is the core API in Kafka?

> They are four main core API’s:

1. Producer API
2. Consumer API
3. Streams API
4. Connector API

> All the communications between the clients happen over through high-performance language via TCP protocol. 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##
=====================================
#############  ##############
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is the purpose of the retention period in the Kafka cluster?

> Within the Kafka cluster, it retains all the published records. 
- It doesn’t check whether they have been consumed or not. 
- Using a configuration setting for the retention period, the records can be discarded. 
- The main reason to discard the records from the Kafka cluster is that it can free up some space.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## 