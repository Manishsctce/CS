## What is Spring framework and who created it?

> It is an application framework and inversion of control container for Java platform.
- framework's core features can be used by any Java application. 
> It is an open source and has layered architecture. 

> Created by Rod Johnson
> Philosophy: J2EE should be easier to use, “Lightweight Container” concept
- Spring Framework 4.3 has been released on 10 June 2016
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## List the advantages of Spring Framework.
> It has layered architecture, you can use what you need and leave which you don’t.
> JDBC is simplified due to Dependency Injection and Inversion of Control.
> It is open-source and has no vendor lock-in
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What are the benefit/feature of spring? Why we should use Spring framework?

1. Lightweight – basic version is of 2MB
2. It provide loose coupling through DEPENDENCY INJECTION and interface based programming.

3. It is based on ASPECT–ORIENTED(AOP) 
– it helps in cohesive development by separating appl business logic from system services

4. It has CORE CONTAINER 
– It manages the life cycle and configuration of application objects.

5. It has well-designed WEB MVC FRAMEWORK.
- provides a great alternate to web framework such as struts.

6. It provides a consistent TRANSACTION MANAGEMENT INTERFACE

7. It comes with some of existing technologies like ORM framework, logging framework, J2EE and JDK Timers etc, 
- Hence we don’t need to integrate explicitly those technologies.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## How many modules are there in Spring 4? What are they?

> The Spring framework comprises of many modules such as core, beans, context, expression language, AOP, Aspects, Instrumentation, JDBC, ORM, OXM, JMS, Transaction, Web, Servlet, Struts etc. 

- These modules are grouped into 
1. Test, 
2. Core Container, 
3. AOP, 
4. Aspects, 
5. Instrumentation, 
6. Data Access/Integration, 
7. Web(MVC/Remoting)
~~~~~~~~~~~~~~~~~~~~~~~~
1. TEST - This layer provides support to testing with JUnit and TestNG
~~~~~~~~~~~~~~~~~~~~~~~~
2. CORE CONTAINER 
- It consists of the Core, Beans, Context and Expression modules

2ab. CORE & Bean Module:
> it provides the essential functionality of the framework. 
> org.springframework.beans.factory.BeanFactory; is the primary component of this module. 
> Spring framework was built on the top of this module.

2c. SPRING CONTEXT: for dependency injection
> it inherits its features from the Beans module and adds support for internationalization (using, for example, resource bundles), event-propagation, resource-loading, and the transparent creation of contexts, validation, and scheduling functionality.

> ApplicationContext interface is the focal point of the Context module
- it is a configuration file that provides context information to the Spring framework. 

2d. Expression Language :
- provides a powerful expression language for querying and manipulating an object graph at runtime
~~~~~~~~~~~~~~~~~~~~~~~~
3. Spring AOP: for aspect oriented programming.

4. Aspect : This module provides support to integration with AspectJ.

5. Instrumentation : This layer provides support to class instrumentation and classloader implementations
~~~~~~~~~~~~~~~~~~~~~~~~
6. DATA ACCESS/INTEGRATION
- This layer provides support to interact with the database
- This layer consists of the JDBC, ORM, OXM, JMS and Transaction modules

Spring DAO : for database operations using DAO pattern
> It provide interface which will be used in business model so that it should not directly depend on implement part (hibernate,jpa, iBatis).
- Inplementation part can be change any time.

> The Spring JDBC DAO abstraction layer offers a meaningful exception hierarchy for managing the exception handling and error messages thrown by different database vendors. 
- The exception hierarchy simplifies error handling and greatly reduces the amount of exception code you need to write, such as opening and closing connections. 
- Spring DAO's JDBC-oriented exceptions comply to its generic DAO exception hierarchy.

6a. Spring JDBC:
- It provides a JDBC-abstraction layer that removes the need to do tedious JDBC coding and parsing of database-vendor specific error codes.

6b. Spring ORM : for ORM tools support such as Hibernate
> it can plugs into several ORM frameworks to provide its Object Relational tool, including JDO, Hibernate, and iBatis SQL Maps. 
- All of these comply to Spring's generic transaction and DAO exception hierarchies.
~~~~~~~~~~~~~~~~~~~~~~~~
7. Web : – for creating web applications.
- This layer provides support to create web application. It contains the following modules :
Web
Web – MVC
Web – Socket
Web – Portlet

7a. Spring-web 
- it supports integration with Jakarta Struts. 
- it also eases the tasks of handling multi-part requests and binding request parameters to domain objects.

7b. Spring Model-View-Controller (MVC) framework:
- it is a full-featured MVC implementation for creating web appls, web services etc.
- it is highly configurable via strategy interfaces and accommodates numerous view technologies including JSP, Velocity, Tiles, iText, and POI.

=======================================
## What are the various ways of using Spring Framework?

> Spring Framework can be used in various ways. They are listed as follows:

- As a Full-fledged Spring web application.
- As a third-party web framework, using Spring Frameworks middle-tier.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## Name some of the Design Patterns used in the Spring Framework?

1. Singleton Pattern: Singleton-scoped beans.
2. Factory Pattern: Bean Factory classes.
3. Prototype Pattern: Prototype-scoped beans.
4. Adapter Pattern: Spring Web and Spring MVC.
5. Proxy Pattern: Spring Aspect Oriented Programming support.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What does core container do?

> The Core Container consists of the Core, Beans, Context, and Expression Language modules whose detail is as follows:

1. The Core module provides the fundamental parts of the framework, including the IoC and DI features.
2. The Bean module provides BeanFactory which is a sophisticated implementation of the factory pattern.
3. The Context module builds on the solid base provided by the Core and Beans modules and 
- it is a MEDIUM TO ACCESS ANY OBJECTS DEFINED AND CONFIGURED. 
- The ApplicationContext interface is the focal point of the Context module.
4. The Expression Language module provides a powerful expression language for querying and manipulating an object graph at runtime.

=======================================
########### Spring DAO ################

## Spring JDBC – 
> it provides the JdbcTemplate class, that removes plumbing code and helps you concentrate on the SQL query and parameters. 
- Need to configure it with DataSource, and you can then write code like this:

int nbRows = jdbcTemplate.queryForObject("select count(1) from person", Integer.class);

			 
> Spring-JDBC also provides a JdbcDaoSupport, that you can extend to develop your DAO. 
> It basically defines 2 properties: a DataSource and a JdbcTemplate that both can be used to implement the DAO methods. 
> It also provides an exceptions translator from SQL exceptions to spring DataAccessExceptions.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is Spring DAO (Data Access Object)?

> It provide interface which will be used in business model so that it should not directly depend on implement part (hibernate,jpa, iBatis).
- Inplementation part can be change any time.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is difference Spring DAO vs Spring ORM vs Spring JDBC?

suppose you're now using Hibernate, and your service layer catches HibernateException in order to react to it. 
- If you change to JPA, your DAOs interfaces should not change, and the service layer will still compile with blocks that catches HibernateException, but you will never enter these blocks as your DAOs are now throwing JPA PersistenceException. By using @Repository on your DAO, the exceptions linked to the underlying technology are translated to Spring DataAccessException; your service layer catches these exceptions and if you decide to change the persistence technology, the same Spring DataAccessExceptions will still be thrown as spring have translated native exceptions.
=======================================
######## Spring Integration ###########

## What is Spring Integration?
> It is a type Spring framework.
> It deal with message-driven architectures where inversion of control applies to runtime concerns.
=======================================
########### Spring Boot ###############
## What is Spring Boot?

> It is a module that provides a pre-configured set of frameworks to reduce boilerplate configuration so that you can have a Spring application up and running with the smallest amount of code.

> Spring Boot looks at 
a) Frameworks available on the CLASSPATH 
b) Existing configuration for the application. 
- Based on these, Spring Boot provides basic configuration needed to configure the application with these frameworks. This is called Auto Configuration.
=======================================
## What is the difference between Spring AOP and AspectJ AOP?


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## How to call remote method by RMI using Spring
## What scheduling feature Spring framework provides?
7) How do you make a Singleton bean to lazy load in ApplicationContext which loads all Singleton beans eagerly during startup?
8) Does Spring Security part of Spring framework?
9) How to configure Spring using Annotation
10) Which version of Spring have you used recently and what is difference you observed from previous spring version.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
> 

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##can there be two sessionfactory objects and two dialect? How spring integrated with hibernate ? What is versioning in hibernate SQL to get nth highest salary garbage collection procedure finally block can return statmt ? 
Many to one mapping using xml based Spring bean life cycle 
What does Beanfactory do ? 


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is stereotype annotations? What is difference between preauthorize and post authorize? Have you worked on hibernate in spring? How to configure logger in spring? How to encrypt username and password in spring? What is modelmap? How request is passed into modelmap? What is model attribute?

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## How to validate if the bean was initialized using valid values?

> Spring supports JSR-303 annotation-based validations. 
> JSR-303 is a specification of the Java API for bean validation, part of JavaEE and JavaSE, 
> it ensures that properties of a bean meet specific criteria, using annotations such as @NotNull, @Min, and @Max. 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What’s more, Spring provides the Validator interface for creating custom validators. 
http://www.baeldung.com/spring-mvc-custom-validator
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What are the different types of events in spring framework?
## How is event handling done in Spring and what are the different types of events in spring framework?

Spring’s ApplicationContext provides the functionality to support events. We can create beans that listen for events which are published through the ApplicationContext. Event handling in the ApplicationContext is provided through the ApplicationEvent class and ApplicationListener interface. So if a bean implements the ApplicationListener interface, then every time an ApplicationEvent gets published to the ApplicationContext, the bean is notified. Spring provides the following events:

ContextRefreshedEvent : This event is published when the ApplicationContext is either initialized or refreshed. This can also be triggered using the refresh() method on the ConfigurableApplicationContext interface.
ContextStartedEvent : This event is published when the ApplicationContext is started using the start() method on the ConfigurableApplicationContext interface. You can poll your database or you can start/restart any stopped application after receiving this event.
ContextStoppedEvent : This event is published when the ApplicationContext is stopped using the stop() method on the ConfigurableApplicationContext interface. You can do any resource clean-up activity after receiving this event.
ContextClosedEvent : This event is published when the ApplicationContext is closed using the close() method on the ConfigurableApplicationContext interface. A closed context reaches its end of life; it cannot be refreshed or restarted.
RequestHandledEvent : This is a web-specific event telling all beans that an HTTP request has been serviced.
To listen a context event, a bean should implement the ApplicationListener interface which has just one method onApplicationEvent().
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
https://docs.spring.io/spring/docs/2.0.x/reference/beans.html#beans-factory-class