=======================================
######## SPRING - BEAN LIFE CYCLE #####

## What is the Bean life cycle in Spring Bean Factory Container?

1. Spring container INSTANTIATES THE BEAN from the bean’s definition in the XML file.
2. Spring POPULATES ALL PROPERTIES using the dependency injection, as specified in the bean definition.
3. If the bean implements BeanNameAware[i], then factory calls setBeanName() by passing the bean’s ID, .
4. If the bean implements BeanFactoryAware[i], then factory calls setBeanFactory(BeanFactory bf) by passing an instance of BeanFactor
- It is used to modify the bean with some property.

5. @PostConstruct
6. If the bean implements BeanPostProcessor[i] then preProcessBeforeInitialization(Object bean, String beanName) will be called
7. If the bean implements InitializingBean[i] then afterPropertiesSet() will be called.
8. If an "init-method" is specified for the bean, then it will be called.
9. @PreDestroy
10. If the bean implements BeanPostProcessor[i] then postProcessAfterInitialization(Object bean, String beanName) will be called
11. If the bean implements DisposableBean then destroy() will be called.
12. call custom destroy-method

Instatiation -> Populate properties -> BeanNameAware[i].setBeanName() -> BeanFactoryAware[i].setBeanFactoy() -> BeanPostProcessors[i].preProcessBeforeInitialization() -> InitializingBean[i].afterPropertiesSet() -> Call Custom init-method -> BeanPostProcessors.postProcessAfterInitialization()
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## How we can control the lifecycle of Bean?

> 4 WAYS TO CONTROL LIFE CYCLE OF BEAN
1. @PostConstruct and @PreDestroy annotations
2. InitializingBean and DisposableBean callback interfaces

3. custom init() and destroy() in bean configuration file
- we can use the "init-method" attribute to specify the name of the method that has a void no-argument signature.

4. Other Aware interfaces for specific behavior
- Spring offers a range of Aware interfaces that allow beans to indicate to the container that they require a certain infrastructure dependency. 
- Each interface will require you to implement a method to inject the dependency in bean

> If multiple lifecycle mechanisms are configured for a bean, and 
- each mechanism is configured with a different method name, then each configured method is executed
=======================================	
####1. @PostConstruct n @PreDestroy ###

> It is introduce in Spring 2.5 onwards
> These are in javax.annotation package.

1. @PostConstruct annotated method 
> it will be invoked after the bean has been constructed using default constructor and just before it’s instance is returned to requesting object.

2. @PreDestroy annotated method 
> it is called just before the bean is about be destroyed inside bean container.

> By default, Spring will not aware of the @PostConstruct and @PreDestroy annotation. 
- To enable it, you have to either register ‘CommonAnnotationBeanPostProcessor‘ or specify the ‘<context:annotation-config />‘ in bean configuration file,
=======================================
####2. InitializingBean[i] & DisposableBean[i] ####

> It provide callback methods to control the life cycle of bean.

> InitializingBean[i] provide a callback function [void afterPropertiesSet()] which the ApplicationContext will invoke when the bean is constructed.
- It is Post initialization call back methods
- initialization work can be done inside afterPropertiesSet() method

> DisposableBean[i] provide a callback function [void destroy()] which the ApplicationContext will invoke when the bean is to destroy.
- It provide Pre destruction call back methods

> This is NOT A PREFERRABLE WAY TO INITIALIZE AND DESTROYING BEAN because it tightly couple your bean class with spring container. 
- A better approach is to use “init-method” and "destroy-method"

EXAMPLE:-
import org.springframework.beans.factory.DisposableBean;
import org.springframework.beans.factory.InitializingBean;
public class DemoBeanTypeOne implements InitializingBean, DisposableBean{     
    public void afterPropertiesSet() throws Exception{
        //Bean initialization code
    }
     
    public void destroy() throws Exception{
        //Bean destruction code
    }
}
=======================================
#####3. INIT AND DESTROY METHODS ######
> default init and destroy methods in bean configuration file can be defined in two ways:

1. BEAN LOCAL DEFINITION APPLICABLE TO A SINGLE BEAN

<beans>
    <bean id="demoBean" class="com.howtodoinjava.task.DemoBean" init-method="customInit" destroy-method="customDestroy"></bean>
</beans>
------------------------
2. GLOBAL DEFINITION APPLICABLE TO ALL BEANS defined in beans context

- These methods will be invoked for all bean definitions given under <beans> tag. 
- They are useful when you have a pattern of defining common method names such as init() and destroy() for all your beans consistently. 
- This feature helps you in not mentioning the init and destroy method names for all beans independently.

<beans default-init-method="customInit" default-destroy-method="customDestroy">       
        <bean id="demoBean" class="com.howtodoinjava.task.DemoBean"></bean>
</beans>
=======================================
##### BeanFactoryPostProcessor[i] #####

> Spring IoC container allows a BeanFactoryPostProcessor to READ THE CONFIGURATION METADATA AND POTENTIALLY CHANGE IT BEFORE THE CONTAINER INSTANTIATES ANY BEANS other than BeanFactoryPostProcessors
> Its scope is "per-container". 
- Bean definition cannot be post process in another container if multiple container is defined  
> it can be used to modify Spring context’s bean definitions before any beans get created.

### METHOD ###
1. postProcessBeanFactory(ConfigurableListableBeanFactory cbf);
- Here cbf can be used to get bean and instantiate any bean with any value.
~~~~~~~~~~~~~~~~~~~
## 2 IMPLEMENTATION of BeanFactoryPostProcessor that are
1. PropertyOverrideConfigurer[c] and 

2. PropertyPlaceholderConfigurer[c] 
- It is used externalize property values from a bean definition in a separate file using the Java Properties format

Example- 

=======================================
######## BeanPostProcessor[i] #########

> it DEFINES CALLBACK METHODS that we can implement TO PROVIDE OUR OWN INSTANTIATION LOGIC, dependency-resolution logic, etc.
> Spring will pass EACH BEAN INSTANCE to these two methods before and after calling the initialization callback method

### METHOD ###
1. Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException ;
2. Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException ;

> we can configure multiple BeanPostProcessors and also can decide the order in which they will run relative to each other by setting order property but 
- for that BeanPostProcessors  have to implement ordered interface

> It need to configure separately in config file.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## Differences between BeanFactoryPostProcessor and BeanPostProcessor?

> A bean implementing BeanFactoryPostProcessor is called when all bean definitions will have been loaded, but no beans will have been instantiated yet. 
- This allows for overriding or adding properties even to eager-initializing beans. 
- we can access all the beans that are defined in XML or that are annotated (scanned via component-scan).

> A bean implementing BeanPostProcessor operate on bean (or object) instances 
- it means when the Spring IoC container instantiates a bean instance then BeanPostProcessor interfaces do their work.
=======================================
## How to deal with cyclic dependency in spring config xml?
Bean A --->BeanB
BeanB ---> BeanA

> Spring IoC container will detect circular reference at runtime then it throw BeanCurrentlyInCreationException
> One possible solution to this issue is to edit the source code of some of your classes to be configured via setters instead of via constructors. 
- Another solution is not to use constructor injection and stick to setter injection only.
=====================================
############ FACTORY BEAN ###########

> factory bean by implementing org.springframework.beans.factory.FactoryBean[i]
> It is a bean that SERVES AS A FACTORY FOR CREATING OTHER BEANS 
> MOSTLY USED TO IMPLEMENT FRAMEWORK FACILITIES

public interface FactoryBean {
    T getObject() throws Exception;
    Class<?> getObjectType();
    boolean isSingleton();
}
getObject() : returns an object produced by the factory, and this is the object that will be used by Spring container

EXAMPLE:
public class Vehicle{
    private String name, color;
    setter and getter()
}
class Bus extends Vehicle{
	int noOfWheels;
}
class Car extends Vehicle{
    private int enginePower;
}

public class VehicleFactoryBean extends AbstractFactoryBean{
  private Vehicle vehicle;
  SETTER AND GETTER()
  
  protected Object createInstance() throws Exception{
  	return vehicle;
  }
  
  public Class getObjectType(){
  	return Vehicle.class;
  }
}
> Now in appContext.xml, we create instance of Vehicle using VehicleFactoryBean as 
<bean id="bus" class="com.newjava4world.spring.factoryBeanDemo.VehicleFactoryBean">
   <property name="vehicle">
     <bean class="com.newjava4world.spring.factoryBeanDemo.Bus">
       <constructor-arg value="VolvoBus" />
       <constructor-arg value="Red" />
       <property name="noOfWheels" value="6"></property>
     </bean>
   </property>
 </bean>
=======================================
############# METHOD INJECTION ###############

> Spring proposes another way for injection, called method injection. 

EXAMPLE:-

class MobileStore{
  public String buyMobile(){
    return "Brought a mobile phone";
  }
}

class MobileStoreReplacer implements MethodReplacer{
  public Object reimplement(Object obj, Method method, Object[] args){
    return "Brought an iphone";
  }
}

<bean id="mobileStroe" class="MobileStore">
  <replace-method name="buyMobile" replacer="mobileStoreReplacer"/>
</bean>

<bean id="mobileStoreReplacer" class="MobileStoreReplacer" />