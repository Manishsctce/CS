=====================================
############ CONTROLLER #############

## What is role of Controller in Spring MVC framework?

> Controllers are components that are being called by the Dispatcher Servlet for doing any kind of Business Logic

> Controller (‘c’ in mvc ) delivers access to the behavior of application which is usually defined by a service interface and acts as glue between core application and the web. 
- It processes/interprets client data and transforms it to a domain object called model, 
- model is finally represented to the client by the view. 

Spring framework provides wide range of controllers.
- Spring controllers are based on “org.springframework.web.servlet.mvc.Controller” Interface. 
- Controller[i] provides a single method that handles a request and returns a particular ModelAndView as shown below: 

public interface Controller {
  ModelAndView handleRequest
    (HttpServletRequest request,
      HttpServletResponse response
	) throws Exception;
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What are the different built in Controller implementations available in Spring Web MVC?

Following are built in Controller implementations available in Spring Web MVC
- Controller
- AbstractCommandController
- SimpleFormController [deprecated]
- WizardFormController [deprecated]
- MultiActionController[deprecated]

=======================================
### ANNNOTATION USED WITH CONTROLLER ###

- @Controller 
- @RequestMapping
- @PathVariable
- @RequestParam
- @ModelAttribute
- @SessionAttributes

> define in "org.springframework.web.bind.annotation" package.

> @RequestBody and @ResponseBody
> @RequestHeader and @ResponseHeader
- @RequestHeader is used to bind HTTP request header attributes values to controller method parameters.
=======================================
############ @RequestMapping ##########

> It can be applied at both class and method level 
- It is USED TO MAP A URL to either an entire class or a particular handler method.

> @RequestMapping using only HTTP request types

> A method without @RequestMapping won't be mapped, even though enclosing class annotations are valid

#### ARGUMENTS ####
1. –URL[]

> It may contain URI TEMPLATE
- A URL Template is a WAY TO SPECIFY A URL THAT INCLUDES PARAMETERS that must be substituted before the URL is resolved.
- It's a part of URL containing variable names enclosed in braces e.g. www.example.com/user/{id}.
- The URL templates are DEFINED ON THE SERVER SIDE
- URI templates can be captured by handler's method parameter annotated with @PathVariable

> URI Template Patterns may contain regex

EXAMPLE: 
@RequestMapping( value={"/employee-management/employee/{userId}/remove","/employee-management/employee/deleteAcct"},
method = DELETE,
produces = {"application/json","application/xml"}, 
consumes = "text/html"
)
 public String remove( @PathVariable("userId") String userId,
	@Valid @Pattern(regexp = "^[a-zA-Z0-9_%=]{1,100}$") 
    @RequestParam(value = "acctNum", required = true) String acctNum
	){       
	return "employeesList";
}

~~~~~~~~~~~~~~~~~~~~~~~~
## @RequestMapping at class level as well as method levels

@Controller
@RequestMapping("/employee-management/employees/*")
public class EmployeeController
{
    @RequestMapping
    public String getAllEmployees(Model model){
        return "employeesList";
    }
     
    @RequestMapping(value={"/remove","/delete"})
    public String removeEmployee(@RequestParam("id") String employeeId){
        //application code
        return "employeesList";
    }
}
> getAllEmployees() handler method is executed as a catch block if no other matched for any request then this method triggers.
=======================================
########### @ResponseBody #############

> traditional workflow the ModelAndView object is forwarded from the controller to the client
> using the @ResponseBody, Spring lets you RETURN DATA DIRECTLY FROM THE CONTROLLER, without looking for a view
- While using @ResponseBody on a method, Spring converts the return value and writes it to the http response automatically.

> When we use the @ResponseBody on a met
> Behind the scene, Spring has a list of HttpMessageConverters registered in the background. 
- The responsibility of the HTTPMessageConverter is to convert the request body to a specific class and back to the response body again, depending on a predefined mime type.

EXAMPLE:

@Controller
@RequestMapping("employees")
public class EmployeeController {
    Employee employee = new Employee();
    @RequestMapping(value = "/{name}", method = RequestMethod.GET, produces = "application/json")
    public @ResponseBody Employee getEmployeeInJSON(@PathVariable String name) {
       employee.setName(name);
       employee.setEmail("employee1@genuitec.com");
    return employee; 
    }
	
    @RequestMapping(value = "/{name}.xml", method = RequestMethod.GET, produces = "application/xml")
    public @ResponseBody Employee getEmployeeInXML(@PathVariable String name) {
       employee.setName(name);
     employee.setEmail("employee1@genuitec.com");
       return employee; 
    }
}
> @ResponseBody added to each of the @RequestMapping methods in the return value. 
=======================================
######## Return types of Controller ####

## What are some of the valid return types of a controller method?

> There are many return types are available for Handler method which is annotated by @RequestMapping inside controller like :

ModelAndView (Class)
Model (Interface)
Map
String
void
View
HttpEntity<?> or ResponseEntity<?>
HttpHeaders
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What are the differences between Model, ModelMap, and ModelAndView?

##Model: 
- It is an Interface. 
- It defines a holder for model attributes and primarily designed for adding attributes to the model.

EXAMPLE:
@RequestMapping(method = RequestMethod.GET)
public String printHello(Model model) {
  model.addAttribute("message", "Hello World!!");
  return "hello";
}
~~~~~~~~~~~~~~~~~~~~~~~~
## ModelMap: 
- Implementation of Map for use when building model data for use with UI tools.
- Supports chained calls and generation of model attribute names.

EXAMPLE:
@RequestMapping("/helloworld")
public String hello(ModelMap map) {
    String helloWorldMessage = "Hello world!";
    String welcomeMessage = "Welcome!";
    map.addAttribute("helloMessage", helloWorldMessage);
    map.addAttribute("welcomeMessage", welcomeMessage);
    return "hello";
}
~~~~~~~~~~~~~~~~~~~~~~~~
##ModelAndView: 
> ModelAndView is just a container for both a ModelMap and a view object. 
- This class merely holds both to make it possible for a controller to return both model and view in a single return value.

EXAMPLE:
@RequestMapping("/welcome")
public ModelAndView helloWorld() {
  String message = "Hello World!";
  return new ModelAndView("welcome", "message", message);
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
=======================================
########## @RestController ############

> Spring 4.0 introduced @RestController, a specialized version of the controller
> @RestController = @Controller + @ResponseBody

> it add the @Controller and @ResponseBody annotations. 
> By annotating the controller class with @RestController annotation, you no longer need to add @ResponseBody to all the request mapping methods. 
- The @ResponseBody annotation is active by default.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## Difference between RestController and Controller?

> traditional MVC controller relies on the View technology, 
- the RESTful web service controller simply returns the object and the object data is written directly to the HTTP response as JSON/XML.


EXAMPLE:
@RestController
@RequestMapping("employees")
public class EmployeeController {
    Employee employee = new Employee();
    @RequestMapping(value = "/{name}", method = RequestMethod.GET, produces = "application/json")
    public Employee getEmployeeInJSON(@PathVariable String name) {
       employee.setName(name);
       employee.setEmail("employee1@genuitec.com");
       return employee;
    }
    @RequestMapping(value = "/{name}.xml", method = RequestMethod.GET, produces = "application/xml")
    public Employee getEmployeeInXML(@PathVariable String name) {
       employee.setName(name);
       employee.setEmail("employee1@genuitec.com");
    return employee; 
    } 
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## How can we use Spring to create Restful Web Service RETURNING JSON RESPONSE?

> we need to add Jackson dependency in spring application either in pom.xml or MANIFEST.MF 
> Now return JSON response from your MVC controller.
- return JAXB annotated object from method and use @ResponseBody annotation on this return type

@Controller
public class EmployeeRESTController
{
  @RequestMapping(value = "/employees")
  public @ResponseBody EmployeeListVO getAllEmployees(){
      EmployeeListVO employees = new EmployeeListVO();
      //Add employees
      return employees;
  }
}

> Alternatively, we can use @RestController annotation in place of @Controller annotation. 
- This will remove the need to using @ResponseBody.
@RestController = @Controller + @ResponseBody

EXAMPLE: 
@RestController
public class EmployeeRESTController
{
    @RequestMapping(value = "/employees")
    public EmployeeListVO getAllEmployees()
    {
        EmployeeListVO employees = new EmployeeListVO();
        //Add employees
        return employees;
    }
}	
=======================================
## What is the @RequestParam used for?

> It is used to bind request parameter values to the handler method arguments in controller.

@Target(value=PARAMETER)
@Retention(value=RUNTIME)
@Documented
public @interface RequestParam

defaultValue - It is String type attribute and the default value to use as a fallback when the request parameter is not provided or has an empty value.
name - It is String type attribute and name of the request parameter to bind to.
required - It is boolean type attribute whether the parameter is required.
value – It is String type attribute and it is alias for name attribute.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What are the differences between @RequestParam and @PathVariable?

@PathVariable: 
- Is is used to pass parameter along with the url, sometimes we need to pass parameters along with the url to get the data. Spring MVC provides support for customizing the URL in order to get data. To achieving this purpose @PathVariable annotation is used in Spring mvc framework.

@RequestParam: It is used to get the request parameters. @RequestParam automatically binds the request parameters to the arguments of your handler method. It also provides auto type conversion for some standard type like int, long, float, string, date 
=====================================
######### @SessionAttributes ########

> it indicates the session attributes
> it has list of names of model attributes which are stored in the session

> it is used on class level. Typically it's used on the @Controller class. 
- It has 'value' element is of type String[] whose values are the matching names used in @ModelAttribute either on method level or on handler's method parameter level.


http://www.studytrails.com/frameworks/spring/spring-mvc-handler-adapter/

=======================================
##### Spring MVC and JSP/Servlet ######
 
## How to Get ServletContext and ServletConfig Objects in a Spring Bean?

> You can do either by:
1. Implementing Spring-aware interfaces. 
2. Using @Autowired annotation on those beans:
	@Autowired ServletContext servletContext;
	@Autowired ServletConfig servletConfig;
-------------------------------------
> you can have a web application without potentially any web.xml file
> Servlet 3.0 API brought annotations to the Java Web app world allowing the registration of servlets to be accomplished by annotation.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## How to pass object from Spring to JSP? How to iterate objects in JSP?

https://blog.trifork.com/2009/05/14/simple-forms-with-spring-mvc-2-5/
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## How to access Spring Bean in a Servlet?

> we can use ServletContextAttributeExporter 
- it is used to export any property to servlet from runtime.

in applicationContext.xml
<bean class="org.springframework.web.context.support.ServletContextAttributeExporter">
  <property name="attributes">
    <map>
      <entry key="restBindingService" value-ref="restBindingService"/>
    </map>
  </property>
</bean>

in servlet
(RestBindingService) context.getAttribute("restBindingService");
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##  How to pass object from JSP to spring?

in jsp
1. session.setAttribute("obj", obj);

in controller, process action method:
1 HttpServletRequest request1 = PortalUtil.getHttpServletRequest(request);
2 Obj obj = (Obj)request1.getSession().getAttribute("obj");
=======================================
@org.springframework.data.annotation.Transient
- Object Mapper you are using will not include value, when converting from Java Object to JSON.
- it applys to Object mapping frameworks only not to JPA, that's why it will save in database

@javax.persistence.Transient is specifically for JPA DB serialization
- so it will not save in database

~~~~~~~~~~~~~~~~~~~~~

The @DependsOn annotation can force Spring IoC container to initialize one or more beans before the bean which is annotated by @DependsOn annotation.

The @DependsOn annotation may be used on any class directly or indirectly annotated with @Component or on methods annotated with @Bean.
In Spring framework, the @Primary annotation is used to give higher preference to a bean, when there are multiple beans of same type.



import org.springframework.beans.factory.annotation.Autowired;

public class BeanOne {
   @Autowired
   private BeanTwo beanTwo;

   @Autowired
   private BeanThree beanThree;

   public BeanOne() {
      System.out.println("BeanOne Initialized");
   }

   public void doSomthing() {
      System.out.println("Inside doSomthing() method of BeanOne");
      beanTwo.doSomthing();
      beanThree.doSomthing();
   }
}

@Configuration
public class AppConfig {

   @Bean("beanOne")
   @DependsOn(value = { "beanTwo", "beanThree" })
   public BeanOne getBeanOne() {
      return new BeanOne();
   }

   @Bean("beanTwo")
   public BeanTwo getBeanTwo() {
      return new BeanTwo();
   }

   @Bean("beanThree")
   public BeanThree getBeanThree() {
      return new BeanThree();
   }
}
~~~~~~~~~~~~~~~~~~~~~~~~~
## 
HttpMessageConverter is a strategy interface that specifies a converter that can convert from and to HTTP requests and responses in Spring REST Restful web services. Internally Spring MVC uses it to convert the Http request to an object representation and back