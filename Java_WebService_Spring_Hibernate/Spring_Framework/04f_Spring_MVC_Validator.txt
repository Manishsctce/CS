=====================================
############## Validator ############

##How to validate form data in Spring Web MVC Framework?

> Spring MVC supports validation by means of a validator object that implements the Validator interface. 
> You need to create a class and implement Validator interface. 
> In this custom validator class, we can use utility methods such as rejectIfEmptyOrWhitespace() and rejectIfEmpty() in the ValidationUtils class to validate the required form fields.

EXAMPLE: 
@Component
public class EmployeeValidator implements Validator
{
    public boolean supports(Class clazz) {
        return EmployeeVO.class.isAssignableFrom(clazz);
    }
  
    public void validate(Object target, Errors errors)
    {
        ValidationUtils.rejectIfEmptyOrWhitespace(errors, "firstName", "error.firstName", "First name is required.");
        ValidationUtils.rejectIfEmptyOrWhitespace(errors, "lastName", "error.lastName", "Last name is required.");
        ValidationUtils.rejectIfEmptyOrWhitespace(errors, "email", "error.email", "Email is required.");
    }
}
> If any of form fields is empty, these methods will create a field error and bind it to the field. 
- The 2nd arg of ValidationUtils methods is the property name, while 3rd and 4th are the error code and default error message.

> To activate this custom validator as a spring managed bean, you need to do one of following things:

1) Add @Component annotation to EmployeeValidator class and activate annotation scanning on the package containing such declarations.
<context:component-scan base-package="com.howtodoinjava.demo" />

2) Alternatively, you can register the validator class bean directly in context file.
<bean id="employeeValidator" class="com.howtodoinjava.demo.validator.EmployeeValidator" />
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## How to do Bean Validation in Spring 5?

> Bean Validation works by defining constraints to the fields of a class by annotating them with certain annotations.
- pass an object of that class into a Validator which checks if the constraints are satisfied.
 
EXAMPLE:

class Input {

  @Min(1)
  @Max(10)
  private int numberBetweenOneAndTen;

  @Pattern(regexp = "^[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}$")
  private String ipAddress;
  
  // ...
} 

import javax.validation.Valid
@RestController
class ValidateRequestBodyController {

  @PostMapping("/validateBody")
  ResponseEntity<String> validateBody(@Valid @RequestBody Input input) {
    return ResponseEntity.ok("valid");
  }
}

> By using @Valid, weâ€™re telling Spring to pass the object to a Validator before doing anything else.
- @RequestBody to mark that it should be read from the request body 
- If the validation fails, it will trigger a MethodArgumentNotValidException. By default, Spring will translate this exception to a HTTP status 400 (Bad Request).
- By default, Spring Data uses Hibernate Validator underneath, which supports Bean Validation out of the box.

> @Validated at the class level controller, use to tell spring to evaluate the constraint annotations on method parameters
- only @valid at parameter level will not work. 

> to disable Bean Validation, use this property:-
spring.jpa.properties.javax.persistence.validation.mode = none

