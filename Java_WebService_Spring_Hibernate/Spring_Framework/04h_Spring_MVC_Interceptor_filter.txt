=======================================
######### SPRING MVC INTERCEPTOR ######

> Interceptor is used to intercepts requests
- just before the controller or
- just after the controller or
- just before the response sent to view

> It can be used for authentication.
> It can be USED FOR CROSS-CUTTING CONCERNS and to avoid repetitive handler code like logging, to add a common message to all response
> A handler interceptor can be registered for particular URL mappings, so it only intercepts requests mapped to certain URLs.

######## HandlerInterceptor[i] ########
> it is an interface, which must be implemented by the Spring interceptor classes

#### 3 CALLBACK METHODS ####

1. public boolean preHandle(HttpServletRequest req,HttpServletResponse resp, Object handler) throws Exception;
– called just before the controller
- It return boolean value which tells Spring if the request should be further processed by a handler (true) or not (false)

 This method is used to intercept the request before it’s handed over to the handler method. This method should return ‘true’ to let Spring know to process the request through another spring interceptor or to send it to handler method if there are no further spring interceptors.
If this method returns ‘false’ Spring framework assumes that request has been handled by the spring interceptor itself and no further processing is needed. We should use response object to send response to the client request in this case.

2. public void postHandle(HttpServletRequest req, HttpServletResponse resp, Object handler, ModelAndView mv) throws Exception;
– called immediately after the request is processed by HandlerAdapter, but before generating a view.
- can be used TO DETERMINE THE TIME TAKEN BY HANDLER METHOD to process a client’s request.

This HandlerInterceptor interceptor method is called when HandlerAdapter has invoked the handler but DispatcherServlet is yet to render the view. This method can be used to add additional attribute to the ModelAndView object to be used in the view pages. We can use this spring interceptor method to determine the time taken by handler method to process the client request

3. void afterCompletion(HttpServletRequest req, HttpServletResponse resp, Object handler, Exception ex) throws Exception;
– called just before sending response to view

 This is a HandlerInterceptor callback method that is called once the handler is executed and view is rendered.
 
> If there are multiple spring interceptors configured, preHandle() method is executed in the order of configuration whereas postHandle() and afterCompletion() methods are invoked in the reverse order.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#### HandlerInterceptorAdaptor[c] ###

> it is an implementation class of HandlerInterceptor[i] provided by Spring as a convenient class. 
> By extending this we can override only the necessary methods out of the three.

> Interceptor classes must be declared in spring context xml configuration file within the tag <mvc:interceptors>

> Interceptor can be configured to execute in two ways, execute for all requests and map to specific url requests.

> ORDER: All global interceptors gets executed first and then the mapped interceptor. 

> if multiple Spring interceptors are configured, the preHandle() method is executed in the order of configuration, 
- postHandle() and afterCompletion() methods are invoked in the reverse order

EXAMPLE:-
> To add our interceptors into Spring configuration, 
- Need to override addInterceptors() method inside WebConfig class that extends WebMvcConfigurerAdapter:
  
  public void addInterceptors(InterceptorRegistry registry) {
      registry.addInterceptor(new LoggerInterceptor());
  }

- we can achieve the same configuration by editing our XML Spring configuration file:  
  <mvc:interceptors>
      <bean id="loggerInterceptor" class="org.baeldung.web.interceptor.LoggerInterceptor"/>
  </mvc:interceptors>
  
  


http://www.studytrails.com/frameworks/spring/spring-mvc-handler-adapter/

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is difference bet Filter and Interceptor?

> Interceptor are used to manipulate entities (input and output stream)
- Filters are used to manipulate request and response params(headers, URIs etc)

> Two kinds of interceptor : ReaderInterceptor , WriterInterceptor
- 2 kinds of filter  - ContainerRequestFilter , ContainerResponseFilter

> Example of Interceptor : encoding an entity response
- Example of filter : logging, security

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
### ORDER OF FILTER AND INTERCEPTOR

JAX-RS CLIENT -> ClientRequestFilter -> WriterInterceptor -> MessageBodyWriter 

ContainerRequestFilter -> ReaderInterceptor -> MessageBodyReader -> SERVER
---------------------
JAX-RS SERVER -> ContainerResponseFilter -> WriterInterceptor -> MessageBodyWriter

ClientResponseFilter -> ReaderInterceptor -> MessageBodyReader --> CLIENT

https://www.youtube.com/watch?v=WjzMZoBEvRY

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~