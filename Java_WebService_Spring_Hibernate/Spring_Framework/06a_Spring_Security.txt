######### SPRING SECURITY ###########
> It provides lots of Out of Box functionality to secure enterprise or web application like authentication, authorization, session management, password encoding, secure access, session timeout etc

## Authentication 
> it is the process of knowing and identifying the user that wants to access.

## Authorization 
> it is the process to allow authority to perform actions in the application.
- We can apply authorization to authorize web request, methods and access to individual domain.

=====================================
###### TECHNOLOGIES IN SUPPORT ######

> Spring Security framework supports wide range of authentication models. 
- These models either provided by third parties or framework itself. 
- Spring Security supports integration with all of these technologies.

01. HTTP BASIC authentication headers
- it is used to provide user name and password while making request over the network.

02. HTTP Digest authentication headers
- It is more secure than Basic Auth. 
- It asks to the browser to confirm the identity of the user before sending sensitive data over the network.

03. HTTP X.509 client certificate exchange
04. LDAP (Lighweight Directory Access Protocol)
05. Form-based authentication
06. OpenID authentication

07. Automatic remember-me authentication
- it supported with help of HTTP Cookies. 
- It remember to the user and avoid login again from the same machine until the user logout.

08. Kerberos
09. JOSSO (Java Open Source Single Sign-On)
10. AppFuse
11. AndroMDA
12. Mule ESB
13. DWR(Direct Web Request)

14. OAuth 2.0
- It provides the facility to the user to login into the application by using their existing account at GitHub or Google or any other register server. 
- This feature is implemented by using the Authorization Code Grant that is specified in the OAuth 2.0 Authorization Framework.

=====================================
## What is the use of @EnableWebSecurity in spring? 
> Add this annotation to an @Configuration class to have the Spring Security configuration defined in any WebSecurityConfigurer or 
- more likely by extending the WebSecurityConfigurerAdapter base class and overriding individual methods

WebSecurityConfigurerAdapter
The @EnableWebSecurity annotation and WebSecurityConfigurerAdapter work together to provide web based security. By extending WebSecurityConfigurerAdapter and only a few lines of code we are able to do the following:

Require the user to be authenticated prior to accessing any URL within our application
Create a user with the username “user”, password “password”, and role of “ROLE_USER”
Enables HTTP Basic and Form based authentication
Spring Security will automatically render a login page and logout success page for you
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is the difference between @EnableWebSecurity and @EnableWebMvcSecurity?
> @EnableWebMvcSecurity actually adds the @EnableWebSecurity annotation in WebMvcSecurityConfiguration. 
- Therefore, @EnableWebMvcSecurity does everything that @EnableWebSecurity does, and a bit more.

> As of Spring Security 4.0, @EnableWebMvcSecurity is deprecated. The replacement is @EnableWebSecurity 
=====================================
######## SPRING SECURITY 3.0 ########

------------------------------------
## How do you control concurrent Session on Java web application using Spring Security?
> we can use Spring Security to control a number of active session in Java web application.
> need to include following xml snippet in Spring Security Configuration file mostly named as applicaContext-security.xml. 

<session-management invalid-session-url="/logout.html">
    <concurrency-control max-sessions="1" error-if-maximum-exceeded="true" />
</session-management>

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~








=====================================
###### SPRING SECURITY HISTORY ######
> In late 2003, a project Acegi Security System for Spring started with the intention to develop a Spring-based security system. 

##Drawbacks of Spring Acegi Security

> Lot of XML Configuration
> Too much learning curve
> Does not support Annotations

> Spring Team (Pivotal Team) has integrated “Acegi Security” framework into Spring Framework as “Spring Security” module.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
=====================================
######## SPRING SECURITY 3.0 ########
Spring 3.x Security Framework provides the following Features:

Authentication and Authorization.
Supports BASIC,Digest and Form-Based Authentication.
Supports LDAP Authentication.
Supports OpenID Authentication.
Supports SSO (Single Sign-On) Implementation.
Suuports Cross-Site Request Forgery (CSRF) Implementation.
Suuports “Remember-Me” Feature through HTTP Cookies.
Supports Implementation of ACLs
Supports “Channel Secruity” that means automatically switching between HTTP and HTTPS.
Supports I18N (Internationalization).
Supports JAAS (Java Authentication and Authorization Service).
Supports Flow Authorization using Spring WebFlow Framework.
Supports WS-Security using Spring Web Services.
Supports Both XML Configuration and Annotations. Very Less or minimal XML Configuration.
=====================================
######## SPRING SECURITY 4.0 ########

Spring 4.x Security Framework supports the following New Features:
> Supports WebSocket Security.
> Supports Spring Data Integration.
> CSRF Token Argument Resolver.


Spring 4 Security Levels:
> Spring Security supports the following two Levels of Authorization
1. Method Level Authorization
- using AOP (Aspect-Oriented Programming) that means through Aspects

2. URL Level Authorization
- “URL Level Security” by using Servlet filters.

## Spring 4 Security Framework provides the following Advantages:
> Open Source Security Framework
> Flexible, Easy to Develop and Unit Test the applications
> Declarative Security Programming
> Easy of Extendability
> Easy of Maintenance
> Takes full advantage of Spring DI(Dependency Injection) and AOP.
> We can develop Loosely-Coupled Applications.

> Spring 4 Security Module is again divided into 11 sub-modules. It has the following sub-modules:

01. Spring Security Core Module
02. Spring Security Configuration Module
03. Spring Security Web Module
04. Spring Security Tag Library Module
05. Spring Security AspectJ Module
06. Spring Security ACL Module
07. Spring Security LDAP Module
08. Spring Security OpenID Module
09. Spring Security CAS Module
10. Spring Security Cryptography Module
11. Spring Security Remoting Module



http://javarevisited.blogspot.in/2011/11/ldap-authentication-active-directory.html
http://javabeginnerstutorial.com/spring-security-tutorial/spring-security-ldap-authentication-tutorial/
http://www.journaldev.com/8748/spring-security-role-based-access-authorization-example
http://www.journaldev.com/8718/spring-4-security-mvc-login-logout-example
http://www.journaldev.com/2736/spring-security-example-userdetailsservice
http://krams915.blogspot.in/2011/01/spring-security-mvc-using-ldap.html

https://spring.io/guides/gs/authenticating-ldap/