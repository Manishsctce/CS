TDD - Test Driven Development
BDD - Behavior Driven Development

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is Smoke Testing?

> It is a testing technique that is inspired from hardware testing. 
- It checks for the smoke from the hardware components once the hardware's power is switched on. 
- Similarly in Software testing context, smoke testing refers to TESTING THE BASIC FUNCTIONALITY OF THE BUILD.

- If the Test fails, build is declared as unstable and it is NOT tested anymore until the smoke test of the build passes.

#Smoke Testing - Features:
- Identifying the business critical functionalities that a product must satisfy.
- Designing and executing the basic functionalities of the application.
- Ensuring that the smoke test passes each and every build in order to proceed with the testing.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is Regression Testing?

> It is a black box testing technique that consists of RE-EXECUTING THOSE TESTS THAT ARE IMPACTED BY THE CODE CHANGES. 
- These tests should be executed as often as possible throughout the software development life cycle.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What are the Types of Regression Tests?
 
Final Regression Tests: 
- A "final regression testing" is performed to validate the build that hasn't changed for a period of time. 
- This build is deployed or shipped to customers.

Regression Tests: 
- A normal regression testing is performed to verify if the build has NOT broken any other parts of the application by the recent code changes for defect fixing or for enhancement.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is Sanity Testing?

> It helps to identify the dependent missing functionalities. 
- It is used to determine if the section of the application is still working after a minor change.
- Sanity testing can be narrow and deep. 
- SANITY TEST IS A NARROW REGRESSION TEST that focuses on one or a few areas of functionality.
- It is USUALLY UNSCRIPTED

- The terminologies such as Smoke Test or Build Verification Test or Basic Acceptance Test or Sanity Test are interchangeably used, 
- however, each one of them is used under a slightly different scenario.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is Acceptance Testing?

> It is a testing technique performed to determine whether or not the software system has met the requirement specifications. 
- The main purpose of this test is to evaluate the system's compliance with the business requirements and verify if it is has met the required criteria for delivery to end users.

> There are various forms of acceptance testing:

1. User acceptance Testing
2. Business acceptance Testing
3. Alpha Testing
4. Beta Testing 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is Alpha Testing?

> Alpha testing takes place at the developer's site BY THE INTERNAL TEAMS, before release to external customers.
-  This testing is performed without the involvement of the development teams.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is Beta Testing?

> It is also known as USER TESTING takes place at the end users site by the end users 
- to validate the usability, functionality, compatibility, and reliability testing.

- it adds value to SDLC as it allows the "real" customer an opportunity to provide inputs into the design, functionality, and usability of a product. 
- These inputs are not only critical to the success of the product but also an investment into future products 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is Soak Testing?

> It also known as Endurance Testing is performed to determine if the application under test can sustain the continuous loads.

> It is NON-FUNCTIONAL TESTING INVOLVES EXAMINING THE SYSTEM IF IT CAN WITHSTAND A HUGE LOAD FOR A LONGER PERIOD OF TIME and there by measuring the system's reaction parameters.

# Soak Testing help to identify below issues:-
1. Serious memory leaks that would eventually result in app or OS crash
2. Failure to close connections between the layers of the system could stall some or all modules of the system.
3. Failure to close database connections under some conditions might result in the complete system crash.
4. Gradual degradation of response time of the system as the application becomes less efficient as a result of prolonged test.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## 

=======================================
####### TEST DRIVEN DEVELOPMENT #######

## What is Test Driven Development?

> test cases are created before code is written. 
- TDD instructs developers to write new code only if an automated test has failed.

> The purpose of TDD is to make the code clearer, simple and bug-free.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## How to perform TDD Test? What is TDD Lifecycle?

> Below is the TDD lifecycle
1. Add a test.
2. Run all tests and see if any new test fails.
3. Write some code.
4. Run tests and Refactor code.
5. Repeat.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What is acceptance TDD and Developer TDD

> There are two levels of TDD

1. Acceptance TDD (ATDD): 
- With ATDD you write a single acceptance test. 
- This test fulfills the requirement of the specification or satisfies the behavior of the system. 
- After that write just enough production/functionality code to fulfill that acceptance test. 
- Acceptance test focuses on the overall behavior of the system. 
- ATDD also was known as Behavioral Driven Development (BDD).

2. Developer TDD: 
- With Developer TDD you write single developer test i.e. unit test and then just enough production code to fulfill that test.
-  The unit test focuses on every small functionality of the system. 
- Developer TDD is simply called as TDD.

> The main goal of ATDD and TDD is to specify detailed, executable requirements for your solution on a just in time (JIT) basis. 
- JIT means taking only those requirements in consideration that are needed in the system. So increase efficiency.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## 