## What is EJB (Enterprise Java Bean)?
- It is require to develop secured, robust and scalable distributed applications.
- EJB application is deployed on the server, so it is called server side component also.
- it is different from Java Bean, RMI and Web Services
---------------------------------
## When use Enterprise Java Bean?

> Application needs Remote Access. In other words, it is distributed.
> Application needs to be scalable. 
- EJB applications supports load balancing, clustering and fail-over.

> Application needs encapsulated business logic. 
- EJB application is separated from presentation and persistent layer.
---------------------------------
## How many types of Enterprise Java Bean?

There are 3 types of enterprise bean in java.

1. Session Bean
- it contains business logic that can be invoked by local, remote or webservice client.

2. Message Driven Bean
- Like Session Bean, it contains the business logic but it is invoked by passing message.

3. Entity Bean
- It encapsulates the state that can be persisted in the database. It is deprecated. Now, it is replaced with JPA (Java Persistent API).
---------------------------------
## What is difference between RMI and EJB ?
SIMILARITY
> Both RMI and EJB, provides services to access an object running in another JVM (known as remote object)

DIFFERENCE
- In RMI, middleware services such as security, transaction management, object pooling etc. need to be done by the java programmer.
- In EJB, middleware services are provided by EJB Container automatically.
---------------------------------
Session Bean
- It encapsulates business logic only
- he life cycle of session bean is maintained by the application server (EJB Container).

## Types of Session Bean

There are 3 types of session bean.

1. Stateless Session Bean: It doesn't maintain state of a client between multiple method calls.

2. Stateful Session Bean: It maintains state of a client across multiple requests.

3. Singleton Session Bean: One instance per application, it is shared between clients and supports concurrent access.


