=====================================
############ OAuth 2.0 ##############
## What is OAuth 2.0?

> It is an open authorization protocol, 
- it allows accessing the resources of the resource owner by enabling the client app on HTTP services such as Facebook, GitHub, etc. 
- It allows sharing of resources stored on one site to another site without using their credentials. 
- It uses username and password tokens instead.

> It is a framework to delegate Authorization
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## Why Use OAuth 2.0?
> You can use OAuth 2.0 to read data of a user from another application.

> It supplies the authorization workflow for web, desktop app, and mobile devices.

> It is a server side web app that uses authorization code and does not interact with user credentials.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What are the features of OAuth 2.0?

OAuth 2.0 is a simple protocol that allows to access resources of the user without sharing passwords.

It provides user agent flows for running clients application using a scripting language, such as JavaScript. Typically, a browser is a user agent.

It accesses the data using tokens instead of using their credentials and stores data in online file system of the user such as Google Docs or Dropbox account.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What are the Advantages of OAuth 2.0?

> OAuth 2.0 is a very flexible protocol that relies on SSL (Secure Sockets Layer that ensures data between the web server and browsers remain private) to save user access token.

> OAuth 2.0 relies on SSL which is used to ensure cryptography industry protocols and are being used to keep the data safe.

> It allows limited access to the user's data and allows accessing when authorization tokens expire.

> It has ability to share data for users without having to release personal information.

> It is easier to implement and provides stronger authentication.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## What are the Disadvantages of OAuth 2.0?

> If you are adding more extension at the ends in the specification, 
- it will produce a wide range of non-interoperable implementations, 
- which means you have to write separate pieces of code for Facebook, Google, etc.

> If your favorite sites are connected to the central hub and the central account is hacked, then it will lead to serious effects across several sites instead of just one.
=======================================
########### OAuth 2.0 terms ###########

### Authentication
> It is a process of identifying an individual, usually based on a username and password. 
- It is about knowing that the user is the owner of the account on the web and desktop computers.

### Federated Authentication
> Many applications have their own username and passwords. 
- Some applications depend on other services for verification of the user's identity. 

> A federated identity management system provides a single access to multiple systems. This is known as federated authentication.

### Authorization
> Authorization is the process of giving someone the permission to do something. 
- It needs the valid user's identification to check whether that user is authorized or not.

### Delegated Authorization
> It is the process of giving one’s credentials to other user to perform some actions on behalf of that user. 
=====================================
############## ROLES ################
> OAuth defines the following roles −

1. Resource Owner
> The resource owner is the person who is giving access to some portion of their account.
> An entity capable of granting access to their own data hosted on the resource server. 
- When the resource owner is a person, it is referred to as an end-user.
- It could be an app.

2. Client Application
> An app making protected resource requests on behalf of the resource owner and with its authorization.  
- It could be Mobile App, Desktop app or 

3. RESOURCE SERVER
> The server hosting the protected resources, capable of accepting and responding to protected resource requests using access tokens.

4. AUTHENTICATION SERVER
> The server issuing access tokens to the client after successfully authenticating the resource owner and obtaining authorization.

> authorization server may be the same server as the resource server or a separate entity.
- A single authorization server may issue access tokens accepted by multiple resource servers.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
######## PROTOCOL FLOW ########

 +--------+                               +---------------+
 |        |--(A)- Authorization Request ->|   Resource    |
 |        |                               |     Owner     |
 |        |<-(B)-- Authorization Grant ---|               |
 |        |                               +---------------+
 |        |
 |        |                               +---------------+
 |        |--(C)-- Authorization Grant -->| Authorization |
 | Client |                               |     Server    |
 |        |<-(D)----- Access Token -------|               |
 |        |                               +---------------+
 |        |
 |        |                               +---------------+
 |        |--(E)----- Access Token ------>|    Resource   |
 |        |                               |     Server    |
 |        |<-(F)--- Protected Resource ---|               |
 +--------+                               +---------------+
=====================================

> When registering a new client app, it register basic information such as app name, website, logo, etc. In addition, it must register a redirect URI to be used for redirecting users to for web server, browser-based, or mobile apps.


=====================================
######## Client Registration ########
> When registering a client, the client developer SHALL:

1. specify the client type 
2. provide its client redirection URIs
3. include any other information required by the authorization server (e.g., application name, website, description, logo image, the acceptance of legal terms).

#### CLIENT IDENTIFIER (clientId)
> The authorization server issues the registered client a client identifier -- a unique string representing the registration information provided by the client.  
- The client identifier is not a secret; 
- it is exposed to the resource owner and MUST NOT be used alone for client authentication.  
- The client identifier is unique to the authorization server.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

## Authorization Endpoints 
> It is the URL's which makes an authentication request on the authorization server, in which the resource owner logs in and permits to access the data to the client application. For instance, address of JSP page, PHP page, etc.

Authorization endpoint can be defined in three ways −

- Authorization Endpoint
- Redirection Endpoint
- Token Endpoint
=====================================
########  ########

### AUTHORIZATION CODE GRANT
> Authorization code grant type is used to obtain both access tokens and refresh tokens and is optimized for confidential clients.
- Since this is a redirection-based flow, the client must be capable of interacting with the resource owner's user-agent (typically a web browser) and 
- capable of receiving incoming requests (via redirection) from the authorization server.

=====================================

## 1A. AUTHORIZATION

> When web apps is able to use its client secret when communicating with the authorization server as it is not publicly expose. 

https://authorization-server.com/auth?response_type=code&client_id=CLIENT_ID&redirect_uri=REDIRECT_URI&scope=photos&state=1234zyx

1. response_type=code : Indicates that your server expects to receive an authorization code
2. client_id - The client ID you received when you first created the application
3. redirect_uri - Indicates the URI to return the user to after authorization is complete
4. scope - One or more scope values indicating which parts of the user's account you wish to access
5. state - A random string generated by your application, which you'll verify later
-----------------------------
## 1B. In case of Single-Page Apps, where its not safe to use client secret then
> an addition dynamically generated secret used on each request. This is known as the PKCE extension

https://authorization-server.com/auth?response_type=code&client_id=CLIENT_ID&redirect_uri=REDIRECT_URI&scope=photos&state=1234zyx&code_challenge=CODE_CHALLENGE&code_challenge_method=S256

code_challenge : The URL-safe base64-encoded SHA256 hash of the secret
code_challenge_method=S256 : Indicate which hashing method you used (S256)
-----------------------------

> If the user clicks "Allow," the service redirects the user back to your site with an authorization code

https://example-app.com/cb?code=AUTH_CODE_HERE&state=1234zyx
1. code - The server returns the authorization code in the query string
2. state - The server returns the same state value that you passed

> You should first compare this state value to ensure it matches the one you started with. 
- You can typically store the state value in a cookie or session, and compare it when the user comes back. 
- This helps ensure your redirection endpoint isn't able to be tricked into attempting to exchange arbitrary authorization codes.
-----------------------------
## 2A. Getting an Access Token
> Your server exchanges the authorization code for an access token by making a POST request to the authorization server's token endpoint:

POST https://api.authorization-server.com/token?grant_type=authorization_code&code=AUTH_CODE_HERE&redirect_uri=REDIRECT_URI&client_id=CLIENT_ID&client_secret=CLIENT_SECRET

grant_type		: The grant type for this flow is authorization_code
code 			: AUTH_CODE_HERE This is the code you received in the query string
redirect_uri	: Must be identical to the redirect URI provided in the original link
client_id		: The client ID you received when you first created the application
client_secret 	: Since this request is made from server-side code, the secret is included

The server replies with an access token and expiration time

{
  "access_token":"RsT5OjbzRn430zqMLgV3Ia",
  "expires_in":3600
}
or if there was an error

{
  "error":"invalid_request"
}
-----------------------------
## 2B. Getting an Access Token
> here instead of providing a pre-registered client secret, we send the PKCE secret that we generated at the beginning of the flow.

POST https://api.authorization-server.com/token?grant_type=authorization_code&code=AUTH_CODE_HERE&redirect_uri=REDIRECT_URI&client_id=CLIENT_ID&code_verifier=CODE_VERIFIER

code_verifier	: The random secret you generated at the beginning instead of client_secret

https://aaronparecki.com/oauth-2-simplified/
=====================================
Reference : https://tools.ietf.org/html/rfc6749

PKCE - Proof Key for Code Exchange